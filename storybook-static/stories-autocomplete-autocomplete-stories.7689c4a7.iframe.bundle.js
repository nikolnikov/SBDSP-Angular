"use strict";(self.webpackChunksbdsp_angular=self.webpackChunksbdsp_angular||[]).push([[2756],{"./node_modules/rxjs/dist/esm5/internal/operators/delay.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{c:()=>delay});var scheduler_async=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/scheduler/async.js"),concat=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/concat.js"),take=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/take.js"),lift=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/lift.js"),OperatorSubscriber=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js"),noop=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/util/noop.js");var mapTo=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/mapTo.js"),mergeMap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js"),innerFrom=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js");function delayWhen(delayDurationSelector,subscriptionDelay){return subscriptionDelay?function(source){return(0,concat.x)(subscriptionDelay.pipe((0,take.s)(1),function ignoreElements(){return(0,lift.N)((function(source,subscriber){source.subscribe((0,OperatorSubscriber._)(subscriber,noop.l))}))}()),source.pipe(delayWhen(delayDurationSelector)))}:(0,mergeMap.Z)((function(value,index){return(0,innerFrom.Tg)(delayDurationSelector(value,index)).pipe((0,take.s)(1),(0,mapTo.u)(value))}))}var timer=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/timer.js");function delay(due,scheduler){void 0===scheduler&&(scheduler=scheduler_async.E);var duration=(0,timer.O)(due,scheduler);return delayWhen((function(){return duration}))}},"./node_modules/rxjs/dist/esm5/internal/operators/mapTo.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{u:()=>mapTo});var _map__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/map.js");function mapTo(value){return(0,_map__WEBPACK_IMPORTED_MODULE_0__.T)((function(){return value}))}},"./src/stories/autocomplete/autocomplete.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AutocompleteWithIcon:()=>AutocompleteWithIcon,BasicAutocomplete:()=>BasicAutocomplete,__namedExportsOrder:()=>__namedExportsOrder,default:()=>autocomplete_stories});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),fesm2022_forms=__webpack_require__("./node_modules/@angular/forms/fesm2022/forms.mjs"),autocomplete=__webpack_require__("./node_modules/@angular/material/fesm2022/autocomplete.mjs"),form_field=__webpack_require__("./node_modules/@angular/material/fesm2022/form-field.mjs"),input=__webpack_require__("./node_modules/@angular/material/fesm2022/input.mjs"),startWith=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/startWith.js"),map=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/map.js");let QDSAutocompleteComponent=class QDSAutocompleteComponent{constructor(){this.customClasses="",this.formControlId=new fesm2022_forms.MJ,this.errorMessage="",this.hintMessage="",this.hasIcon=!1,this.inputId="",this.label="",this.panelClasses="",this.placeholder="",this.isRequired=!1,this.maxWidth=0,this.options=[],this.getSelection=new core.EventEmitter}trackByOption(index,option){return option}onSelectionChange(selection){this.getSelection.emit(selection)}ngOnInit(){this.filteredOptions=this.formControlId.valueChanges.pipe((0,startWith.Z)(""),(0,map.T)((value=>this._filter(value||""))))}_filter(value){const filterValue=value.toLowerCase();return this.options.filter((option=>option.toLowerCase().includes(filterValue)))}static{this.propDecorators={customClasses:[{type:core.Input}],formControlId:[{type:core.Input}],errorMessage:[{type:core.Input}],hintMessage:[{type:core.Input}],hasIcon:[{type:core.Input}],inputId:[{type:core.Input}],label:[{type:core.Input}],panelClasses:[{type:core.Input}],placeholder:[{type:core.Input}],isRequired:[{type:core.Input}],maxWidth:[{type:core.Input}],options:[{type:core.Input}],getSelection:[{type:core.Output}]}}};QDSAutocompleteComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"qds-autocomplete",standalone:!0,imports:[common.CommonModule,fesm2022_forms.YN,fesm2022_forms.X1,autocomplete.jL,form_field.RG,input.fS],template:'\n        <mat-form-field\n            class="ds-input"\n            [class]="customClasses"\n            [class.--error]="\n                formControlId && formControlId.invalid && formControlId.touched\n            "\n            [class.--required]="isRequired"\n            [ngStyle]="{ \'max-width.px\': maxWidth ? maxWidth : null }"\n        >\n            <mat-label *ngIf="label" class="ds-input__label">\n                <span>{{ label }}</span>\n            </mat-label>\n            <span *ngIf="hasIcon" class="ds-icon--search" matPrefix></span>\n            <input\n                type="text"\n                matInput\n                [matAutocomplete]="auto"\n                [formControl]="formControlId"\n                [id]="inputId"\n                [placeholder]="placeholder"\n                [required]="isRequired"\n            />\n            <mat-autocomplete\n                class="ds-dropdown"\n                [class]="panelClasses"\n                #auto="matAutocomplete"\n                (optionSelected)="onSelectionChange($event.option.value)"\n            >\n                <mat-option\n                    *ngFor="\n                        let option of filteredOptions | async;\n                        trackBy: trackByOption\n                    "\n                    class="ds-dropdown__item"\n                    [value]="option"\n                >\n                    {{ option }}\n                </mat-option>\n            </mat-autocomplete>\n\n            <div *ngIf="hintMessage" class="ds-input__hint">\n                {{ hintMessage }}\n            </div>\n\n            <div\n                *ngIf="\n                    formControlId &&\n                    formControlId.invalid &&\n                    formControlId.touched\n                "\n                class="ds-input__error"\n            >\n                {{ errorMessage }}\n            </div>\n        </mat-form-field>\n    '})],QDSAutocompleteComponent);const autocomplete_stories={title:"Components/Autocomplete",component:QDSAutocompleteComponent,parameters:{layout:"centered",actions:{disable:!0},interactions:{disable:!0}},tags:["autodocs","!dev"],argTypes:{label:{control:{type:"text"},table:{type:{summary:"string"}}},formControlId:{control:{type:"text"},table:{type:{summary:"string"}}},inputId:{control:{type:"text"},table:{type:{summary:"string"}}},options:{control:{type:"object"},table:{type:{summary:"[]"}}},isRequired:{control:{type:"boolean"},table:{type:{summary:"boolean"},defaultValue:{summary:"false"}}},placeholder:{control:{type:"text"},table:{type:{summary:"string"}}},hasIcon:{control:{type:"boolean"},table:{type:{summary:"boolean"},defaultValue:{summary:"false"}}},errorMessage:{control:{type:"text"},table:{type:{summary:"string"}}},hintMessage:{control:{type:"text"},table:{type:{summary:"string"}}},maxWidth:{control:{type:"number"},table:{type:{summary:"number"}}}}},BasicAutocomplete={args:{label:"Input label",options:["Adrian Veidt","Dan Dreiberg","Edward Blake","Hollis Mason","Jon Osterman","Laurie Juspeczyk","Sally Jupiter","Walter Kovacs"],inputId:"basic-autocomplete"}},AutocompleteWithIcon={args:{...BasicAutocomplete.args,hasIcon:!0,inputId:"icon-autocomplete"}},__namedExportsOrder=["BasicAutocomplete","AutocompleteWithIcon"];BasicAutocomplete.parameters={...BasicAutocomplete.parameters,docs:{...BasicAutocomplete.parameters?.docs,source:{originalSource:"{\n  args: {\n    label: 'Input label',\n    options: ['Adrian Veidt', 'Dan Dreiberg', 'Edward Blake', 'Hollis Mason', 'Jon Osterman', 'Laurie Juspeczyk', 'Sally Jupiter', 'Walter Kovacs'],\n    inputId: 'basic-autocomplete'\n  }\n}",...BasicAutocomplete.parameters?.docs?.source}}},AutocompleteWithIcon.parameters={...AutocompleteWithIcon.parameters,docs:{...AutocompleteWithIcon.parameters?.docs,source:{originalSource:"{\n  args: {\n    ...BasicAutocomplete.args,\n    hasIcon: true,\n    inputId: 'icon-autocomplete'\n  }\n}",...AutocompleteWithIcon.parameters?.docs?.source}}}}}]);