"use strict";(self.webpackChunksbdsp_angular=self.webpackChunksbdsp_angular||[]).push([[1494],{"./src/stories/button/button.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Y:()=>QDSButtonComponent});var tslib__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_angular_common__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@angular/common/fesm2022/common_module-Dx7dWex5.mjs"),_angular_material_menu__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@angular/material/fesm2022/menu.mjs"),_icon_icon_component__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/stories/icon/icon.component.ts");let QDSButtonComponent=class QDSButtonComponent{ngOnInit(){this.updateButtonStatus()}ngOnDestroy(){this.timeoutId&&clearTimeout(this.timeoutId)}onClick(event){this.clickHandler.emit(event),this.isSave&&this.setSave()}setSave(){""===this.buttonStatus&&(this.buttonStatus="saving",this.updateButtonStatus())}updateButtonStatus(){"saving"===this.buttonStatus?this.timeoutId=setTimeout((()=>{this.buttonStatus="saved",this.updateButtonStatus()}),3e3):"saved"===this.buttonStatus&&(this.timeoutId=setTimeout((()=>{this.buttonStatus=""}),1500))}getButtonClasses(){return{"ds-button":!0,[this.customClasses]:!!this.customClasses,[`--${this.type}`]:!!this.type,"--primary":"secondary"!==this.type&&"ghost"!==this.type&&"option"!==this.type,[`--${this.size}`]:"option"!==this.type&&!!this.size,"--condensed":this.isCondensed,"--destructive":this.isDestructive,"--disabled":this.isDisabled,"--inverse":this.isInverse,"--save":this.isSave,"--saving":"saving"===this.buttonStatus,"--saved":"saved"===this.buttonStatus}}constructor(el,renderer){this.el=el,this.renderer=renderer,this.customClasses="",this.icon="",this.iconRight="",this.isCondensed=!1,this.isDestructive=!1,this.isDisabled=!1,this.isInverse=!1,this.isSave=!1,this.label="",this.matMenuTriggerFor=null,this.size="lg",this.type="primary",this.clickHandler=new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter,this.buttonStatus=""}ngAfterViewInit(){this.el.nativeElement.getAttributeNames().forEach((attr=>this.renderer.removeAttribute(this.el.nativeElement,attr)))}static{this.ctorParameters=()=>[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.ElementRef},{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Renderer2}]}static{this.propDecorators={customClasses:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],icon:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],iconRight:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],isCondensed:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],isDestructive:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],isDisabled:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],isInverse:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],isSave:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],label:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],matMenuTriggerFor:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],size:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],type:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],clickHandler:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Output}]}}};QDSButtonComponent=(0,tslib__WEBPACK_IMPORTED_MODULE_2__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Component)({selector:"qds-button",standalone:!0,imports:[_angular_common__WEBPACK_IMPORTED_MODULE_3__.MD,_angular_material_menu__WEBPACK_IMPORTED_MODULE_4__.Cn,_icon_icon_component__WEBPACK_IMPORTED_MODULE_0__.$],template:'\n        <button\n            [ngClass]="getButtonClasses()"\n            [attr.aria-label]="label"\n            (click)="onClick($event)"\n            [matMenuTriggerFor]="matMenuTriggerFor"\n            type="button"\n        >\n            <ng-container *ngIf="isSave; else normalButton">\n                <div\n                    class="step1"\n                    *ngIf="\n                        buttonStatus !== \'saving\' && buttonStatus !== \'saved\'\n                    "\n                >\n                    <span>Save</span>\n                </div>\n                <div class="step2" *ngIf="buttonStatus === \'saving\'">\n                    <div\n                        class="ds-loading --small ds-mr-4"\n                        role="progressbar"\n                        aria-label="Saving"\n                    >\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                    </div>\n                    <span>Saving</span>\n                </div>\n                <div class="step3" *ngIf="buttonStatus === \'saved\'">\n                    <div class="checkmark animate"></div>\n                    <span>Saved</span>\n                </div>\n            </ng-container>\n            <ng-template #normalButton>\n                <qds-icon *ngIf="icon" name="{{ icon }}" />\n                <span>{{ label }}</span>\n                <qds-icon *ngIf="iconRight" name="{{ iconRight }}" />\n            </ng-template>\n        </button>\n    '})],QDSButtonComponent)},"./src/stories/button/icon-button.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{R:()=>QDSIconButtonComponent});var tslib__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_angular_common__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/@angular/common/fesm2022/common_module-Dx7dWex5.mjs"),_angular_material_menu__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/@angular/material/fesm2022/menu.mjs"),_icon_icon_component__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/stories/icon/icon.component.ts"),_tooltip_tooltip_component__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/stories/tooltip/tooltip.component.ts");let QDSIconButtonComponent=class QDSIconButtonComponent{onClick(event){this.clickHandler.emit(event)}getButtonClasses(){return{"ds-button":!0,"--icon":!0,[this.customClasses]:!!this.customClasses,[`--${this.size}`]:!!this.size,"--destructive":this.isDestructive,"--disabled":this.isDisabled,"--inverse":this.isInverse}}constructor(el,renderer){this.el=el,this.renderer=renderer,this.customClasses="",this.icon="",this.isDestructive=!1,this.isDisabled=!1,this.isInverse=!1,this.matMenuTriggerFor=null,this.size="lg",this.tooltip="",this.tooltipPlacement="above",this.clickHandler=new _angular_core__WEBPACK_IMPORTED_MODULE_2__.EventEmitter}ngAfterViewInit(){this.el.nativeElement.getAttributeNames().forEach((attr=>this.renderer.removeAttribute(this.el.nativeElement,attr)))}static{this.ctorParameters=()=>[{type:_angular_core__WEBPACK_IMPORTED_MODULE_2__.ElementRef},{type:_angular_core__WEBPACK_IMPORTED_MODULE_2__.Renderer2}]}static{this.propDecorators={customClasses:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input}],icon:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input}],isDestructive:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input}],isDisabled:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input}],isInverse:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input}],matMenuTriggerFor:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input}],size:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input}],tooltip:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input}],tooltipPlacement:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_2__.Input}],clickHandler:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_2__.Output}]}}};QDSIconButtonComponent=(0,tslib__WEBPACK_IMPORTED_MODULE_3__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.Component)({selector:"qds-icon-button",standalone:!0,imports:[_angular_common__WEBPACK_IMPORTED_MODULE_4__.MD,_angular_material_menu__WEBPACK_IMPORTED_MODULE_5__.Cn,_icon_icon_component__WEBPACK_IMPORTED_MODULE_0__.$,_tooltip_tooltip_component__WEBPACK_IMPORTED_MODULE_1__.t],template:'\n        <ng-container *ngIf="tooltip; else noTooltip">\n            <qds-tooltip [message]="tooltip" [position]="tooltipPlacement">\n                <button\n                    [ngClass]="getButtonClasses()"\n                    [attr.aria-label]="icon"\n                    (click)="onClick($event)"\n                    [disabled]="isDisabled"\n                    [matMenuTriggerFor]="matMenuTriggerFor"\n                >\n                    <qds-icon name="{{ icon }}" />\n                </button>\n            </qds-tooltip>\n        </ng-container>\n        <ng-template #noTooltip>\n            <button\n                [ngClass]="getButtonClasses()"\n                [attr.aria-label]="icon"\n                (click)="onClick($event)"\n                [disabled]="isDisabled"\n                [matMenuTriggerFor]="matMenuTriggerFor"\n            >\n                <qds-icon name="{{ icon }}" />\n            </button>\n        </ng-template>\n    '})],QDSIconButtonComponent)},"./src/stories/chatbot/chatbot.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Chatbot:()=>Chatbot,__namedExportsOrder:()=>__namedExportsOrder,default:()=>chatbot_stories});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),common_module_Dx7dWex5=__webpack_require__("./node_modules/@angular/common/fesm2022/common_module-Dx7dWex5.mjs"),icon_component=__webpack_require__("./src/stories/icon/icon.component.ts"),icon_button_component=__webpack_require__("./src/stories/button/icon-button.component.ts"),button_component=__webpack_require__("./src/stories/button/button.component.ts"),sidesheet_component=__webpack_require__("./src/stories/sidesheet/sidesheet.component.ts"),module_C9K6ZqpI=__webpack_require__("./node_modules/@angular/material/fesm2022/module-C9K6ZqpI.mjs"),snack_bar=__webpack_require__("./node_modules/@angular/material/fesm2022/snack-bar.mjs"),toast_component=__webpack_require__("./src/stories/toast/toast.component.ts");let QDSChatbotComponent=class QDSChatbotComponent{constructor(el,renderer,toast){this.el=el,this.renderer=renderer,this.toast=toast,this.feedbackOptions=[],this.isRestarted=!1,this.introTitle="",this.introMessage="",this.responses=[],this.responseLoadingDelay=0,this.suggestionQuestions=[],this.title="Chat with AI",this.onClose=new core.EventEmitter,this.restart=new core.EventEmitter,this.onRetry=new core.EventEmitter,this.openChatbotSidesheet=!1,this.isExtended=!1,this.hasConsented=!1,this.conversation=[],this.internalInputValue="",this.isScrolled=!1,this.visibleResponses={},this.copiedByTurn={},this.activeThumbs={},this.feedbackVisibility={},this.minRows=1,this.maxRows=3}ngAfterViewInit(){this.stripHostAttributes(),setTimeout((()=>this.autoResize()),0)}ngOnChanges(){this.isRestarted&&(this.conversation=[],this.visibleResponses={},this.copiedByTurn={},this.activeThumbs={},this.feedbackVisibility={}),this.conversation&&0!==this.conversation.length?this.conversation.forEach((turn=>{turn?.id&&!this.visibleResponses[turn.id]&&setTimeout((()=>{this.visibleResponses={...this.visibleResponses,[turn.id]:!0}}),this.responseLoadingDelay)})):Object.keys(this.visibleResponses).length>0&&(this.visibleResponses={}),this.autoResize()}toggleExtend(){this.isExtended=!this.isExtended}consented(){this.hasConsented=!0}onInputChange(e){const val=e?.target?.value??"";this.internalInputValue=val,this.askInputOnChange&&this.askInputOnChange(e),this.autoResize()}handleSubmit(){const valueToCheck=(this.internalInputValue||this.askInputValue||"").trim();if(valueToCheck.length>0){const id=`${Date.now()}-${this.conversation.length}`;this.conversation=[...this.conversation,{id,question:valueToCheck}],this.internalInputValue="",this.showResponseWithDelay(id),this.scrollToBottom()}this.askInputSubmitHandler&&this.askInputSubmitHandler()}handleRestart(){this.conversation=[],this.restart.emit()}handleSuggestionSelect(payload){const q=(payload?.question||payload?.option?.question||"").trim();if(!q)return;const id=`${Date.now()}-${this.conversation.length}`;if(this.conversation=[...this.conversation,{id,question:q,option:payload.option}],this.showResponseWithDelay(id),this.scrollToBottom(),payload.option?.action)try{payload.option.action(payload.option)}catch(e){console.warn("ChatbotSuggestion action failed",e)}}handleClose(){this.openChatbotSidesheet=!1,this.onClose.emit()}onChatbotScroll(e){const target=e.currentTarget,scrollTop=target?.scrollTop||0;this.isScrolled=scrollTop>0}getPrimary(turn,idx){const baseItem=this.responses[idx]||this.responses[0]||{},normalized="string"==typeof baseItem?{response:baseItem}:baseItem||{},raw=turn?.response||normalized.response||"";return this.getPrimaryResponse(raw)}getFollowup(idx){const baseItem=this.responses[idx]||this.responses[0]||{};return("string"==typeof baseItem?{response:baseItem}:baseItem||{}).followup||""}getPrimaryResponse(response){if(!response)return"";const idx=response.indexOf(" Do you want me");return idx>=0?response.substring(0,idx):response}copyContent(text,turnId){text&&navigator?.clipboard?.writeText(text).then((()=>{turnId&&(this.copiedByTurn={...this.copiedByTurn,[turnId]:!0},setTimeout((()=>{this.copiedByTurn={...this.copiedByTurn,[turnId]:!1}}),1500))}))}noop(){}onThumbUp(turn){const id=turn?.id;if(!id)return;const next="up"===this.activeThumbs[id]?null:"up";this.activeThumbs={...this.activeThumbs,[id]:next},this.feedbackVisibility={...this.feedbackVisibility,[id]:!1},this.thumbsUpHandler&&this.thumbsUpHandler(turn)}onThumbDown(turn){const id=turn?.id;if(!id)return;const next="down"===this.activeThumbs[id]?null:"down";this.activeThumbs={...this.activeThumbs,[id]:next};window.innerWidth<768?(this.feedbackVisibility={...this.feedbackVisibility,[id]:!1},"down"===next&&this.showFeedbackToast()):this.feedbackVisibility={...this.feedbackVisibility,[id]:"down"===next},this.thumbsDownHandler&&this.thumbsDownHandler(turn)}showFeedbackToast(){this.toast.openFromComponent(toast_component.f,{panelClass:["ds-toast","--success"],duration:5e3,verticalPosition:"top",data:{message:"Thanks for providing feedback"}})}onFeedback(opt){opt?.action&&"function"==typeof opt.action&&opt.action(opt)}hideFeedback(id){this.feedbackVisibility={...this.feedbackVisibility,[id]:!1}}handleRetry(turn){const id=turn?.id;if(!id)return;const{[id]:_removed,...rest}=this.visibleResponses;this.visibleResponses={...rest},this.activeThumbs={...this.activeThumbs,[id]:null},this.feedbackVisibility={...this.feedbackVisibility,[id]:!1},this.copiedByTurn={...this.copiedByTurn,[id]:!1},this.onRetry.emit(turn),this.showResponseWithDelay(id)}autoResize(){const el=this.textareaRef?.nativeElement;if(!el)return;el.rows=this.minRows;const computed=window.getComputedStyle(el),lh=parseInt(computed.lineHeight||"20",10)||20,currentRows=Math.floor(el.scrollHeight/lh);currentRows>=this.maxRows?(el.rows=this.maxRows,el.scrollTop=el.scrollHeight):el.rows=Math.max(currentRows,this.minRows)}handleKeyDown(e){"Enter"!==e.key||e.shiftKey||(e.preventDefault(),this.askInputDisabled||this.handleSubmit())}stripHostAttributes(){(this.el.nativeElement.getAttributeNames?.()||[]).forEach((attr=>this.renderer.removeAttribute(this.el.nativeElement,attr)))}showResponseWithDelay(id,delay){if(this.visibleResponses[id])return;const effectiveDelay="number"==typeof delay?delay:this.responseLoadingDelay;setTimeout((()=>{this.visibleResponses={...this.visibleResponses,[id]:!0},this.scrollToBottom()}),effectiveDelay>=0?effectiveDelay:0)}scrollToBottom(){requestAnimationFrame((()=>{const el=this.chatbotContentRef?.nativeElement;el&&(el.scrollTop=el.scrollHeight,this.isScrolled=el.scrollTop>0)}))}static{this.ctorParameters=()=>[{type:core.ElementRef},{type:core.Renderer2},{type:snack_bar.UG}]}static{this.propDecorators={askInputAttachHandler:[{type:core.Input}],askInputDisabled:[{type:core.Input}],askInputId:[{type:core.Input}],askInputOnChange:[{type:core.Input}],askInputPlaceholder:[{type:core.Input}],askInputSubmitHandler:[{type:core.Input}],askInputValue:[{type:core.Input}],askInputVoiceHandler:[{type:core.Input}],customClasses:[{type:core.Input}],feedbackOptions:[{type:core.Input}],hideHeader:[{type:core.Input}],isRestarted:[{type:core.Input}],introTitle:[{type:core.Input}],introMessage:[{type:core.Input}],responses:[{type:core.Input}],responseLoadingDelay:[{type:core.Input}],suggestionQuestions:[{type:core.Input}],thumbsDownHandler:[{type:core.Input}],thumbsUpHandler:[{type:core.Input}],title:[{type:core.Input}],onClose:[{type:core.Output}],restart:[{type:core.Output}],onRetry:[{type:core.Output}],chatbotRef:[{type:core.ViewChild,args:["chatbotRef"]}],chatbotContentRef:[{type:core.ViewChild,args:["chatbotContentRef"]}],textareaRef:[{type:core.ViewChild,args:["textareaRef"]}]}}};QDSChatbotComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"qds-chatbot",standalone:!0,imports:[common_module_Dx7dWex5.MD,icon_component.$,icon_button_component.R,button_component.Y,sidesheet_component.i,module_C9K6ZqpI.h,snack_bar._T,toast_component.f],template:'\n        <qds-sidesheet\n            [isChatbot]="true"\n            [toggleSidesheet]="openChatbotSidesheet"\n            (openSidesheet)="openChatbotSidesheet = $event"\n            title="Chatbot"\n        >\n            <div\n                class="ds-chatbot"\n                [ngClass]="{\n                    \'--extended\': isExtended,\n                    \'--no-header\': hideHeader\n                }"\n                #chatbotRef\n            >\n                \x3c!-- Header --\x3e\n                <div\n                    *ngIf="!hideHeader"\n                    class="ds-chatbot__header"\n                    [ngClass]="{ \'--scrolled\': isScrolled }"\n                >\n                    <div class="ds-chatbot__header-title">\n                        <qds-icon name="ai" class="ds-mr-8" />\n                        <span>{{ title || \'\' }}</span>\n                    </div>\n                    <div class="ds-chatbot__header-actions">\n                        <qds-icon-button\n                            *ngIf="conversation.length > 0"\n                            icon="arrow-clockwise"\n                            (clickHandler)="handleRestart()"\n                            size="md"\n                            tooltip="Restart chat"\n                        />\n                        <qds-icon-button\n                            [icon]="\n                                isExtended\n                                    ? \'arrows-in-simple\'\n                                    : \'arrows-out-simple\'\n                            "\n                            (clickHandler)="toggleExtend()"\n                            size="md"\n                            [tooltip]="isExtended ? \'Collapse\' : \'Expand\'"\n                        />\n                        <qds-icon-button\n                            icon="close"\n                            (clickHandler)="handleClose()"\n                            size="md"\n                            tooltip="Close"\n                        />\n                    </div>\n                </div>\n\n                \x3c!-- Content --\x3e\n                <div\n                    class="ds-chatbot__content"\n                    #chatbotContentRef\n                    (scroll)="onChatbotScroll($event)"\n                >\n                    \x3c!-- Intro / Suggestions --\x3e\n                    <div\n                        *ngIf="!conversation.length"\n                        class="ds-chatbot__intro"\n                        [ngSwitch]="hasConsented"\n                    >\n                        \x3c!-- Consent Block --\x3e\n                        <ng-container *ngSwitchCase="false">\n                            <qds-icon name="ai" size="32" />\n                            <h2>Consent</h2>\n                            By clicking \'I Consent’ below, you agree to the AI\n                            Chat Terms of Use which include providing this AI\n                            tool access to your information in order to answer\n                            questions about your lab results. This AI is\n                            programmed to provide general information and should\n                            not be considered a substitute for professional\n                            medical advice.\n                            <div\n                                class="ds-mt-16 ds-flex --row --wrap --end-center"\n                            >\n                                <qds-button\n                                    (clickHandler)="handleClose()"\n                                    label="Cancel"\n                                    size="sm"\n                                    type="secondary"\n                                />\n                                <qds-button\n                                    (clickHandler)="consented()"\n                                    type="primary"\n                                    label="I consent"\n                                    size="sm"\n                                />\n                            </div>\n                        </ng-container>\n                        \x3c!-- Suggestions Block --\x3e\n                        <ng-container *ngSwitchCase="true">\n                            <div class="ds-chatbot__suggestions">\n                                <div class="ds-chatbot__suggestions-preamble">\n                                    <qds-icon name="ai" size="32" />\n                                    <h2 *ngIf="introTitle">{{ introTitle }}</h2>\n                                    <div *ngIf="introMessage">\n                                        {{ introMessage }}\n                                    </div>\n                                    <div\n                                        *ngIf="suggestionQuestions?.length"\n                                        class="ds-chatbot__suggestions-options"\n                                    >\n                                        <qds-button\n                                            *ngFor="\n                                                let option of suggestionQuestions;\n                                                index as i\n                                            "\n                                            (clickHandler)="\n                                                handleSuggestionSelect({\n                                                    question: option.question,\n                                                    option\n                                                })\n                                            "\n                                            [label]="option.question"\n                                            type="option"\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                        </ng-container>\n                    </div>\n\n                    \x3c!-- Conversation --\x3e\n                    <ng-container *ngIf="conversation.length">\n                        <ng-container\n                            *ngFor="let turn of conversation; index as idx"\n                        >\n                            <div class="ds-chatbot__question">\n                                {{ turn.question }}\n                            </div>\n                            <div\n                                class="ds-chatbot__response"\n                                data-testid="chatbot-response"\n                            >\n                                <ng-container\n                                    *ngIf="\n                                        !visibleResponses[turn.id];\n                                        else responseBlock\n                                    "\n                                >\n                                    <div class="ds-loading-data"></div>\n                                </ng-container>\n                                <ng-template #responseBlock>\n                                    {{ getPrimary(turn, idx) }}\n                                    <div\n                                        *ngIf="getFollowup(idx)"\n                                        class="ds-chatbot__response-followup"\n                                    >\n                                        {{ getFollowup(idx) }}\n                                    </div>\n                                    <div class="ds-chatbot__response-actions">\n                                        <button\n                                            *ngIf="!copiedByTurn[turn.id]"\n                                            class="ds-button --icon --md"\n                                            matTooltip="Copy"\n                                            aria-label="copy"\n                                            (click)="\n                                                copyContent(\n                                                    getPrimary(turn, idx),\n                                                    turn.id\n                                                )\n                                            "\n                                        >\n                                            <qds-icon name="copy" />\n                                        </button>\n\n                                        <button\n                                            *ngIf="copiedByTurn[turn.id]"\n                                            class="ds-button --icon --md"\n                                            matTooltip="Copied"\n                                            aria-label="copied"\n                                            (click)="noop()"\n                                        >\n                                            <qds-icon name="check" />\n                                        </button>\n\n                                        <button\n                                            class="ds-button --icon --md"\n                                            matTooltip="Good response"\n                                            aria-label="thumbs-up"\n                                            (click)="onThumbUp(turn)"\n                                        >\n                                            <qds-icon\n                                                [name]="\n                                                    activeThumbs[turn.id] ===\n                                                    \'up\'\n                                                        ? \'thumbs-up-filled\'\n                                                        : \'thumbs-up\'\n                                                "\n                                            />\n                                        </button>\n\n                                        <button\n                                            class="ds-button --icon --md"\n                                            matTooltip="Bad response"\n                                            aria-label="thumbs-down"\n                                            (click)="onThumbDown(turn)"\n                                        >\n                                            <qds-icon\n                                                [name]="\n                                                    activeThumbs[turn.id] ===\n                                                    \'down\'\n                                                        ? \'thumbs-down-filled\'\n                                                        : \'thumbs-down\'\n                                                "\n                                            />\n                                        </button>\n\n                                        <button\n                                            class="ds-button --icon --md"\n                                            matTooltip="Try again"\n                                            (click)="handleRetry(turn)"\n                                            aria-label="retry"\n                                        >\n                                            <qds-icon\n                                                name="arrows-counter-clockwise"\n                                            />\n                                        </button>\n                                    </div>\n                                    <div\n                                        *ngIf="\n                                            activeThumbs[turn.id] === \'down\' &&\n                                            feedbackVisibility[turn.id]\n                                        "\n                                        class="ds-chatbot__feedback"\n                                    >\n                                        <div\n                                            class="ds-chatbot__feedback-content"\n                                        >\n                                            <div\n                                                class="ds-chatbot__feedback-title"\n                                            >\n                                                Provide Feedback:\n                                            </div>\n                                            <div\n                                                class="ds-chatbot__feedback-options"\n                                                *ngIf="feedbackOptions?.length"\n                                            >\n                                                <qds-button\n                                                    *ngFor="\n                                                        let opt of feedbackOptions\n                                                    "\n                                                    (clickHandler)="\n                                                        onFeedback(opt)\n                                                    "\n                                                    [label]="opt.label || \'\'"\n                                                    type="option"\n                                                />\n                                            </div>\n                                        </div>\n                                        <div class="ds-chatbot__feedback-close">\n                                            <qds-icon-button\n                                                (clickHandler)="\n                                                    hideFeedback(turn.id)\n                                                "\n                                                icon="close"\n                                                size="md"\n                                            />\n                                        </div>\n                                    </div>\n                                </ng-template>\n                            </div>\n                        </ng-container>\n                    </ng-container>\n                </div>\n\n                \x3c!-- Footer --\x3e\n                <div class="ds-chatbot__footer" *ngIf="hasConsented">\n                    <div class="ds-chatbot__search">\n                        <div\n                            class="ds-input --textarea"\n                            [ngClass]="{ \'--disabled\': askInputDisabled }"\n                        >\n                            <button\n                                class="ds-button --icon --md"\n                                matTooltip="Add files"\n                                (clickHandler)="\n                                    askInputAttachHandler &&\n                                        askInputAttachHandler()\n                                "\n                                aria-label="attach"\n                            >\n                                <qds-icon name="paperclip" />\n                            </button>\n\n                            <textarea\n                                #textareaRef\n                                class="ds-textarea"\n                                [disabled]="askInputDisabled"\n                                [id]="askInputId || null"\n                                [rows]="minRows"\n                                (input)="onInputChange($event)"\n                                (keydown)="handleKeyDown($event)"\n                                [placeholder]="\n                                    askInputPlaceholder || \'Ask anything\'\n                                "\n                                [value]="internalInputValue || \'\'"\n                                style="resize: none; overflow-y: auto"\n                                aria-label="Chat input"\n                            ></textarea>\n                            <button\n                                class="ds-button --icon --md"\n                                matTooltip="Dictate"\n                                (clickHandler)="\n                                    askInputVoiceHandler &&\n                                        askInputVoiceHandler()\n                                "\n                                aria-label="dictate"\n                            >\n                                <qds-icon name="microphone" />\n                            </button>\n                        </div>\n                        <qds-icon-button\n                            (clickHandler)="handleSubmit()"\n                            icon="arrow-circle-up"\n                        />\n                    </div>\n                    <div class="ds-chatbot__copyright">\n                        By using QuestAI, you agree to the\n                        <a href="#" class="ds-link">terms of use</a>.\n                    </div>\n                </div>\n            </div>\n        </qds-sidesheet>\n\n        <qds-button\n            (clickHandler)="openChatbotSidesheet = true"\n            label="Open Chatbot"\n            type="primary"\n        />\n    '})],QDSChatbotComponent);const chatbot_stories={title:"Components/Chatbot",component:QDSChatbotComponent,parameters:{layout:"centered",actions:{disable:!0},interactions:{disable:!0}},tags:["autodocs","!dev"]},Chatbot={args:{title:"Quest AI Assistant",introTitle:"Hello there,",introMessage:"I can help you find the right tests based on your needs. Tell me a little about what you are looking for.",askInputPlaceholder:"Ask anything",suggestionQuestions:[{question:"Which test is best for diabetes patients?",action:()=>{console.log("Which test is best for diabetes patients?")}},{question:"How many tests are in the Obstetric panel?",action:()=>{console.log("How many tests are in the Obstetric panel?")}},{question:"Can I test my testosterone at home?",action:()=>{console.log("Can I test my testosterone at home?")}}],responses:[{response:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.",followup:"Do you want me to break this down into which tests you should ask your doctor about?"}],responseLoadingDelay:2e3,feedbackOptions:[{label:"Inaccurate information",action:()=>{console.log("Inaccurate information")}},{label:"Offensive content",action:()=>{console.log("Offensive content")}},{label:"Other",action:()=>{console.log("Other")}}]},argTypes:{customClasses:{table:{disable:!0}},askInputAttachHandler:{table:{disable:!0}},askInputDisabled:{table:{disable:!0}},askInputId:{table:{disable:!0}},askInputOnChange:{table:{disable:!0}},askInputSubmitHandler:{table:{disable:!0}},askInputValue:{table:{disable:!0}},askInputVoiceHandler:{table:{disable:!0}},isRestarted:{table:{disable:!0}},onClose:{table:{disable:!0}},restart:{table:{disable:!0}},responseLoadingDelay:{table:{disable:!0}},thumbsDownHandler:{table:{disable:!0}},thumbsUpHandler:{table:{disable:!0}}}},__namedExportsOrder=["Chatbot"];Chatbot.parameters={...Chatbot.parameters,docs:{...Chatbot.parameters?.docs,source:{originalSource:"{\n  args: {\n    title: 'Quest AI Assistant',\n    introTitle: 'Hello there,',\n    introMessage: 'I can help you find the right tests based on your needs. Tell me a little about what you are looking for.',\n    askInputPlaceholder: 'Ask anything',\n    suggestionQuestions: demoSuggestionOptions,\n    responses: demoResponses,\n    responseLoadingDelay: 2000,\n    feedbackOptions: demoFeedbackOptions\n  },\n  argTypes: {\n    customClasses: {\n      table: {\n        disable: true\n      }\n    },\n    askInputAttachHandler: {\n      table: {\n        disable: true\n      }\n    },\n    askInputDisabled: {\n      table: {\n        disable: true\n      }\n    },\n    askInputId: {\n      table: {\n        disable: true\n      }\n    },\n    askInputOnChange: {\n      table: {\n        disable: true\n      }\n    },\n    askInputSubmitHandler: {\n      table: {\n        disable: true\n      }\n    },\n    askInputValue: {\n      table: {\n        disable: true\n      }\n    },\n    askInputVoiceHandler: {\n      table: {\n        disable: true\n      }\n    },\n    isRestarted: {\n      table: {\n        disable: true\n      }\n    },\n    onClose: {\n      table: {\n        disable: true\n      }\n    },\n    restart: {\n      table: {\n        disable: true\n      }\n    },\n    responseLoadingDelay: {\n      table: {\n        disable: true\n      }\n    },\n    thumbsDownHandler: {\n      table: {\n        disable: true\n      }\n    },\n    thumbsUpHandler: {\n      table: {\n        disable: true\n      }\n    }\n  }\n}",...Chatbot.parameters?.docs?.source}}}},"./src/stories/icon/icon.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$:()=>QDSIconComponent});var tslib__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_angular_common__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/common/fesm2022/common_module-Dx7dWex5.mjs");let QDSIconComponent=class QDSIconComponent{getIconClasses(){return{[`ds-icon--${this.name}`]:!!this.name,[this.customClasses]:!!this.customClasses,[this.getColor()]:!!this.color,[this.getSize()]:!!this.size,matPrefix:!!this.matPrefix,matSuffix:!!this.matSuffix}}getColor(){return`ds-${this.color}`}getSize(){return`ds-font-${this.size}`}constructor(el,renderer){this.el=el,this.renderer=renderer,this.customClasses="",this.color="",this.matPrefix=!1,this.matSuffix=!1,this.name="",this.size=""}ngAfterViewInit(){this.el.nativeElement.getAttributeNames().forEach((attr=>this.renderer.removeAttribute(this.el.nativeElement,attr)))}static{this.ctorParameters=()=>[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef},{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2}]}static{this.propDecorators={customClasses:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],color:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],matPrefix:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],matSuffix:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],name:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],size:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}]}}};QDSIconComponent=(0,tslib__WEBPACK_IMPORTED_MODULE_1__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Component)({selector:"qds-icon",standalone:!0,imports:[_angular_common__WEBPACK_IMPORTED_MODULE_2__.MD],template:'\n        <span\n            [ngClass]="getIconClasses()"\n            [attr.aria-label]="name"\n            role="img"\n        ></span>\n    '})],QDSIconComponent)},"./src/stories/sidesheet/sidesheet.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{i:()=>QDSSidesheetComponent});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),common_module_Dx7dWex5=__webpack_require__("./node_modules/@angular/common/fesm2022/common_module-Dx7dWex5.mjs"),icon_button_component=__webpack_require__("./src/stories/button/icon-button.component.ts");let QDSOverlayComponent=class QDSOverlayComponent{constructor(el,renderer){this.el=el,this.renderer=renderer,this.backdropClickable=!0,this.customClasses="",this.isOpen=!1,this.clickHandler=new core.EventEmitter}ngAfterViewInit(){this.updateHtmlClass();this.el.nativeElement.getAttributeNames().forEach((attr=>this.renderer.removeAttribute(this.el.nativeElement,attr)))}ngOnChanges(){this.updateHtmlClass()}updateHtmlClass(){const htmlElement=document.documentElement;if(this.isOpen){const scrollTop=window.scrollY||htmlElement.scrollTop;this.renderer.addClass(htmlElement,"cdk-global-scrollblock"),this.renderer.setStyle(htmlElement,"top",`-${scrollTop}px`),this.renderer.setStyle(htmlElement,"position","fixed")}else{this.renderer.removeClass(htmlElement,"cdk-global-scrollblock");const scrollTop=Math.abs(parseInt(htmlElement.style.top||"0",10));this.renderer.removeStyle(htmlElement,"top"),this.renderer.removeStyle(htmlElement,"position"),window.scrollTo(0,scrollTop)}}static{this.ctorParameters=()=>[{type:core.ElementRef},{type:core.Renderer2}]}static{this.propDecorators={backdropClickable:[{type:core.Input}],customClasses:[{type:core.Input}],isOpen:[{type:core.Input}],clickHandler:[{type:core.Output}]}}};QDSOverlayComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"qds-overlay",standalone:!0,imports:[common_module_Dx7dWex5.MD],template:'\n        <div\n            class="ds-overlay"\n            [class]="customClasses"\n            [ngClass]="{ \'--opened\': isOpen }"\n            (click)="backdropClickable && clickHandler.emit($event)"\n        ></div>\n    '})],QDSOverlayComponent);let QDSSidesheetComponent=class QDSSidesheetComponent{closeSidesheet(){this.toggleSidesheet=!this.toggleSidesheet,this.openSidesheet.emit(this.toggleSidesheet)}onSidesheetScroll(event){const container=event.currentTarget;if(!container)return;const header=this.el.nativeElement.querySelector(".ds-sidesheet__header");if(!header)return;container.scrollTop>0?this.renderer.addClass(header,"--scrolled"):this.renderer.removeClass(header,"--scrolled")}constructor(el,renderer){this.el=el,this.renderer=renderer,this.customClasses="",this.isChatbot=!1,this.title="",this.toggleSidesheet=!1,this.openSidesheet=new core.EventEmitter}ngAfterViewInit(){this.el.nativeElement.getAttributeNames().forEach((attr=>this.renderer.removeAttribute(this.el.nativeElement,attr)))}static{this.ctorParameters=()=>[{type:core.ElementRef},{type:core.Renderer2}]}static{this.propDecorators={customClasses:[{type:core.Input}],isChatbot:[{type:core.Input}],title:[{type:core.Input}],toggleSidesheet:[{type:core.Input}],openSidesheet:[{type:core.Output}]}}};QDSSidesheetComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"qds-sidesheet",standalone:!0,imports:[common_module_Dx7dWex5.MD,icon_button_component.R,QDSOverlayComponent],template:'\n        <div\n            class="ds-sidesheet"\n            [ngClass]="{ \'--opened\': toggleSidesheet, \'--chatbot\': isChatbot }"\n            (scroll)="onSidesheetScroll($event)"\n        >\n            <div class="ds-sidesheet__header" *ngIf="!isChatbot">\n                <span *ngIf="title">{{ title }}</span>\n\n                <qds-icon-button\n                    icon="close"\n                    (clickHandler)="closeSidesheet()"\n                />\n            </div>\n\n            <div [ngClass]="{ \'ds-sidesheet__content\': !isChatbot }">\n                <ng-content></ng-content>\n            </div>\n        </div>\n\n        <qds-overlay\n            [isOpen]="toggleSidesheet"\n            (clickHandler)="closeSidesheet()"\n        />\n    '})],QDSSidesheetComponent)},"./src/stories/toast/toast.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{f:()=>QDSToastComponent});var tslib__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_angular_common__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@angular/common/fesm2022/common_module-Dx7dWex5.mjs"),_angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/material/fesm2022/snack-bar.mjs");let QDSToastComponent=class QDSToastComponent{onClose(){this.toastRef.dismissWithAction()}constructor(toastRef,renderer,data){this.toastRef=toastRef,this.renderer=renderer,this.data=data,this.hideDismiss=!1,this.hideIcon=!1,this.message="",this.positionYOffset=0,this.positionYOffsetMobile=0,this.textLinkLabel="",this.hasDuration=!1,this.hideDismiss=data.hideDismiss,this.hideIcon=data.hideIcon,this.message=data.message,this.positionYOffset=data.positionYOffset,this.positionYOffsetMobile=data.positionYOffsetMobile,this.textLinkLabel=data.textLinkLabel}ngAfterViewInit(){this.updateOffset()}onResize(){this.updateOffset()}updateOffset(){const snackBarContainer=document.querySelector(".mat-mdc-snack-bar-container");if(snackBarContainer){let offset;offset=window.innerWidth<900?this.positionYOffsetMobile?`${this.positionYOffsetMobile}px`:"40px":this.positionYOffset?`${this.positionYOffset}px`:"64px","bottom"===this.toastRef.containerInstance.snackBarConfig.verticalPosition?(this.renderer.removeStyle(snackBarContainer,"margin-top"),this.renderer.setStyle(snackBarContainer,"margin-bottom",offset)):(this.renderer.removeStyle(snackBarContainer,"margin-bottom"),this.renderer.setStyle(snackBarContainer,"margin-top",offset))}}static{this.ctorParameters=()=>[{type:_angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_0__.TQ},{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Renderer2},{type:void 0,decorators:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Inject,args:[_angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_0__.ht]}]}]}static{this.propDecorators={hideDismiss:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],hideIcon:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],message:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],positionYOffset:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],positionYOffsetMobile:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],textLinkLabel:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.Input}],onResize:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_1__.HostListener,args:["window:resize",["$event"]]}]}}};QDSToastComponent=(0,tslib__WEBPACK_IMPORTED_MODULE_2__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.Component)({selector:"qds-toast",standalone:!0,imports:[_angular_common__WEBPACK_IMPORTED_MODULE_3__.MD,_angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_0__._T],template:'\n        <div\n            class="ds-toast__content"\n            [class.--text-close]="textLinkLabel"\n            [class.--hide-icon]="hideIcon"\n        >\n            <span matSnackBarLabel>\n                {{ message }}\n            </span>\n\n            <span *ngIf="!hideDismiss" matSnackBarActions>\n                <span\n                    *ngIf="textLinkLabel"\n                    class="ds-link"\n                    (click)="onClose()"\n                    role="button"\n                >\n                    {{ textLinkLabel }}\n                </span>\n\n                <button\n                    class="ds-button --icon --md"\n                    *ngIf="!textLinkLabel"\n                    (click)="onClose()"\n                >\n                    <span class="ds-icon--close" aria-label="Close"></span>\n                </button>\n            </span>\n        </div>\n    '})],QDSToastComponent)},"./src/stories/tooltip/tooltip.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{t:()=>QDSTooltipComponent});var tslib__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_angular_material_tooltip__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/material/fesm2022/module-C9K6ZqpI.mjs");let QDSTooltipComponent=class QDSTooltipComponent{constructor(el,renderer){this.el=el,this.renderer=renderer,this.message="",this.position="above"}ngAfterViewInit(){this.el.nativeElement.getAttributeNames().forEach((attr=>this.renderer.removeAttribute(this.el.nativeElement,attr)))}static{this.ctorParameters=()=>[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef},{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2}]}static{this.propDecorators={message:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],position:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],tooltip:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,args:["tooltip",{static:!0}]}],trigger:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,args:["trigger",{static:!0}]}]}}};QDSTooltipComponent=(0,tslib__WEBPACK_IMPORTED_MODULE_1__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Component)({selector:"qds-tooltip",standalone:!0,imports:[_angular_material_tooltip__WEBPACK_IMPORTED_MODULE_2__.h],template:'\n        <span\n            #tooltip="matTooltip"\n            matTooltip="{{ message }}"\n            [matTooltipPosition]="position"\n        >\n            <ng-content #trigger></ng-content>\n        </span>\n    '})],QDSTooltipComponent)}}]);