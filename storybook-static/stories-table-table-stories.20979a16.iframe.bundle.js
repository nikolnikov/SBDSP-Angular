"use strict";(self.webpackChunksbdsp_angular=self.webpackChunksbdsp_angular||[]).push([[7374],{"./src/stories/button/icon-button.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{R:()=>QDSIconButtonComponent});var tslib__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs");let QDSIconButtonComponent=class QDSIconButtonComponent{constructor(){this.customClasses="",this.icon="",this.isDestructive=!1,this.isDisabled=!1,this.isInverse=!1,this.size="lg",this.tooltip="",this.tooltipPlacement="above",this.clickHandler=new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter}onClick(event){this.clickHandler.emit(event)}getButtonClasses(){return{"ds-button":!0,"--icon":!0,[this.customClasses]:!!this.customClasses,[`--${this.size}`]:!!this.size,"--destructive":this.isDestructive,"--disabled":this.isDisabled,"--inverse":this.isInverse}}static{this.propDecorators={customClasses:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],icon:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],isDestructive:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],isDisabled:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],isInverse:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],size:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],tooltip:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],tooltipPlacement:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],clickHandler:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Output}]}}};QDSIconButtonComponent=(0,tslib__WEBPACK_IMPORTED_MODULE_1__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Component)({selector:"qds-icon-button",template:'\n        <ng-container *ngIf="tooltip; else noTooltip">\n            <span\n                matTooltip="{{ tooltip }}"\n                matTooltipPosition="{{ tooltipPlacement }}"\n            >\n                <button\n                    [ngClass]="getButtonClasses()"\n                    [attr.aria-label]="icon"\n                    (click)="onClick($event)"\n                    [disabled]="isDisabled"\n                >\n                    <span class="ds-icon--{{ icon }}"></span>\n                </button>\n            </span>\n        </ng-container>\n        <ng-template #noTooltip>\n            <button\n                [ngClass]="getButtonClasses()"\n                [attr.aria-label]="icon"\n                (click)="onClick($event)"\n                [disabled]="isDisabled"\n            >\n                <span class="ds-icon--{{ icon }}"></span>\n            </button>\n        </ng-template>\n    '})],QDSIconButtonComponent)},"./src/stories/contextual-menu/contextual-menu.component.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Y:()=>QDSContextualMenuComponent});var tslib__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),_angular_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),_angular_common__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@angular/common/fesm2022/common.mjs"),_angular_material_menu__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@angular/material/fesm2022/menu.mjs");let QDSContextualMenuComponent=class QDSContextualMenuComponent{getMenu(){return this.menu}handleItemClick(item){item.action&&item.action((()=>{}))}constructor(el,renderer){this.el=el,this.renderer=renderer,this.menuItems=[],this.menuRight=!1,this.menuClass=""}ngAfterViewInit(){this.el.nativeElement.getAttributeNames().forEach((attr=>this.renderer.removeAttribute(this.el.nativeElement,attr)))}static{this.ctorParameters=()=>[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef},{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Renderer2}]}static{this.propDecorators={menuItems:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],menuRight:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],menuClass:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.Input}],menu:[{type:_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewChild,args:["menu",{static:!0}]}]}}};QDSContextualMenuComponent=(0,tslib__WEBPACK_IMPORTED_MODULE_1__.Cg)([(0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.Component)({selector:"qds-contextual-menu",standalone:!0,imports:[_angular_common__WEBPACK_IMPORTED_MODULE_2__.CommonModule,_angular_material_menu__WEBPACK_IMPORTED_MODULE_3__.kk],template:'\n        <mat-menu\n            class="ds-menu"\n            [class]="menuClass"\n            #menu="matMenu"\n            [xPosition]="menuRight ? \'before\' : \'after\'"\n        >\n            <button\n                mat-menu-item\n                class="ds-menu__item"\n                (click)="handleItemClick(item)"\n                *ngFor="let item of menuItems"\n            >\n                <span *ngIf="item.icon" class="ds-icon--{{ item.icon }}"></span>\n                {{ item.label }}\n            </button>\n        </mat-menu>\n    '})],QDSContextualMenuComponent)},"./src/stories/table/table.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BasicTable:()=>BasicTable,ExpandableSortableTableWithTrucatedColumnsAndActions:()=>ExpandableSortableTableWithTrucatedColumnsAndActions,FlatTransparentTable:()=>FlatTransparentTable,SortableTable:()=>SortableTable,__namedExportsOrder:()=>__namedExportsOrder,default:()=>table_stories});var dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),contextual_menu_component=__webpack_require__("./src/stories/contextual-menu/contextual-menu.component.ts"),icon_button_component=__webpack_require__("./src/stories/button/icon-button.component.ts"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2022/core.mjs"),a11y=__webpack_require__("./node_modules/@angular/cdk/fesm2022/a11y.mjs"),sort=__webpack_require__("./node_modules/@angular/material/fesm2022/sort.mjs"),table=__webpack_require__("./node_modules/@angular/material/fesm2022/table.mjs");let QDSTableComponent=class QDSTableComponent{getColumnSlugs(){return this.columns?.map((c=>c.slug))||[]}announceSortChange(sortState){sortState.direction?this._liveAnnouncer.announce(`Sorted ${sortState.direction}ending`):this._liveAnnouncer.announce("Sorting cleared")}isTextOverflow(element){return element.scrollWidth>element.clientWidth}toggleRowExpansion(row){row.isExpanded=!row.isExpanded,this.dataSource.data=[...this.dataSource.data]}getExpandableClasses(row){return row.isExpanded?"--expanded":""}constructor(_liveAnnouncer,cdr,el,renderer){this._liveAnnouncer=_liveAnnouncer,this.cdr=cdr,this.el=el,this.renderer=renderer,this.customClasses="",this.isExpandable=!1,this.isFlat=!1,this.isTransparent=!1,this.isSortable=!1,this.columns=[],this.dataSource=new table.I6([]),this.defaultSortColumn="",this.defaultSortDirection="asc",this.isDefaultRow=(index,row)=>!0,this.isExpandableRow=(index,row)=>!!row.expandedContent?.value}ngAfterViewInit(){this.isSortable&&this.sort&&(this.dataSource.sort=this.sort,this.dataSource.sortingDataAccessor=(data,sortHeaderId)=>{const columnValue=data[sortHeaderId]?.value;return null!=columnValue?"string"==typeof columnValue?columnValue:columnValue.toString():""},this.defaultSortColumn&&(this.sort.active=this.defaultSortColumn),this.defaultSortDirection&&(this.sort.direction=this.defaultSortDirection)),this.cdr.detectChanges();this.el.nativeElement.getAttributeNames().forEach((attr=>this.renderer.removeAttribute(this.el.nativeElement,attr)))}static{this.ctorParameters=()=>[{type:a11y.Ai},{type:core.ChangeDetectorRef},{type:core.ElementRef},{type:core.Renderer2}]}static{this.propDecorators={customClasses:[{type:core.Input}],isExpandable:[{type:core.Input}],isFlat:[{type:core.Input}],isTransparent:[{type:core.Input}],isSortable:[{type:core.Input}],columns:[{type:core.Input}],dataSource:[{type:core.Input}],defaultSortColumn:[{type:core.Input}],defaultSortDirection:[{type:core.Input}],sort:[{type:core.ViewChild,args:[sort.B4]}]}}};QDSTableComponent=(0,tslib_es6.Cg)([(0,core.Component)({selector:"qds-table",template:'\n        <table\n            mat-table\n            class="ds-table"\n            [class]="customClasses"\n            [class.--expandable]="isExpandable"\n            [class.--flat]="isFlat"\n            [class.--transparent]="isTransparent"\n            [class.--sortable]="isSortable"\n            [dataSource]="dataSource"\n            [multiTemplateDataRows]="isExpandable"\n            matSort\n            (matSortChange)="announceSortChange($event)"\n        >\n            <ng-container\n                *ngFor="let column of columns"\n                [matColumnDef]="column.slug"\n            >\n                <th\n                    class="ds-table__head-th"\n                    [class.--actions]="column.slug === \'actions\'"\n                    [class.--no-sort]="!column.sortable"\n                    mat-header-cell\n                    *matHeaderCellDef\n                    mat-sort-header\n                >\n                    {{ column.label }}\n                </th>\n                <td\n                    class="ds-table__row-td"\n                    [class.--actions]="column.slug === \'actions\'"\n                    mat-cell\n                    *matCellDef="let row"\n                >\n                    <ng-container\n                        *ngIf="\n                            column.slug !== \'expandable\';\n                            else expandableTemplate\n                        "\n                    >\n                        <ng-container\n                            *ngIf="\n                                column.slug !== \'actions\';\n                                else actionsTemplate\n                            "\n                        >\n                            <div\n                                *ngIf="\n                                    row[column.slug]?.truncate;\n                                    else noTruncate\n                                "\n                                class="ds-truncate"\n                            >\n                                <span\n                                    #textElement\n                                    [matTooltip]="\n                                        isTextOverflow(textElement)\n                                            ? row[column.slug]?.value\n                                            : \'\'\n                                    "\n                                    [matTooltipPosition]="\'above\'"\n                                >\n                                    <span\n                                        [innerHTML]="row[column.slug]?.value"\n                                    ></span>\n                                </span>\n                            </div>\n                            <ng-template #noTruncate>\n                                <span\n                                    [innerHTML]="row[column.slug]?.value"\n                                ></span>\n                            </ng-template>\n                        </ng-container>\n\n                        <ng-template #actionsTemplate>\n                            <qds-icon-button\n                                icon="legacy--overflow"\n                                [matMenuTriggerFor]="actionsMenu.menu"\n                            />\n\n                            <qds-contextual-menu\n                                [menuItems]="row[column.slug]"\n                                [menuRight]="true"\n                                #actionsMenu\n                            />\n                        </ng-template>\n                    </ng-container>\n                    <ng-template #expandableTemplate>\n                        <qds-icon-button\n                            icon="expand"\n                            [customClasses]="getExpandableClasses(row)"\n                            (click)="toggleRowExpansion(row)"\n                        />\n                    </ng-template>\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef="expandedDetail">\n                <td\n                    mat-cell\n                    *matCellDef="let element"\n                    [attr.colspan]="getColumnSlugs().length"\n                >\n                    <div\n                        class="ds-table__expansion-panel"\n                        [class.--expanded]="element.isExpanded"\n                    >\n                        <div class="ds-table__expansion-content">\n                            <span\n                                [innerHTML]="element.expandedContent?.value"\n                            ></span>\n                        </div>\n                    </div>\n                </td>\n            </ng-container>\n\n            \x3c!-- Header row --\x3e\n            <tr\n                mat-header-row\n                class="ds-table__head"\n                *matHeaderRowDef="getColumnSlugs()"\n            ></tr>\n\n            \x3c!-- Data rows --\x3e\n            <tr\n                mat-row\n                class="ds-table__row"\n                *matRowDef="\n                    let row;\n                    columns: getColumnSlugs();\n                    when: isDefaultRow\n                "\n            ></tr>\n\n            \x3c!-- Expanded row --\x3e\n            <tr\n                mat-row\n                class="ds-table__row --expandable"\n                *matRowDef="\n                    let row;\n                    columns: [\'expandedDetail\'];\n                    when: isExpandableRow\n                "\n            ></tr>\n        </table>\n    '})],QDSTableComponent);var material_module=__webpack_require__("./src/app/material.module.ts");const table_stories={title:"Components/Table",component:QDSTableComponent,decorators:[(0,dist.moduleMetadata)({declarations:[icon_button_component.R],imports:[material_module.G,contextual_menu_component.Y]})],parameters:{layout:"centered",actions:{disable:!0},interactions:{disable:!0}},tags:["autodocs","!dev"],argTypes:{columns:{table:{disable:!0}},dataSource:{table:{disable:!0}},isExpandable:{table:{disable:!0}},isFlat:{table:{disable:!0}},isSortable:{table:{disable:!0}},isTransparent:{table:{disable:!0}}}},tableColumns=[{slug:"name",label:"Patient name"},{slug:"test",label:"Test ordered"},{slug:"labRefId",label:"Lab ref Id"},{slug:"orderedBy",label:"Ordered by"},{slug:"status",label:"Status"}],tableData=[{name:{value:"Blake, Edward"},test:{value:"Antibody Screen, RBC with Reflex to Identification, Titer, and Antigen Typing"},labRefId:{value:"123456789"},orderedBy:{value:"J. Osterman"},status:{value:"Pending"}},{name:{value:"Kovachs, Walter"},test:{value:"CBC (includes Differential and Platelets) with Automated Differential"},labRefId:{value:"123456789"},orderedBy:{value:"J. Osterman"},status:{value:"Pending"}},{name:{value:"Mason, Hollis"},test:{value:"Lipid Panel"},labRefId:{value:"123456789"},orderedBy:{value:"J. Osterman"},status:{value:"Pending"}}],sortableData=(new table.I6(tableData),[{name:{value:"Blake, Edward"},test:{value:"Antibody Screen, RBC with Reflex to Identification, Titer, and Antigen Typing"},labRefId:{value:"123456789"},orderedBy:{value:"J. Osterman"},status:{value:"Pending"}},{name:{value:"Kovachs, Walter"},test:{value:"CBC (includes Differential and Platelets) with Automated Differential"},labRefId:{value:"123456789"},orderedBy:{value:"J. Osterman"},status:{value:"Pending"}},{name:{value:"Mason, Hollis"},test:{value:"Lipid Panel"},labRefId:{value:"123456789"},orderedBy:{value:"J. Osterman"},status:{value:"Pending"}}]),expandableData=(new table.I6(sortableData),[{expandable:{value:""},name:{value:"Blake, Edward",truncate:!0},test:{value:"Antibody Screen, RBC with Reflex to Identification, Titer, and Antigen Typing",truncate:!0},labRefId:{value:"123456789"},orderedBy:{value:"J. Osterman",truncate:!0},status:{value:"Pending"},actions:[{label:"Edit",icon:"edit",action:()=>{}},{label:"Delete",icon:"trash",action:()=>{}},{label:"Print",icon:"print",action:()=>{}}],expandedContent:{value:"Content goes here."}},{expandable:{value:""},name:{value:"Kovachs, Walter",truncate:!0},test:{value:"CBC (includes Differential and Platelets) with Automated Differential",truncate:!0},labRefId:{value:"123456789"},orderedBy:{value:"J. Osterman",truncate:!0},status:{value:"Pending"},actions:[{label:"Edit",icon:"edit",action:()=>{}},{label:"Delete",icon:"trash",action:()=>{}},{label:"Print",icon:"print",action:()=>{}}],expandedContent:{value:"Content goes here."}},{expandable:{value:""},name:{value:"Mason, Hollis",truncate:!0},test:{value:"Lipid Panel",truncate:!0},labRefId:{value:"123456789"},orderedBy:{value:"J. Osterman",truncate:!0},status:{value:"Pending"},actions:[{label:"Edit",icon:"edit",action:()=>{}},{label:"Delete",icon:"trash",action:()=>{}},{label:"Print",icon:"print",action:()=>{}}],expandedContent:{value:"Content goes here."}}]),BasicTable=(new table.I6(expandableData),{args:{columns:tableColumns},render:args=>({props:{...args,dataSource:new table.I6(tableData)}}),parameters:{docs:{source:{language:"html",type:"code",code:"\n<qds-table\n    [columns]=\"[{ slug: 'expandable', label: '', sortable: false }, { slug: 'name', label: 'Patient name', sortable: true }, { slug: 'test', label: 'Test ordered', sortable: true }, { slug: 'labRefId', label: 'Lab ref Id', sortable: true }, { slug: 'orderedBy', label: 'Ordered by', sortable: true }, { slug: 'status', label: 'Status', sortable: false }, { slug: 'actions', label: '', sortable: false }]\"\n    [dataSource]=\"[{name: {value: 'Blake, Edward'}, test: {value: 'Antibody Screen, RBC with Reflex to Identification, Titer, and Antigen Typing'}, labRefId: {value: '123456789'}, orderedBy: {value: 'J. Osterman'}, status: {value: 'Pending'}}, {name: {value: 'Kovachs, Walter'}, test: {value: 'CBC (includes Differential and Platelets) with Automated Differential'}, labRefId: {value: '123456789'}, orderedBy: {value: 'J. Osterman'}, status: {value: 'Pending'}}, {name: {value: 'Mason, Hollis'}, test: {value: 'Lipid Panel'}, labRefId: {value: '123456789'}, orderedBy: {value: 'J. Osterman'}, status: {value: 'Pending'}}]\"\n></qds-table>\n                "}}}}),SortableTable={args:{columns:[{slug:"name",label:"Patient name",sortable:!0},{slug:"test",label:"Test ordered",sortable:!0},{slug:"labRefId",label:"Lab ref Id",sortable:!0},{slug:"orderedBy",label:"Ordered by",sortable:!0},{slug:"status",label:"Status",sortable:!1}],defaultSortColumn:"name",isSortable:!0},render:args=>({props:{...args,dataSource:new table.I6(sortableData)}}),parameters:{docs:{source:{language:"html",type:"code",code:"\n<qds-table\n    [columns]=\"[{slug: 'name', label: 'Patient name', sortable: true}, {slug: 'test', label: 'Test ordered', sortable: true}, {slug: 'labRefId', label: 'Lab ref Id', sortable: true}, {slug: 'orderedBy', label: 'Ordered by', sortable: true}, {slug: 'status', label: 'Status', sortable: false}]\"\n    [dataSource]=\"[{name: {value: 'Blake, Edward'}, test: {value: 'Antibody Screen, RBC with Reflex to Identification, Titer, and Antigen Typing'}, labRefId: {value: '123456789'}, orderedBy: {value: 'J. Osterman'}, status: {value: 'Pending'}}, {name: {value: 'Kovachs, Walter'}, test: {value: 'CBC (includes Differential and Platelets) with Automated Differential'}, labRefId: {value: '123456789'}, orderedBy: {value: 'J. Osterman'}, status: {value: 'Pending'}}, {name: {value: 'Mason, Hollis'}, test: {value: 'Lipid Panel'}, labRefId: {value: '123456789'}, orderedBy: {value: 'J. Osterman'}, status: {value: 'Pending'}}]\"\n    [defaultSortColumn]=\"'name'\"\n    [isSortable]=\"true\"\n></qds-table>\n                "}}}},ExpandableSortableTableWithTrucatedColumnsAndActions={args:{columns:[{slug:"expandable",label:"",sortable:!1},{slug:"name",label:"Patient name",sortable:!0},{slug:"test",label:"Test ordered",sortable:!0},{slug:"labRefId",label:"Lab ref Id",sortable:!0},{slug:"orderedBy",label:"Ordered by",sortable:!0},{slug:"status",label:"Status",sortable:!1},{slug:"actions",label:"",sortable:!1}],defaultSortColumn:"name",isExpandable:!0,isSortable:!0},render:args=>({props:{...args,dataSource:new table.I6(expandableData)}}),parameters:{docs:{source:{language:"html",type:"code",code:'\n<qds-table\n    [columns]="[{slug: \'name\', label: \'Patient name\', sortable: true}, {slug: \'test\', label: \'Test ordered\', sortable: true}, {slug: \'labRefId\', label: \'Lab ref Id\', sortable: true}, {slug: \'orderedBy\', label: \'Ordered by\', sortable: true}, {slug: \'status\', label: \'Status\', sortable: false}]"\n    [dataSource]="[{expandable: {value: ""}, name: {value: "Blake, Edward", truncate: true}, test: {value: "Antibody Screen, RBC with Reflex to Identification, Titer, and Antigen Typing", truncate: true}, labRefId: {value: "123456789"}, orderedBy: {value: "J. Osterman", truncate: true}, status: {value: "Pending"}, actions:[{label: "Edit", icon: "edit", action: ()=>{}}, {label: "Delete", icon: "trash", action: ()=>{}}, {label: "Print", icon: "print", action: ()=>{}}], expandedContent: {value: "Content goes here."}}, {expandable: {value: ""}, name: {value: "Kovachs, Walter", truncate: true}, test: {value: "CBC (includes Differential and Platelets) with Automated Differential", truncate: true}, labRefId: {value: "123456789"}, orderedBy: {value: "J. Osterman", truncate: true}, status: {value: "Pending"}, actions:[{label: "Edit", icon: "edit", action: ()=>{}}, {label: "Delete", icon: "trash", action: ()=>{}}, {label: "Print", icon: "print", action: ()=>{}}], expandedContent: {value: "Content goes here."}}, {expandable: {value: ""}, name: {value: "Mason, Hollis", truncate: true}, test: {value: "Lipid Panel", truncate: true}, labRefId: {value: "123456789"}, orderedBy: {value: "J. Osterman", truncate: true}, status: {value: "Pending"}, actions:[{label: "Edit", icon: "edit", action: ()=>{}}, {label: "Delete", icon: "trash", action: ()=>{}}, {label: "Print", icon: "print", action: ()=>{}}], expandedContent: {value: "Content goes here."}}]"\n    [defaultSortColumn]="\'name\'"\n    [isExpandable]="true"\n    [isSortable]="true"\n></qds-table>\n                '}}}},FlatTransparentTable={args:{columns:tableColumns,isFlat:!0,isTransparent:!0},render:args=>({props:{...args,dataSource:new table.I6(tableData)}}),parameters:{docs:{source:{language:"html",type:"code",code:"\n<qds-table\n    [columns]=\"[{ slug: 'expandable', label: '', sortable: false }, { slug: 'name', label: 'Patient name', sortable: true }, { slug: 'test', label: 'Test ordered', sortable: true }, { slug: 'labRefId', label: 'Lab ref Id', sortable: true }, { slug: 'orderedBy', label: 'Ordered by', sortable: true }, { slug: 'status', label: 'Status', sortable: false }, { slug: 'actions', label: '', sortable: false }]\"\n    [dataSource]=\"[{name: {value: 'Blake, Edward'}, test: {value: 'Antibody Screen, RBC with Reflex to Identification, Titer, and Antigen Typing'}, labRefId: {value: '123456789'}, orderedBy: {value: 'J. Osterman'}, status: {value: 'Pending'}}, {name: {value: 'Kovachs, Walter'}, test: {value: 'CBC (includes Differential and Platelets) with Automated Differential'}, labRefId: {value: '123456789'}, orderedBy: {value: 'J. Osterman'}, status: {value: 'Pending'}}, {name: {value: 'Mason, Hollis'}, test: {value: 'Lipid Panel'}, labRefId: {value: '123456789'}, orderedBy: {value: 'J. Osterman'}, status: {value: 'Pending'}}]\"\n    [isFlat]=\"true\"\n    [isTransparent]=\"true\"\n></qds-table>\n                "}}}},__namedExportsOrder=["BasicTable","SortableTable","ExpandableSortableTableWithTrucatedColumnsAndActions","FlatTransparentTable"];BasicTable.parameters={...BasicTable.parameters,docs:{...BasicTable.parameters?.docs,source:{originalSource:"{\n  args: {\n    columns: tableColumns\n  },\n  render: (args: Partial<QDSTableComponent>) => {\n    const dataSource = new MatTableDataSource(tableData);\n    return {\n      props: {\n        ...args,\n        dataSource: dataSource\n      }\n    };\n  },\n  parameters: {\n    docs: {\n      source: {\n        language: 'html',\n        type: 'code',\n        code: `\n<qds-table\n    [columns]=\"[{ slug: 'expandable', label: '', sortable: false }, { slug: 'name', label: 'Patient name', sortable: true }, { slug: 'test', label: 'Test ordered', sortable: true }, { slug: 'labRefId', label: 'Lab ref Id', sortable: true }, { slug: 'orderedBy', label: 'Ordered by', sortable: true }, { slug: 'status', label: 'Status', sortable: false }, { slug: 'actions', label: '', sortable: false }]\"\n    [dataSource]=\"[{name: {value: 'Blake, Edward'}, test: {value: 'Antibody Screen, RBC with Reflex to Identification, Titer, and Antigen Typing'}, labRefId: {value: '123456789'}, orderedBy: {value: 'J. Osterman'}, status: {value: 'Pending'}}, {name: {value: 'Kovachs, Walter'}, test: {value: 'CBC (includes Differential and Platelets) with Automated Differential'}, labRefId: {value: '123456789'}, orderedBy: {value: 'J. Osterman'}, status: {value: 'Pending'}}, {name: {value: 'Mason, Hollis'}, test: {value: 'Lipid Panel'}, labRefId: {value: '123456789'}, orderedBy: {value: 'J. Osterman'}, status: {value: 'Pending'}}]\"\n></qds-table>\n                `\n      }\n    }\n  }\n}",...BasicTable.parameters?.docs?.source}}},SortableTable.parameters={...SortableTable.parameters,docs:{...SortableTable.parameters?.docs,source:{originalSource:"{\n  args: {\n    columns: sortableColumns,\n    defaultSortColumn: 'name',\n    isSortable: true\n  },\n  render: (args: Partial<QDSTableComponent>) => {\n    const dataSource = new MatTableDataSource(sortableData);\n    return {\n      props: {\n        ...args,\n        dataSource: dataSource\n      }\n    };\n  },\n  parameters: {\n    docs: {\n      source: {\n        language: 'html',\n        type: 'code',\n        code: `\n<qds-table\n    [columns]=\"[{slug: 'name', label: 'Patient name', sortable: true}, {slug: 'test', label: 'Test ordered', sortable: true}, {slug: 'labRefId', label: 'Lab ref Id', sortable: true}, {slug: 'orderedBy', label: 'Ordered by', sortable: true}, {slug: 'status', label: 'Status', sortable: false}]\"\n    [dataSource]=\"[{name: {value: 'Blake, Edward'}, test: {value: 'Antibody Screen, RBC with Reflex to Identification, Titer, and Antigen Typing'}, labRefId: {value: '123456789'}, orderedBy: {value: 'J. Osterman'}, status: {value: 'Pending'}}, {name: {value: 'Kovachs, Walter'}, test: {value: 'CBC (includes Differential and Platelets) with Automated Differential'}, labRefId: {value: '123456789'}, orderedBy: {value: 'J. Osterman'}, status: {value: 'Pending'}}, {name: {value: 'Mason, Hollis'}, test: {value: 'Lipid Panel'}, labRefId: {value: '123456789'}, orderedBy: {value: 'J. Osterman'}, status: {value: 'Pending'}}]\"\n    [defaultSortColumn]=\"'name'\"\n    [isSortable]=\"true\"\n></qds-table>\n                `\n      }\n    }\n  }\n}",...SortableTable.parameters?.docs?.source}}},ExpandableSortableTableWithTrucatedColumnsAndActions.parameters={...ExpandableSortableTableWithTrucatedColumnsAndActions.parameters,docs:{...ExpandableSortableTableWithTrucatedColumnsAndActions.parameters?.docs,source:{originalSource:'{\n  args: {\n    columns: expandableColumns,\n    defaultSortColumn: \'name\',\n    isExpandable: true,\n    isSortable: true\n  },\n  render: (args: Partial<QDSTableComponent>) => {\n    const dataSource = new MatTableDataSource(expandableData);\n    return {\n      props: {\n        ...args,\n        dataSource: dataSource\n      }\n    };\n  },\n  parameters: {\n    docs: {\n      source: {\n        language: \'html\',\n        type: \'code\',\n        code: `\n<qds-table\n    [columns]="[{slug: \'name\', label: \'Patient name\', sortable: true}, {slug: \'test\', label: \'Test ordered\', sortable: true}, {slug: \'labRefId\', label: \'Lab ref Id\', sortable: true}, {slug: \'orderedBy\', label: \'Ordered by\', sortable: true}, {slug: \'status\', label: \'Status\', sortable: false}]"\n    [dataSource]="[{expandable: {value: ""}, name: {value: "Blake, Edward", truncate: true}, test: {value: "Antibody Screen, RBC with Reflex to Identification, Titer, and Antigen Typing", truncate: true}, labRefId: {value: "123456789"}, orderedBy: {value: "J. Osterman", truncate: true}, status: {value: "Pending"}, actions:[{label: "Edit", icon: "edit", action: ()=>{}}, {label: "Delete", icon: "trash", action: ()=>{}}, {label: "Print", icon: "print", action: ()=>{}}], expandedContent: {value: "Content goes here."}}, {expandable: {value: ""}, name: {value: "Kovachs, Walter", truncate: true}, test: {value: "CBC (includes Differential and Platelets) with Automated Differential", truncate: true}, labRefId: {value: "123456789"}, orderedBy: {value: "J. Osterman", truncate: true}, status: {value: "Pending"}, actions:[{label: "Edit", icon: "edit", action: ()=>{}}, {label: "Delete", icon: "trash", action: ()=>{}}, {label: "Print", icon: "print", action: ()=>{}}], expandedContent: {value: "Content goes here."}}, {expandable: {value: ""}, name: {value: "Mason, Hollis", truncate: true}, test: {value: "Lipid Panel", truncate: true}, labRefId: {value: "123456789"}, orderedBy: {value: "J. Osterman", truncate: true}, status: {value: "Pending"}, actions:[{label: "Edit", icon: "edit", action: ()=>{}}, {label: "Delete", icon: "trash", action: ()=>{}}, {label: "Print", icon: "print", action: ()=>{}}], expandedContent: {value: "Content goes here."}}]"\n    [defaultSortColumn]="\'name\'"\n    [isExpandable]="true"\n    [isSortable]="true"\n></qds-table>\n                `\n      }\n    }\n  }\n}',...ExpandableSortableTableWithTrucatedColumnsAndActions.parameters?.docs?.source}}},FlatTransparentTable.parameters={...FlatTransparentTable.parameters,docs:{...FlatTransparentTable.parameters?.docs,source:{originalSource:"{\n  args: {\n    columns: tableColumns,\n    isFlat: true,\n    isTransparent: true\n  },\n  render: (args: Partial<QDSTableComponent>) => {\n    const dataSource = new MatTableDataSource(tableData);\n    return {\n      props: {\n        ...args,\n        dataSource: dataSource\n      }\n    };\n  },\n  parameters: {\n    docs: {\n      source: {\n        language: 'html',\n        type: 'code',\n        code: `\n<qds-table\n    [columns]=\"[{ slug: 'expandable', label: '', sortable: false }, { slug: 'name', label: 'Patient name', sortable: true }, { slug: 'test', label: 'Test ordered', sortable: true }, { slug: 'labRefId', label: 'Lab ref Id', sortable: true }, { slug: 'orderedBy', label: 'Ordered by', sortable: true }, { slug: 'status', label: 'Status', sortable: false }, { slug: 'actions', label: '', sortable: false }]\"\n    [dataSource]=\"[{name: {value: 'Blake, Edward'}, test: {value: 'Antibody Screen, RBC with Reflex to Identification, Titer, and Antigen Typing'}, labRefId: {value: '123456789'}, orderedBy: {value: 'J. Osterman'}, status: {value: 'Pending'}}, {name: {value: 'Kovachs, Walter'}, test: {value: 'CBC (includes Differential and Platelets) with Automated Differential'}, labRefId: {value: '123456789'}, orderedBy: {value: 'J. Osterman'}, status: {value: 'Pending'}}, {name: {value: 'Mason, Hollis'}, test: {value: 'Lipid Panel'}, labRefId: {value: '123456789'}, orderedBy: {value: 'J. Osterman'}, status: {value: 'Pending'}}]\"\n    [isFlat]=\"true\"\n    [isTransparent]=\"true\"\n></qds-table>\n                `\n      }\n    }\n  }\n}",...FlatTransparentTable.parameters?.docs?.source}}}}}]);