{
    "pipes": [],
    "interfaces": [
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-d20d6f62c0040d6bd6d2058fa71934d19e1464ef6620d5594abf98c814fd6066ae0d619ec62935c21af4d2373f0cdc1df9e8ac139b43e1d6a801397e7d4490cc",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'sbdsp-angular'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss'\n})\nexport class AppComponent {\n  title = 'sbdsp-angular';\n}\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * The content below * * * * * * * * * * * -->\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * -->\n<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * -->\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n<!-- * * * * * * * * * Delete the template below * * * * * * * * * -->\n<!-- * * * * * * * to get started with your project! * * * * * * * -->\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n\n<style>\n  :host {\n    --bright-blue: oklch(51.01% 0.274 263.83);\n    --electric-violet: oklch(53.18% 0.28 296.97);\n    --french-violet: oklch(47.66% 0.246 305.88);\n    --vivid-pink: oklch(69.02% 0.277 332.77);\n    --hot-red: oklch(61.42% 0.238 15.34);\n    --orange-red: oklch(63.32% 0.24 31.68);\n\n    --gray-900: oklch(19.37% 0.006 300.98);\n    --gray-700: oklch(36.98% 0.014 302.71);\n    --gray-400: oklch(70.9% 0.015 304.04);\n\n    --red-to-pink-to-purple-vertical-gradient: linear-gradient(\n      180deg,\n      var(--orange-red) 0%,\n      var(--vivid-pink) 50%,\n      var(--electric-violet) 100%\n    );\n\n    --red-to-pink-to-purple-horizontal-gradient: linear-gradient(\n      90deg,\n      var(--orange-red) 0%,\n      var(--vivid-pink) 50%,\n      var(--electric-violet) 100%\n    );\n\n    --pill-accent: var(--bright-blue);\n\n    font-family: \"Inter\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n      Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\",\n      \"Segoe UI Symbol\";\n    box-sizing: border-box;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  h1 {\n    font-size: 3.125rem;\n    color: var(--gray-900);\n    font-weight: 500;\n    line-height: 100%;\n    letter-spacing: -0.125rem;\n    margin: 0;\n    font-family: \"Inter Tight\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n      Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\",\n      \"Segoe UI Symbol\";\n  }\n\n  p {\n    margin: 0;\n    color: var(--gray-700);\n  }\n\n  main {\n    width: 100%;\n    min-height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 1rem;\n    box-sizing: inherit;\n    position: relative;\n  }\n\n  .angular-logo {\n    max-width: 9.2rem;\n  }\n\n  .content {\n    display: flex;\n    justify-content: space-around;\n    width: 100%;\n    max-width: 700px;\n    margin-bottom: 3rem;\n  }\n\n  .content h1 {\n    margin-top: 1.75rem;\n  }\n\n  .content p {\n    margin-top: 1.5rem;\n  }\n\n  .divider {\n    width: 1px;\n    background: var(--red-to-pink-to-purple-vertical-gradient);\n    margin-inline: 0.5rem;\n  }\n\n  .pill-group {\n    display: flex;\n    flex-direction: column;\n    align-items: start;\n    flex-wrap: wrap;\n    gap: 1.25rem;\n  }\n\n  .pill {\n    display: flex;\n    align-items: center;\n    --pill-accent: var(--bright-blue);\n    background: color-mix(in srgb, var(--pill-accent) 5%, transparent);\n    color: var(--pill-accent);\n    padding-inline: 0.75rem;\n    padding-block: 0.375rem;\n    border-radius: 2.75rem;\n    border: 0;\n    transition: background 0.3s ease;\n    font-family: var(--inter-font);\n    font-size: 0.875rem;\n    font-style: normal;\n    font-weight: 500;\n    line-height: 1.4rem;\n    letter-spacing: -0.00875rem;\n    text-decoration: none;\n  }\n\n  .pill:hover {\n    background: color-mix(in srgb, var(--pill-accent) 15%, transparent);\n  }\n\n  .pill-group .pill:nth-child(6n + 1) {\n    --pill-accent: var(--bright-blue);\n  }\n  .pill-group .pill:nth-child(6n + 2) {\n    --pill-accent: var(--french-violet);\n  }\n  .pill-group .pill:nth-child(6n + 3),\n  .pill-group .pill:nth-child(6n + 4),\n  .pill-group .pill:nth-child(6n + 5) {\n    --pill-accent: var(--hot-red);\n  }\n\n  .pill-group svg {\n    margin-inline-start: 0.25rem;\n  }\n\n  .social-links {\n    display: flex;\n    align-items: center;\n    gap: 0.73rem;\n    margin-top: 1.5rem;\n  }\n\n  .social-links path {\n    transition: fill 0.3s ease;\n    fill: var(--gray-400);\n  }\n\n  .social-links a:hover svg path {\n    fill: var(--gray-900);\n  }\n\n  @media screen and (max-width: 650px) {\n    .content {\n      flex-direction: column;\n      width: max-content;\n    }\n\n    .divider {\n      height: 1px;\n      width: 100%;\n      background: var(--red-to-pink-to-purple-horizontal-gradient);\n      margin-block: 1.5rem;\n    }\n  }\n</style>\n\n<main class=\"main\">\n  <div class=\"content\">\n    <div class=\"left-side\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 982 239\"\n        fill=\"none\"\n        class=\"angular-logo\"\n      >\n        <g clip-path=\"url(#a)\">\n          <path\n            fill=\"url(#b)\"\n            d=\"M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z\"\n          />\n          <path\n            fill=\"url(#c)\"\n            d=\"M388.676 191.625h30.849L363.31 31.828h-35.758l-56.215 159.797h30.848l13.174-39.356h60.061l13.256 39.356Zm-65.461-62.675 21.602-64.311h1.227l21.602 64.311h-44.431Zm126.831-7.527v70.202h-28.23V71.839h27.002v20.374h1.392c2.782-6.71 7.2-12.028 13.255-15.956 6.056-3.927 13.584-5.89 22.503-5.89 8.264 0 15.465 1.8 21.684 5.318 6.137 3.518 10.964 8.673 14.319 15.382 3.437 6.71 5.074 14.81 4.992 24.383v76.175h-28.23v-71.92c0-8.019-2.046-14.237-6.219-18.819-4.173-4.5-9.819-6.791-17.102-6.791-4.91 0-9.328 1.063-13.174 3.272-3.846 2.128-6.792 5.237-9.001 9.328-2.046 4.009-3.191 8.918-3.191 14.728ZM589.233 239c-10.147 0-18.82-1.391-26.103-4.091-7.282-2.7-13.092-6.382-17.511-10.964-4.418-4.582-7.528-9.655-9.164-15.219l25.448-6.136c1.145 2.372 2.782 4.663 4.991 6.954 2.209 2.291 5.155 4.255 8.837 5.81 3.683 1.554 8.428 2.291 14.074 2.291 8.019 0 14.647-1.964 19.884-5.81 5.237-3.845 7.856-10.227 7.856-19.064v-22.665h-1.391c-1.473 2.946-3.601 5.892-6.383 9.001-2.782 3.109-6.464 5.645-10.965 7.691-4.582 2.046-10.228 3.109-17.101 3.109-9.165 0-17.511-2.209-25.039-6.545-7.446-4.337-13.42-10.883-17.757-19.474-4.418-8.673-6.628-19.473-6.628-32.565 0-13.091 2.21-24.301 6.628-33.383 4.419-9.082 10.311-15.955 17.839-20.7 7.528-4.746 15.874-7.037 25.039-7.037 7.037 0 12.846 1.145 17.347 3.518 4.582 2.373 8.182 5.236 10.883 8.51 2.7 3.272 4.746 6.382 6.137 9.327h1.554v-19.8h27.821v121.749c0 10.228-2.454 18.737-7.364 25.447-4.91 6.709-11.538 11.7-20.048 15.055-8.509 3.355-18.165 4.991-28.884 4.991Zm.245-71.266c5.974 0 11.047-1.473 15.302-4.337 4.173-2.945 7.446-7.118 9.573-12.519 2.21-5.482 3.274-12.027 3.274-19.637 0-7.609-1.064-14.155-3.274-19.8-2.127-5.646-5.318-10.064-9.491-13.255-4.174-3.11-9.329-4.746-15.384-4.746s-11.537 1.636-15.792 4.91c-4.173 3.272-7.365 7.772-9.492 13.418-2.128 5.727-3.191 12.191-3.191 19.392 0 7.2 1.063 13.745 3.273 19.228 2.127 5.482 5.318 9.736 9.573 12.764 4.174 3.027 9.41 4.582 15.629 4.582Zm141.56-26.51V71.839h28.23v119.786h-27.412v-21.273h-1.227c-2.7 6.709-7.119 12.191-13.338 16.446-6.137 4.255-13.747 6.382-22.748 6.382-7.855 0-14.81-1.718-20.783-5.237-5.974-3.518-10.72-8.591-14.075-15.382-3.355-6.709-5.073-14.891-5.073-24.464V71.839h28.312v71.921c0 7.609 2.046 13.664 6.219 18.083 4.173 4.5 9.655 6.709 16.365 6.709 4.173 0 8.183-.982 12.111-3.028 3.927-2.045 7.118-5.072 9.655-9.082 2.537-4.091 3.764-9.164 3.764-15.218Zm65.707-109.395v159.796h-28.23V31.828h28.23Zm44.841 162.169c-7.61 0-14.402-1.391-20.457-4.091-6.055-2.7-10.883-6.791-14.32-12.109-3.518-5.319-5.237-11.946-5.237-19.801 0-6.791 1.228-12.355 3.765-16.773 2.536-4.419 5.891-7.937 10.228-10.637 4.337-2.618 9.164-4.664 14.647-6.055 5.4-1.391 11.046-2.373 16.856-3.027 7.037-.737 12.683-1.391 17.102-1.964 4.337-.573 7.528-1.555 9.574-2.782 1.963-1.309 3.027-3.273 3.027-5.973v-.491c0-5.891-1.718-10.391-5.237-13.664-3.518-3.191-8.51-4.828-15.056-4.828-6.955 0-12.356 1.473-16.447 4.5-4.009 3.028-6.71 6.546-8.183 10.719l-26.348-3.764c2.046-7.282 5.483-13.336 10.31-18.328 4.746-4.909 10.638-8.59 17.511-11.045 6.955-2.455 14.565-3.682 22.912-3.682 5.809 0 11.537.654 17.265 2.045s10.965 3.6 15.711 6.71c4.746 3.109 8.51 7.282 11.455 12.6 2.864 5.318 4.337 11.946 4.337 19.883v80.184h-27.166v-16.446h-.9c-1.719 3.355-4.092 6.464-7.201 9.328-3.109 2.864-6.955 5.237-11.619 6.955-4.828 1.718-10.229 2.536-16.529 2.536Zm7.364-20.701c5.646 0 10.556-1.145 14.729-3.354 4.173-2.291 7.364-5.237 9.655-9.001 2.292-3.763 3.355-7.854 3.355-12.273v-14.155c-.9.737-2.373 1.391-4.5 2.046-2.128.654-4.419 1.145-7.037 1.636-2.619.491-5.155.9-7.692 1.227-2.537.328-4.746.655-6.628.901-4.173.572-8.019 1.472-11.292 2.781-3.355 1.31-5.973 3.11-7.855 5.401-1.964 2.291-2.864 5.318-2.864 8.918 0 5.237 1.882 9.164 5.728 11.782 3.682 2.782 8.51 4.091 14.401 4.091Zm64.643 18.328V71.839h27.412v19.965h1.227c2.21-6.955 5.974-12.274 11.292-16.038 5.319-3.763 11.456-5.645 18.329-5.645 1.555 0 3.355.082 5.237.163 1.964.164 3.601.328 4.91.573v25.938c-1.227-.41-3.109-.819-5.646-1.146a58.814 58.814 0 0 0-7.446-.49c-5.155 0-9.738 1.145-13.829 3.354-4.091 2.209-7.282 5.236-9.655 9.164-2.373 3.927-3.519 8.427-3.519 13.5v70.448h-28.312ZM222.077 39.192l-8.019 125.923L137.387 0l84.69 39.192Zm-53.105 162.825-57.933 33.056-57.934-33.056 11.783-28.556h92.301l11.783 28.556ZM111.039 62.675l30.357 73.803H80.681l30.358-73.803ZM7.937 165.115 0 39.192 84.69 0 7.937 165.115Z\"\n          />\n        </g>\n        <defs>\n          <radialGradient\n            id=\"c\"\n            cx=\"0\"\n            cy=\"0\"\n            r=\"1\"\n            gradientTransform=\"rotate(118.122 171.182 60.81) scale(205.794)\"\n            gradientUnits=\"userSpaceOnUse\"\n          >\n            <stop stop-color=\"#FF41F8\" />\n            <stop offset=\".707\" stop-color=\"#FF41F8\" stop-opacity=\".5\" />\n            <stop offset=\"1\" stop-color=\"#FF41F8\" stop-opacity=\"0\" />\n          </radialGradient>\n          <linearGradient\n            id=\"b\"\n            x1=\"0\"\n            x2=\"982\"\n            y1=\"192\"\n            y2=\"192\"\n            gradientUnits=\"userSpaceOnUse\"\n          >\n            <stop stop-color=\"#F0060B\" />\n            <stop offset=\"0\" stop-color=\"#F0070C\" />\n            <stop offset=\".526\" stop-color=\"#CC26D5\" />\n            <stop offset=\"1\" stop-color=\"#7702FF\" />\n          </linearGradient>\n          <clipPath id=\"a\"><path fill=\"#fff\" d=\"M0 0h982v239H0z\" /></clipPath>\n        </defs>\n      </svg>\n      <h1>Hello, {{ title }}</h1>\n      <p>Congratulations! Your app is running. 🎉</p>\n    </div>\n    <div class=\"divider\" role=\"separator\" aria-label=\"Divider\"></div>\n    <div class=\"right-side\">\n      <div class=\"pill-group\">\n        @for (item of [\n          { title: 'Explore the Docs', link: 'https://angular.dev' },\n          { title: 'Learn with Tutorials', link: 'https://angular.dev/tutorials' },\n          { title: 'CLI Docs', link: 'https://angular.dev/tools/cli' },\n          { title: 'Angular Language Service', link: 'https://angular.dev/tools/language-service' },\n          { title: 'Angular DevTools', link: 'https://angular.dev/tools/devtools' },\n        ]; track item.title) {\n          <a\n            class=\"pill\"\n            [href]=\"item.link\"\n            target=\"_blank\"\n            rel=\"noopener\"\n          >\n            <span>{{ item.title }}</span>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              height=\"14\"\n              viewBox=\"0 -960 960 960\"\n              width=\"14\"\n              fill=\"currentColor\"\n            >\n              <path\n                d=\"M200-120q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h280v80H200v560h560v-280h80v280q0 33-23.5 56.5T760-120H200Zm188-212-56-56 372-372H560v-80h280v280h-80v-144L388-332Z\"\n              />\n            </svg>\n          </a>\n        }\n      </div>\n      <div class=\"social-links\">\n        <a\n          href=\"https://github.com/angular/angular\"\n          aria-label=\"Github\"\n          target=\"_blank\"\n          rel=\"noopener\"\n        >\n          <svg\n            width=\"25\"\n            height=\"24\"\n            viewBox=\"0 0 25 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            alt=\"Github\"\n          >\n            <path\n              d=\"M12.3047 0C5.50634 0 0 5.50942 0 12.3047C0 17.7423 3.52529 22.3535 8.41332 23.9787C9.02856 24.0946 9.25414 23.7142 9.25414 23.3871C9.25414 23.0949 9.24389 22.3207 9.23876 21.2953C5.81601 22.0377 5.09414 19.6444 5.09414 19.6444C4.53427 18.2243 3.72524 17.8449 3.72524 17.8449C2.61064 17.082 3.81137 17.0973 3.81137 17.0973C5.04697 17.1835 5.69604 18.3647 5.69604 18.3647C6.79321 20.2463 8.57636 19.7029 9.27978 19.3881C9.39052 18.5924 9.70736 18.0499 10.0591 17.7423C7.32641 17.4347 4.45429 16.3765 4.45429 11.6618C4.45429 10.3185 4.9311 9.22133 5.72065 8.36C5.58222 8.04931 5.16694 6.79833 5.82831 5.10337C5.82831 5.10337 6.85883 4.77319 9.2121 6.36459C10.1965 6.09082 11.2424 5.95546 12.2883 5.94931C13.3342 5.95546 14.3801 6.09082 15.3644 6.36459C17.7023 4.77319 18.7328 5.10337 18.7328 5.10337C19.3942 6.79833 18.9789 8.04931 18.8559 8.36C19.6403 9.22133 20.1171 10.3185 20.1171 11.6618C20.1171 16.3888 17.2409 17.4296 14.5031 17.7321C14.9338 18.1012 15.3337 18.8559 15.3337 20.0084C15.3337 21.6552 15.3183 22.978 15.3183 23.3779C15.3183 23.7009 15.5336 24.0854 16.1642 23.9623C21.0871 22.3484 24.6094 17.7341 24.6094 12.3047C24.6094 5.50942 19.0999 0 12.3047 0Z\"\n            />\n          </svg>\n        </a>\n        <a\n          href=\"https://twitter.com/angular\"\n          aria-label=\"Twitter\"\n          target=\"_blank\"\n          rel=\"noopener\"\n        >\n          <svg\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            alt=\"Twitter\"\n          >\n            <path\n              d=\"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z\"\n            />\n          </svg>\n        </a>\n        <a\n          href=\"https://www.youtube.com/channel/UCbn1OgGei-DV7aSRo_HaAiw\"\n          aria-label=\"Youtube\"\n          target=\"_blank\"\n          rel=\"noopener\"\n        >\n          <svg\n            width=\"29\"\n            height=\"20\"\n            viewBox=\"0 0 29 20\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            alt=\"Youtube\"\n          >\n            <path\n              fill-rule=\"evenodd\"\n              clip-rule=\"evenodd\"\n              d=\"M27.4896 1.52422C27.9301 1.96749 28.2463 2.51866 28.4068 3.12258C29.0004 5.35161 29.0004 10 29.0004 10C29.0004 10 29.0004 14.6484 28.4068 16.8774C28.2463 17.4813 27.9301 18.0325 27.4896 18.4758C27.0492 18.9191 26.5 19.2389 25.8972 19.4032C23.6778 20 14.8068 20 14.8068 20C14.8068 20 5.93586 20 3.71651 19.4032C3.11363 19.2389 2.56449 18.9191 2.12405 18.4758C1.68361 18.0325 1.36732 17.4813 1.20683 16.8774C0.613281 14.6484 0.613281 10 0.613281 10C0.613281 10 0.613281 5.35161 1.20683 3.12258C1.36732 2.51866 1.68361 1.96749 2.12405 1.52422C2.56449 1.08095 3.11363 0.76113 3.71651 0.596774C5.93586 0 14.8068 0 14.8068 0C14.8068 0 23.6778 0 25.8972 0.596774C26.5 0.76113 27.0492 1.08095 27.4896 1.52422ZM19.3229 10L11.9036 5.77905V14.221L19.3229 10Z\"\n            />\n          </svg>\n        </a>\n      </div>\n    </div>\n  </div>\n</main>\n\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * The content above * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * * -->\n<!-- * * * * * * * * * * and can be replaced.  * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * End of Placeholder  * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n\n\n<router-outlet />\n"
        },
        {
            "name": "QDSAccordionComponent",
            "id": "component-QDSAccordionComponent-2820f097b34266f8bde923ae5d2d7b96335eed1ee6848ec876bb27aa688b65d55c940a23279e45575bb9a041e3ea94a26985be9a9586976937d1e95d4bd5284e",
            "file": "src/stories/accordion/accordion.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-accordion",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-accordion\n    [class]=\"customClasses\"\n    [multi]=\"!openSingleItem\"\n    class=\"ds-accordion__wrapper\"\n>\n    <mat-expansion-panel\n        *ngFor=\"let item of accordionContent\"\n        [expanded]=\"defaultExpanded\"\n        class=\"ds-accordion\"\n    >\n        <mat-expansion-panel-header class=\"ds-accordion__title\">\n            <div class=\"ds-accordion__title-wrapper\">\n                <span\n                    *ngIf=\"item.icon\"\n                    class=\"ds-icon--{{ item.icon }}\"\n                ></span>\n                {{ item.title }}\n            </div>\n        </mat-expansion-panel-header>\n        <div class=\"ds-accordion__content\">\n            {{ item.content }}\n        </div>\n    </mat-expansion-panel>\n</mat-accordion>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "accordionContent",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "defaultExpanded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "openSingleItem",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatExpansionModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatExpansionModule } from '@angular/material/expansion';\n\n@Component({\n    selector: 'qds-accordion',\n    standalone: true,\n    imports: [CommonModule, MatExpansionModule],\n    template: `\n        <mat-accordion\n            [class]=\"customClasses\"\n            [multi]=\"!openSingleItem\"\n            class=\"ds-accordion__wrapper\"\n        >\n            <mat-expansion-panel\n                *ngFor=\"let item of accordionContent\"\n                [expanded]=\"defaultExpanded\"\n                class=\"ds-accordion\"\n            >\n                <mat-expansion-panel-header class=\"ds-accordion__title\">\n                    <div class=\"ds-accordion__title-wrapper\">\n                        <span\n                            *ngIf=\"item.icon\"\n                            class=\"ds-icon--{{ item.icon }}\"\n                        ></span>\n                        {{ item.title }}\n                    </div>\n                </mat-expansion-panel-header>\n                <div class=\"ds-accordion__content\">\n                    {{ item.content }}\n                </div>\n            </mat-expansion-panel>\n        </mat-accordion>\n    `\n})\nexport class QDSAccordionComponent {\n    @Input() customClasses: string = '';\n    @Input() openSingleItem: boolean = false;\n    @Input() defaultExpanded: boolean = false;\n    @Input() accordionContent: {\n        title: string;\n        content: string;\n        icon: string;\n    }[] = [];\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "QDSAutocompleteComponent",
            "id": "component-QDSAutocompleteComponent-263b9bbb92cf6b67249b23ea00bb06208df14e81e7ce27406eed512a0553198a118b7920b556eac1d3f413d411af1dd0c8db92c1e8bb6140eec823e40abd0ec9",
            "file": "src/stories/autocomplete/autocomplete.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-autocomplete",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-form-field\n    class=\"ds-input\"\n    [class]=\"customClasses\"\n    [class.--error]=\"\n        formControlId && formControlId.invalid && formControlId.touched\n    \"\n    [class.--required]=\"isRequired\"\n    [ngStyle]=\"{ 'max-width.px': maxWidth ? maxWidth : null }\"\n>\n    <mat-label *ngIf=\"label\" class=\"ds-input__label\">\n        <span>{{ label }}</span>\n    </mat-label>\n    <span *ngIf=\"hasIcon\" class=\"ds-icon--search\" matPrefix></span>\n    <input\n        type=\"text\"\n        matInput\n        [matAutocomplete]=\"auto\"\n        [formControl]=\"formControlId\"\n        [id]=\"inputId\"\n        [placeholder]=\"placeholder\"\n        [required]=\"isRequired\"\n    />\n    <mat-autocomplete\n        class=\"ds-dropdown\"\n        [class]=\"panelClasses\"\n        #auto=\"matAutocomplete\"\n        (optionSelected)=\"onSelectionChange($event.option.value)\"\n    >\n        <mat-option\n            *ngFor=\"\n                let option of filteredOptions | async;\n                trackBy: trackByOption\n            \"\n            class=\"ds-dropdown__item\"\n            [value]=\"option\"\n        >\n            {{ option }}\n        </mat-option>\n    </mat-autocomplete>\n\n    <div *ngIf=\"hintMessage\" class=\"ds-input__hint\">\n        {{ hintMessage }}\n    </div>\n\n    <div\n        *ngIf=\"\n            formControlId &&\n            formControlId.invalid &&\n            formControlId.touched\n        \"\n        class=\"ds-input__error\"\n    >\n        {{ errorMessage }}\n    </div>\n</mat-form-field>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formControlId",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "hasIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hintMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isRequired",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "maxWidth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "panelClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "getSelection",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filteredOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]> | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 95
                }
            ],
            "methodsClass": [
                {
                    "name": "_filter",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectionChange",
                    "args": [
                        {
                            "name": "selection",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selection",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackByOption",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "option",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "option",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatAutocompleteModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { FormControl } from '@angular/forms';\nimport { Observable, startWith, map } from 'rxjs';\n\n@Component({\n    selector: 'qds-autocomplete',\n    standalone: true,\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatAutocompleteModule,\n        MatFormFieldModule,\n        MatInputModule\n    ],\n    template: `\n        <mat-form-field\n            class=\"ds-input\"\n            [class]=\"customClasses\"\n            [class.--error]=\"\n                formControlId && formControlId.invalid && formControlId.touched\n            \"\n            [class.--required]=\"isRequired\"\n            [ngStyle]=\"{ 'max-width.px': maxWidth ? maxWidth : null }\"\n        >\n            <mat-label *ngIf=\"label\" class=\"ds-input__label\">\n                <span>{{ label }}</span>\n            </mat-label>\n            <span *ngIf=\"hasIcon\" class=\"ds-icon--search\" matPrefix></span>\n            <input\n                type=\"text\"\n                matInput\n                [matAutocomplete]=\"auto\"\n                [formControl]=\"formControlId\"\n                [id]=\"inputId\"\n                [placeholder]=\"placeholder\"\n                [required]=\"isRequired\"\n            />\n            <mat-autocomplete\n                class=\"ds-dropdown\"\n                [class]=\"panelClasses\"\n                #auto=\"matAutocomplete\"\n                (optionSelected)=\"onSelectionChange($event.option.value)\"\n            >\n                <mat-option\n                    *ngFor=\"\n                        let option of filteredOptions | async;\n                        trackBy: trackByOption\n                    \"\n                    class=\"ds-dropdown__item\"\n                    [value]=\"option\"\n                >\n                    {{ option }}\n                </mat-option>\n            </mat-autocomplete>\n\n            <div *ngIf=\"hintMessage\" class=\"ds-input__hint\">\n                {{ hintMessage }}\n            </div>\n\n            <div\n                *ngIf=\"\n                    formControlId &&\n                    formControlId.invalid &&\n                    formControlId.touched\n                \"\n                class=\"ds-input__error\"\n            >\n                {{ errorMessage }}\n            </div>\n        </mat-form-field>\n    `\n})\nexport class QDSAutocompleteComponent {\n    @Input() customClasses: string = '';\n    @Input() formControlId: FormControl = new FormControl();\n    @Input() errorMessage: string = '';\n    @Input() hintMessage: string = '';\n    @Input() hasIcon: boolean = false;\n    @Input() inputId: string = '';\n    @Input() label: string = '';\n    @Input() panelClasses: string = '';\n    @Input() placeholder: string = '';\n    @Input() isRequired: boolean = false;\n    @Input() maxWidth: number = 0;\n    @Input() options: any[] = [];\n\n    @Output() getSelection = new EventEmitter<any>();\n\n    filteredOptions: Observable<string[]> | undefined;\n\n    trackByOption(index: number, option: string): string {\n        return option;\n    }\n\n    onSelectionChange(selection: any) {\n        this.getSelection.emit(selection);\n    }\n\n    ngOnInit() {\n        this.filteredOptions = this.formControlId.valueChanges.pipe(\n            startWith(''),\n            map(value => this._filter(value || ''))\n        );\n    }\n    private _filter(value: string): string[] {\n        const filterValue = value.toLowerCase();\n        return this.options.filter(option =>\n            option.toLowerCase().includes(filterValue)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "QDSAvatarComponent",
            "id": "component-QDSAvatarComponent-2d508f95386c8fedc8f2d84350fc71b23478ea48facd1b6f580841ea98dc7e9e3700ea288e1cfa7f539ed9fbd345557897382da9b3c7084770b2fea9747d04c7",
            "file": "src/stories/avatar/avatar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-avatar",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"isButton; else divTemplate\">\n    <button\n        class=\"ds-avatar\"\n        [ngClass]=\"getSize()\"\n        [class]=\"customClasses\"\n        [class.--disabled]=\"isDisabled\"\n        [class.--notification]=\"hasNotification\"\n        [class.--solid]=\"!isOutlined\"\n        [class.--outlined]=\"isOutlined\"\n        (click)=\"onClick($event)\"\n    >\n        {{ initial }}\n    </button>\n</ng-container>\n<ng-template #divTemplate>\n    <div\n        class=\"ds-avatar\"\n        [ngClass]=\"getSize()\"\n        [class]=\"customClasses\"\n        [class.--disabled]=\"isDisabled\"\n        [class.--notification]=\"hasNotification\"\n        [class.--solid]=\"!isOutlined\"\n        [class.--outlined]=\"isOutlined\"\n    >\n        {{ initial }}\n    </div>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hasNotification",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "initial",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isOutlined",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'lg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "\"sm\" | \"md\" | \"lg\" | \"xl\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clickHandler",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getSize",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    Renderer2\n} from '@angular/core';\n\n@Component({\n    selector: 'qds-avatar',\n    template: `\n        <ng-container *ngIf=\"isButton; else divTemplate\">\n            <button\n                class=\"ds-avatar\"\n                [ngClass]=\"getSize()\"\n                [class]=\"customClasses\"\n                [class.--disabled]=\"isDisabled\"\n                [class.--notification]=\"hasNotification\"\n                [class.--solid]=\"!isOutlined\"\n                [class.--outlined]=\"isOutlined\"\n                (click)=\"onClick($event)\"\n            >\n                {{ initial }}\n            </button>\n        </ng-container>\n        <ng-template #divTemplate>\n            <div\n                class=\"ds-avatar\"\n                [ngClass]=\"getSize()\"\n                [class]=\"customClasses\"\n                [class.--disabled]=\"isDisabled\"\n                [class.--notification]=\"hasNotification\"\n                [class.--solid]=\"!isOutlined\"\n                [class.--outlined]=\"isOutlined\"\n            >\n                {{ initial }}\n            </div>\n        </ng-template>\n    `\n})\nexport class QDSAvatarComponent implements AfterViewInit {\n    @Input() customClasses: string = '';\n    @Input() isButton: boolean = false;\n    @Input() isDisabled: boolean = false;\n    @Input() isOutlined: boolean = false;\n    @Input() hasNotification: boolean = false;\n    @Input() initial: string = '';\n    @Input() size: 'sm' | 'md' | 'lg' | 'xl' = 'lg';\n\n    @Output() clickHandler = new EventEmitter<Event>();\n\n    onClick(event: Event) {\n        this.clickHandler.emit(event);\n    }\n\n    getSize() {\n        return `--${this.size}`;\n    }\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 60,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSBadgeComponent",
            "id": "component-QDSBadgeComponent-926b92f963e1d88cc99626402c43e6584bfd012ffdfab54d4a8b0c594c62d41a148a8c0de616376ec694a890427ea20a5265816494f8e8399c631ce487e2de48",
            "file": "src/stories/badge/badge.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-badge",
            "styleUrls": [],
            "styles": [],
            "template": "<div\n    class=\"ds-badge\"\n    [class]=\"customClasses\"\n    [ngClass]=\"getColor()\"\n    [ngClass]=\"getStatus()\"\n    [class.--circle]=\"isCircle\"\n    [class.--secondary]=\"secondary\"\n    [class.--dot]=\"hasNotification\"\n    [class.--neutral]=\"!status\"\n    role=\"status\"\n>\n    {{ label }}\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hasNotification",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isCircle",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "secondary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "status",
                    "defaultValue": "'neutral'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "\"neutral\" | \"informative\" | \"success\" | \"warning\" | \"error\" | \"new\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getColor",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2\n} from '@angular/core';\n\n@Component({\n    selector: 'qds-badge',\n    template: `\n        <div\n            class=\"ds-badge\"\n            [class]=\"customClasses\"\n            [ngClass]=\"getColor()\"\n            [ngClass]=\"getStatus()\"\n            [class.--circle]=\"isCircle\"\n            [class.--secondary]=\"secondary\"\n            [class.--dot]=\"hasNotification\"\n            [class.--neutral]=\"!status\"\n            role=\"status\"\n        >\n            {{ label }}\n        </div>\n    `\n})\nexport class QDSBadgeComponent implements AfterViewInit {\n    @Input() color: string = '';\n    @Input() customClasses: string = '';\n    @Input() hasNotification: boolean = false;\n    @Input() isCircle: boolean = false;\n    @Input() label: string = '';\n    @Input() secondary: boolean = false;\n    @Input() status:\n        | 'neutral'\n        | 'informative'\n        | 'success'\n        | 'warning'\n        | 'error'\n        | 'new' = 'neutral';\n\n    getColor() {\n        return `--${this.color}`;\n    }\n\n    getStatus() {\n        return `--${this.status}`;\n    }\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSButtonComponent",
            "id": "component-QDSButtonComponent-50d7846890bd106f8b139ebc8b5ba8fecaa468bdaaa7865434776fcbe94540ed8338624bedb4acfdb0b91f6bd5fcf31b137aaff6cbd9f2f08db1b8e0ac0f8b1f",
            "file": "src/stories/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-button",
            "styleUrls": [],
            "styles": [],
            "template": "<button\n    [ngClass]=\"getButtonClasses()\"\n    [attr.aria-label]=\"label\"\n    (click)=\"onClick($event)\"\n    type=\"button\"\n>\n    <ng-container *ngIf=\"isSave; else normalButton\">\n        <div\n            class=\"step1\"\n            *ngIf=\"\n                buttonStatus !== 'saving' && buttonStatus !== 'saved'\n            \"\n        >\n            <span>Save</span>\n        </div>\n        <div class=\"step2\" *ngIf=\"buttonStatus === 'saving'\">\n            <div\n                class=\"ds-loading --small ds-mr-4\"\n                role=\"progressbar\"\n                aria-label=\"Saving\"\n            >\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n            </div>\n            <span>Saving</span>\n        </div>\n        <div class=\"step3\" *ngIf=\"buttonStatus === 'saved'\">\n            <div class=\"checkmark animate\"></div>\n            <span>Saved</span>\n        </div>\n    </ng-container>\n    <ng-template #normalButton>\n        <span *ngIf=\"icon\" class=\"ds-icon--{{ icon }}\"></span>\n        <span>{{ label }}</span>\n        <span *ngIf=\"iconRight\" class=\"ds-icon--{{ iconRight }}\"></span>\n    </ng-template>\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconRight",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isDestructive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isInverse",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSave",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'lg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "\"sm\" | \"lg\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "\"primary\" | \"secondary\" | \"ghost\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clickHandler",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "buttonStatus",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "timeoutId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getButtonClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "{ [x: string]: boolean; 'ds-button': boolean; '--primary': boolean; '--destructive': boolean; '--disabled': boolean; '--inverse': boolean; '--save': boolean; '--saving': boolean; '--saved': boolean; }",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateButtonStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'qds-button',\n    template: `\n        <button\n            [ngClass]=\"getButtonClasses()\"\n            [attr.aria-label]=\"label\"\n            (click)=\"onClick($event)\"\n            type=\"button\"\n        >\n            <ng-container *ngIf=\"isSave; else normalButton\">\n                <div\n                    class=\"step1\"\n                    *ngIf=\"\n                        buttonStatus !== 'saving' && buttonStatus !== 'saved'\n                    \"\n                >\n                    <span>Save</span>\n                </div>\n                <div class=\"step2\" *ngIf=\"buttonStatus === 'saving'\">\n                    <div\n                        class=\"ds-loading --small ds-mr-4\"\n                        role=\"progressbar\"\n                        aria-label=\"Saving\"\n                    >\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                    </div>\n                    <span>Saving</span>\n                </div>\n                <div class=\"step3\" *ngIf=\"buttonStatus === 'saved'\">\n                    <div class=\"checkmark animate\"></div>\n                    <span>Saved</span>\n                </div>\n            </ng-container>\n            <ng-template #normalButton>\n                <span *ngIf=\"icon\" class=\"ds-icon--{{ icon }}\"></span>\n                <span>{{ label }}</span>\n                <span *ngIf=\"iconRight\" class=\"ds-icon--{{ iconRight }}\"></span>\n            </ng-template>\n        </button>\n    `\n})\nexport class QDSButtonComponent {\n    @Input() customClasses: string = '';\n    @Input() icon: string = '';\n    @Input() iconRight: string = '';\n    @Input() isDestructive: boolean = false;\n    @Input() isDisabled: boolean = false;\n    @Input() isInverse: boolean = false;\n    @Input() isSave: boolean = false;\n    @Input() label: string = '';\n    @Input() size: 'sm' | 'lg' = 'lg';\n    @Input() type: 'primary' | 'secondary' | 'ghost' = 'primary';\n\n    @Output() clickHandler = new EventEmitter<Event>();\n\n    buttonStatus: string = '';\n    private timeoutId: any;\n\n    ngOnInit() {\n        this.updateButtonStatus();\n    }\n\n    ngOnDestroy() {\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n        }\n    }\n\n    onClick(event: Event) {\n        this.clickHandler.emit(event);\n        this.setSave();\n    }\n\n    setSave() {\n        if (this.buttonStatus === '') {\n            this.buttonStatus = 'saving';\n            this.updateButtonStatus();\n        }\n    }\n\n    updateButtonStatus() {\n        if (this.buttonStatus === 'saving') {\n            this.timeoutId = setTimeout(() => {\n                this.buttonStatus = 'saved';\n                this.updateButtonStatus();\n            }, 3000);\n        } else if (this.buttonStatus === 'saved') {\n            this.timeoutId = setTimeout(() => {\n                this.buttonStatus = '';\n            }, 1500);\n        }\n    }\n\n    getButtonClasses() {\n        return {\n            'ds-button': true,\n            [this.customClasses]: !!this.customClasses,\n            [`--${this.type}`]: !!this.type,\n            '--primary': this.type !== 'secondary' && this.type !== 'ghost',\n            [`--${this.size}`]: !!this.size,\n            '--destructive': this.isDestructive,\n            '--disabled': this.isDisabled,\n            '--inverse': this.isInverse,\n            '--save': this.isSave,\n            '--saving': this.buttonStatus === 'saving',\n            '--saved': this.buttonStatus === 'saved'\n        };\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "QDSCardComponent",
            "id": "component-QDSCardComponent-8d7c2006d7bf42d4f0689e5d87762f1bda96f7228237555d935cd19bd2c9f2d465ffa9aeab33303101949bb8f88052c0275dccd1f82f3b822c3caae7d80ea31e",
            "file": "src/stories/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-card",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"ds-card\" [class]=\"customClasses\">\n    <div class=\"ds-card__content\">\n        <h3 *ngIf=\"title\">{{ title }}</h3>\n        <ng-content></ng-content>\n    </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2\n} from '@angular/core';\n\n@Component({\n    selector: 'qds-card',\n    template: `\n        <div class=\"ds-card\" [class]=\"customClasses\">\n            <div class=\"ds-card__content\">\n                <h3 *ngIf=\"title\">{{ title }}</h3>\n                <ng-content></ng-content>\n            </div>\n        </div>\n    `\n})\nexport class QDSCardComponent implements AfterViewInit {\n    @Input() customClasses: string = '';\n    @Input() title: string = '';\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSCheckboxComponent",
            "id": "component-QDSCheckboxComponent-a360f4db65af6f45c4ce2c7d0c5c229f556889b83019fdc859f7da5aee8e79766ea1a17e25e271f1af7e4297248ac48162156eb09342ad35e353fd1c88f4059b",
            "file": "src/stories/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-checkbox",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-checkbox\n    class=\"ds-input__checkbox\"\n    [class]=\"customClasses\"\n    [class.mat-mdc-checkbox-checked]=\"isChecked\"\n    [class.mdc-checkbox--disabled]=\"\n        formControlId?.disabled || isDisabled\n    \"\n    [class.--required]=\"isRequired\"\n    [class.mat-checkbox-indeterminate]=\"isIndeterminate\"\n    [id]=\"inputId\"\n    [name]=\"name\"\n>\n    {{ label }}\n</mat-checkbox>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isChecked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isIndeterminate",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isRequired",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2\n} from '@angular/core';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n\n@Component({\n    selector: 'qds-checkbox',\n    standalone: true,\n    imports: [MatCheckboxModule],\n    template: `\n        <mat-checkbox\n            class=\"ds-input__checkbox\"\n            [class]=\"customClasses\"\n            [class.mat-mdc-checkbox-checked]=\"isChecked\"\n            [class.mdc-checkbox--disabled]=\"\n                formControlId?.disabled || isDisabled\n            \"\n            [class.--required]=\"isRequired\"\n            [class.mat-checkbox-indeterminate]=\"isIndeterminate\"\n            [id]=\"inputId\"\n            [name]=\"name\"\n        >\n            {{ label }}\n        </mat-checkbox>\n    `\n})\nexport class QDSCheckboxComponent implements AfterViewInit {\n    @Input() customClasses: string = '';\n    @Input() inputId: string = '';\n    @Input() isChecked: boolean = false;\n    @Input() isDisabled: boolean = false;\n    @Input() isRequired: boolean = false;\n    @Input() isIndeterminate: boolean = false;\n    @Input() label: string = '';\n    @Input() name: string = '';\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSContextualMenuComponent",
            "id": "component-QDSContextualMenuComponent-3530c9cbdb13d5b6e041b6dc0f7f893dc1ab70053629562d67d6d339c7b4dd970cc0dc100820d0d3fcb123ae1d37dd5c5c99b86e4cfacdd9598cd5b43b05d84b",
            "file": "src/stories/contextual-menu/contextual-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-contextual-menu",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-menu\n    class=\"ds-menu\"\n    [class]=\"menuClass\"\n    #menu=\"matMenu\"\n    [xPosition]=\"menuRight ? 'before' : 'after'\"\n>\n    <button\n        mat-menu-item\n        class=\"ds-menu__item\"\n        (click)=\"handleItemClick(item)\"\n        *ngFor=\"let item of menuItems\"\n    >\n        <span *ngIf=\"item.icon\" class=\"ds-icon--{{ item.icon }}\"></span>\n        {{ item.label }}\n    </button>\n</mat-menu>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "menuClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "menuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "menuRight",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatMenu",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'menu', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "MatMenu",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleItemClick",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatMenu"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2,\n    ViewChild\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatMenu } from '@angular/material/menu';\n\n@Component({\n    selector: 'qds-contextual-menu',\n    standalone: true,\n    imports: [CommonModule, MatMenu],\n    template: `\n        <mat-menu\n            class=\"ds-menu\"\n            [class]=\"menuClass\"\n            #menu=\"matMenu\"\n            [xPosition]=\"menuRight ? 'before' : 'after'\"\n        >\n            <button\n                mat-menu-item\n                class=\"ds-menu__item\"\n                (click)=\"handleItemClick(item)\"\n                *ngFor=\"let item of menuItems\"\n            >\n                <span *ngIf=\"item.icon\" class=\"ds-icon--{{ item.icon }}\"></span>\n                {{ item.label }}\n            </button>\n        </mat-menu>\n    `\n})\nexport class QDSContextualMenuComponent implements AfterViewInit {\n    @Input() menuItems: any[] = [];\n    @Input() menuRight: boolean = false;\n    @Input() menuClass: string = '';\n\n    @ViewChild('menu', { static: true }) menu!: MatMenu;\n\n    getMenu() {\n        return this.menu;\n    }\n\n    handleItemClick(item: any): void {\n        if (item.action) {\n            item.action(() => {});\n        }\n    }\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSDatepickerComponent",
            "id": "component-QDSDatepickerComponent-450551d0590b6cbcfe2baa1c8ef17cef94007fb26e983c07b8dfa40a030a887ef3ce6e4932b50ecce5ca5d851ae1912d15aeeb995a18e9d2de25e68cc5366436",
            "file": "src/stories/datepicker/datepicker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-datepicker",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"isRange; else singleDate\">\n    <mat-form-field\n        class=\"ds-input\"\n        [class]=\"customClasses\"\n        [class.--error]=\"hasError\"\n        [class.mat-form-field-invalid]=\"hasError\"\n        [class.--required]=\"isRequired\"\n        [class.mat-form-field-disabled]=\"isDisabled\"\n    >\n        <mat-label *ngIf=\"label\" class=\"ds-input__label\">\n            <span>{{ label }}</span>\n        </mat-label>\n\n        <mat-date-range-input\n            [rangePicker]=\"pickerRange\"\n            [min]=\"minDate ? minDate : ''\"\n            [max]=\"maxDate ? maxDate : ''\"\n        >\n            <input\n                matStartDate\n                [id]=\"inputId\"\n                placeholder=\"{{ placeholder }}\"\n            />\n            <input\n                matEndDate\n                [id]=\"endInputId\"\n                placeholder=\"{{ placeholder }}\"\n            />\n        </mat-date-range-input>\n\n        <mat-datepicker-toggle\n            matSuffix\n            [for]=\"pickerRange\"\n        ></mat-datepicker-toggle>\n        <mat-date-range-picker\n            [panelClass]=\"panelClasses\"\n            #pickerRange\n        ></mat-date-range-picker>\n\n        <div *ngIf=\"hintMessage\" class=\"ds-input__hint\">\n            {{ hintMessage }}\n        </div>\n\n        <div *ngIf=\"errorMessage\" class=\"ds-input__error\">\n            {{ errorMessage }}\n        </div>\n    </mat-form-field>\n</ng-container>\n<ng-template #singleDate>\n    <mat-form-field\n        class=\"ds-input\"\n        [class]=\"customClasses\"\n        [class.--error]=\"hasError\"\n        [class.mat-form-field-invalid]=\"hasError\"\n        [class.--disabled]=\"isDisabled\"\n        [class.--required]=\"isRequired\"\n    >\n        <mat-label *ngIf=\"label\" class=\"ds-input__label\">\n            <span>{{ label }}</span>\n        </mat-label>\n\n        <ng-container *ngIf=\"isSimple; else datepicker\">\n            <input\n                matInput\n                placeholder=\"{{ placeholder }}\"\n                value=\"\"\n                [id]=\"inputId\"\n                type=\"date\"\n                [min]=\"minDate ? minDate : ''\"\n                [max]=\"maxDate ? maxDate : ''\"\n            />\n        </ng-container>\n        <ng-template #datepicker>\n            <input\n                matInput\n                placeholder=\"{{ placeholder }}\"\n                value=\"\"\n                [id]=\"inputId\"\n                [matDatepicker]=\"picker\"\n                [min]=\"minDate ? minDate : ''\"\n                [max]=\"maxDate ? maxDate : ''\"\n            />\n        </ng-template>\n\n        <mat-datepicker-toggle\n            *ngIf=\"!isSimple\"\n            matSuffix\n            [for]=\"picker\"\n        ></mat-datepicker-toggle>\n\n        <mat-datepicker\n            [panelClass]=\"panelClasses\"\n            #picker\n        ></mat-datepicker>\n\n        <div *ngIf=\"hintMessage\" class=\"ds-input__hint\">\n            {{ hintMessage }}\n        </div>\n\n        <div *ngIf=\"errorMessage\" class=\"ds-input__error\">\n            {{ errorMessage }}\n        </div>\n    </mat-form-field>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 134,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "endInputId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 140,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 137,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formControlEndId",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 136,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "formControlId",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 135,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "hasError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 141,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hintMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 138,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 139,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 142,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isRange",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 143,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isRequired",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 144,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSimple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 145,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 146,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "maxDate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 147,
                    "type": "Date | null",
                    "decorators": []
                },
                {
                    "name": "minDate",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 148,
                    "type": "Date | null",
                    "decorators": []
                },
                {
                    "name": "panelClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 149,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 150,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "getSelection",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 152,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectionChange",
                    "args": [
                        {
                            "name": "selection",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selection",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatNativeDateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    Renderer2\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatNativeDateModule } from '@angular/material/core';\n\n@Component({\n    selector: 'qds-datepicker',\n    imports: [\n        CommonModule,\n        MatDatepickerModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatNativeDateModule\n    ],\n    template: `\n        <ng-container *ngIf=\"isRange; else singleDate\">\n            <mat-form-field\n                class=\"ds-input\"\n                [class]=\"customClasses\"\n                [class.--error]=\"hasError\"\n                [class.mat-form-field-invalid]=\"hasError\"\n                [class.--required]=\"isRequired\"\n                [class.mat-form-field-disabled]=\"isDisabled\"\n            >\n                <mat-label *ngIf=\"label\" class=\"ds-input__label\">\n                    <span>{{ label }}</span>\n                </mat-label>\n\n                <mat-date-range-input\n                    [rangePicker]=\"pickerRange\"\n                    [min]=\"minDate ? minDate : ''\"\n                    [max]=\"maxDate ? maxDate : ''\"\n                >\n                    <input\n                        matStartDate\n                        [id]=\"inputId\"\n                        placeholder=\"{{ placeholder }}\"\n                    />\n                    <input\n                        matEndDate\n                        [id]=\"endInputId\"\n                        placeholder=\"{{ placeholder }}\"\n                    />\n                </mat-date-range-input>\n\n                <mat-datepicker-toggle\n                    matSuffix\n                    [for]=\"pickerRange\"\n                ></mat-datepicker-toggle>\n                <mat-date-range-picker\n                    [panelClass]=\"panelClasses\"\n                    #pickerRange\n                ></mat-date-range-picker>\n\n                <div *ngIf=\"hintMessage\" class=\"ds-input__hint\">\n                    {{ hintMessage }}\n                </div>\n\n                <div *ngIf=\"errorMessage\" class=\"ds-input__error\">\n                    {{ errorMessage }}\n                </div>\n            </mat-form-field>\n        </ng-container>\n        <ng-template #singleDate>\n            <mat-form-field\n                class=\"ds-input\"\n                [class]=\"customClasses\"\n                [class.--error]=\"hasError\"\n                [class.mat-form-field-invalid]=\"hasError\"\n                [class.--disabled]=\"isDisabled\"\n                [class.--required]=\"isRequired\"\n            >\n                <mat-label *ngIf=\"label\" class=\"ds-input__label\">\n                    <span>{{ label }}</span>\n                </mat-label>\n\n                <ng-container *ngIf=\"isSimple; else datepicker\">\n                    <input\n                        matInput\n                        placeholder=\"{{ placeholder }}\"\n                        value=\"\"\n                        [id]=\"inputId\"\n                        type=\"date\"\n                        [min]=\"minDate ? minDate : ''\"\n                        [max]=\"maxDate ? maxDate : ''\"\n                    />\n                </ng-container>\n                <ng-template #datepicker>\n                    <input\n                        matInput\n                        placeholder=\"{{ placeholder }}\"\n                        value=\"\"\n                        [id]=\"inputId\"\n                        [matDatepicker]=\"picker\"\n                        [min]=\"minDate ? minDate : ''\"\n                        [max]=\"maxDate ? maxDate : ''\"\n                    />\n                </ng-template>\n\n                <mat-datepicker-toggle\n                    *ngIf=\"!isSimple\"\n                    matSuffix\n                    [for]=\"picker\"\n                ></mat-datepicker-toggle>\n\n                <mat-datepicker\n                    [panelClass]=\"panelClasses\"\n                    #picker\n                ></mat-datepicker>\n\n                <div *ngIf=\"hintMessage\" class=\"ds-input__hint\">\n                    {{ hintMessage }}\n                </div>\n\n                <div *ngIf=\"errorMessage\" class=\"ds-input__error\">\n                    {{ errorMessage }}\n                </div>\n            </mat-form-field>\n        </ng-template>\n    `\n})\nexport class QDSDatepickerComponent implements AfterViewInit {\n    @Input() customClasses: string = '';\n    @Input() formControlId: FormControl = new FormControl();\n    @Input() formControlEndId: FormControl = new FormControl();\n    @Input() errorMessage: string = '';\n    @Input() hintMessage: string = '';\n    @Input() inputId: string = '';\n    @Input() endInputId: string = '';\n    @Input() hasError: boolean = false;\n    @Input() isDisabled: boolean = false;\n    @Input() isRange: boolean = false;\n    @Input() isRequired: boolean = false;\n    @Input() isSimple: boolean = false;\n    @Input() label: string = '';\n    @Input() maxDate: Date | null = null;\n    @Input() minDate: Date | null = null;\n    @Input() panelClasses: string = '';\n    @Input() placeholder: string = '';\n\n    @Output() getSelection = new EventEmitter<any>();\n\n    onSelectionChange(selection: any) {\n        this.getSelection.emit(selection);\n    }\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 156,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSDividerComponent",
            "id": "component-QDSDividerComponent-93262552f9818b99783a90e611a4bed25d4931c6a53c8be8d63fa029720f2211b3e206798b97fd461f478994502f32db23c66c2e820728a1718e5ad215f3f0df",
            "file": "src/stories/divider/divider.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-divider",
            "styleUrls": [],
            "styles": [],
            "template": "<hr [class]=\"customClasses\" [ngClass]=\"getColor()\" />",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getColor",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2\n} from '@angular/core';\n\n@Component({\n    selector: 'qds-divider',\n    template: ` <hr [class]=\"customClasses\" [ngClass]=\"getColor()\" /> `\n})\nexport class QDSDividerComponent implements AfterViewInit {\n    @Input() customClasses: string = '';\n    @Input() color: string = '';\n\n    getColor() {\n        return this.color ? `ds-${this.color}--bg` : '';\n    }\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSFooterComponent",
            "id": "component-QDSFooterComponent-9fb5ac4717f7f239ba9bcdf92c1e62542b8f161629fb17e5d06f553fbef339bfb88322acf70b3260fe82bf22ea84c29d2cf77c5304c5d0b67d7863fe22390045",
            "file": "src/stories/navigation/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-footer",
            "styleUrls": [],
            "styles": [],
            "template": "<footer>\n    <div\n        class=\"ds-footer ds-grid\"\n        [class]=\"customClasses\"\n        [class.--light]=\"hideNav\"\n        [class.--margins]=\"!noMargins\"\n        [class.--max-width]=\"!noMaxWidth\"\n    >\n        <div class=\"ds-footer__wrapper\">\n            <div *ngIf=\"!hideLogo\" class=\"ds-brand-wrapper --small\">\n                <img\n                    src=\"https://ds.cdn.questdiagnostics.com/assets/img/qd-brand--stacked--white.svg\"\n                />\n            </div>\n\n            <div class=\"ds-footer__content\">\n                <div *ngIf=\"!hideNav\" class=\"ds-footer__company\">\n                    <div class=\"ds-footer__company-links\">\n                        <button\n                            class=\"ds-footer__link-title\"\n                            [class.--opened]=\"showFooterLinks\"\n                            (click)=\"showFooterLinks = !showFooterLinks\"\n                        >\n                            <span class=\"--plus\"></span>\n                            Our company\n                        </button>\n\n                        <ul>\n                            <li>\n                                <a\n                                    class=\"ds-link\"\n                                    href=\"https://www.questdiagnostics.com/our-company/about-us\"\n                                    >About us</a\n                                >\n                            </li>\n                            <li>\n                                <a\n                                    class=\"ds-link\"\n                                    href=\"https://www.questdiagnostics.com/our-company/how-we-operate\"\n                                    >How we operate</a\n                                >\n                            </li>\n                            <li>\n                                <a\n                                    class=\"ds-link\"\n                                    href=\"https://www.questdiagnostics.com/our-company/what-we-do\"\n                                    >What we do</a\n                                >\n                            </li>\n                            <li>\n                                <a\n                                    class=\"ds-link\"\n                                    href=\"https://www.questdiagnostics.com/our-company/corporate-responsibility\"\n                                    >Corporate responsibility</a\n                                >\n                            </li>\n                            <li>\n                                <a\n                                    class=\"ds-link\"\n                                    href=\"https://www.questdiagnostics.com/our-company/inclusion-diversity\"\n                                    >Inclusion and diversity</a\n                                >\n                            </li>\n                            <li>\n                                <a\n                                    class=\"ds-link\"\n                                    href=\"https://www.questdiagnostics.com/our-company/actions-insights\"\n                                    >Actions and insights</a\n                                >\n                            </li>\n                            <li>\n                                <a\n                                    class=\"ds-link\"\n                                    href=\"https://www.questdiagnostics.com/our-company/suppliers-partners\"\n                                    >Suppliers</a\n                                >\n                            </li>\n                            <li>\n                                <a\n                                    class=\"ds-link\"\n                                    href=\"https://www.questhealth.com/?itm_campaign=QD-Bottom-Nav-ShopallHP\"\n                                    >Shop tests</a\n                                >\n                            </li>\n                        </ul>\n                    </div>\n\n                    <div class=\"ds-footer__company-options\">\n                        <a\n                            class=\"ds-button --inverse --small\"\n                            aria-label=\"Locations\"\n                            href=\"https://www.questdiagnostics.com/home/about/locations/\"\n                        >\n                            <label>Locations</label>\n                        </a>\n                        <a\n                            class=\"ds-button --inverse --small\"\n                            aria-label=\"Career\"\n                            href=\"https://careers.questdiagnostics.com/\"\n                        >\n                            <label>Careers</label>\n                        </a>\n                        <a\n                            class=\"ds-button --inverse --small\"\n                            aria-label=\"Investors\"\n                            href=\"https://ir.questdiagnostics.com/overview/default.aspx\"\n                        >\n                            <label>Investors</label>\n                        </a>\n                        <a\n                            class=\"ds-button --inverse --small\"\n                            aria-label=\"Specilaty labs\"\n                            href=\"https://www.questdiagnostics.com/our-company/specialty-labs\"\n                        >\n                            <label>Specialty labs</label>\n                        </a>\n                        <a\n                            class=\"ds-button --inverse --small\"\n                            aria-label=\"Newsroom\"\n                            href=\"https://newsroom.questdiagnostics.com/\"\n                        >\n                            <label>Newsroom</label>\n                        </a>\n\n                        <div class=\"ds-footer__social\">\n                            <div class=\"ds-footer__social-title\">\n                                Connect with us\n                            </div>\n\n                            <a\n                                class=\"ds-footer__social-link\"\n                                href=\"https://www.questdiagnostics.com/social-media\"\n                            >\n                                <span\n                                    class=\"ds-icon--facebook-logo-fill\"\n                                    aria-label=\"facebook\"\n                                ></span>\n                            </a>\n                            <a\n                                class=\"ds-footer__social-link\"\n                                href=\"https://www.questdiagnostics.com/social-media\"\n                            >\n                                <span\n                                    class=\"ds-icon--twitter-logo-fill\"\n                                    aria-label=\"twitter\"\n                                ></span>\n                            </a>\n                            <a\n                                class=\"ds-footer__social-link\"\n                                href=\"https://www.questdiagnostics.com/social-media\"\n                            >\n                                <span\n                                    class=\"ds-icon--youtube-logo-fill\"\n                                    aria-label=\"youtube\"\n                                ></span>\n                            </a>\n                            <a\n                                class=\"ds-footer__social-link\"\n                                href=\"https://www.questdiagnostics.com/social-media\"\n                            >\n                                <span\n                                    class=\"ds-icon--linkedin-logo-fill\"\n                                    aria-label=\"linkedin\"\n                                ></span>\n                            </a>\n                            <a\n                                class=\"ds-footer__social-link\"\n                                href=\"https://www.questdiagnostics.com/social-media\"\n                            >\n                                <span\n                                    class=\"ds-icon--instagram-logo\"\n                                    aria-label=\"instagram\"\n                                ></span>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"ds-footer__legal\">\n                    <ul class=\"ds-col-12 ds-flex --row --wrap\">\n                        <li>\n                            <a\n                                class=\"ds-link\"\n                                href=\"https://www.questdiagnostics.com/site-map\"\n                                >Site map</a\n                            >\n                        </li>\n                        <li>\n                            <a\n                                class=\"ds-link\"\n                                href=\"https://www.questdiagnostics.com/our-company/privacy\"\n                                >Privacy notices</a\n                            >\n                        </li>\n                        <li>\n                            <a\n                                class=\"ds-link\"\n                                href=\"https://www.questdiagnostics.com/our-company/terms-conditions\"\n                                >Terms</a\n                            >\n                        </li>\n                        <li>\n                            <a\n                                class=\"ds-link\"\n                                href=\"https://www.questdiagnostics.com/contact-us\"\n                                >Contact us</a\n                            >\n                        </li>\n                        <li>\n                            <a\n                                class=\"ds-link\"\n                                href=\"https://www.questdiagnostics.com/our-company/nondiscrimination\"\n                                >Language assistance /\n                                Non-discrimination</a\n                            >\n                        </li>\n                        <li>\n                            <a\n                                class=\"ds-link\"\n                                href=\"https://www.questdiagnostics.com/our-company/nondiscrimination\"\n                                >Asistencia de idiomas / Aviso de no\n                                discriminación</a\n                            >\n                        </li>\n                        <li>\n                            <a\n                                class=\"ds-link\"\n                                href=\"https://www.questdiagnostics.com/our-company/nondiscrimination\"\n                                >語言協助 / 不歧視通知</a\n                            >\n                        </li>\n                        <li>\n                            <a\n                                class=\"ds-link\"\n                                href=\"https://www.questdiagnostics.com/our-company/privacy/privacy-shield\"\n                                >Privacy shield</a\n                            >\n                        </li>\n                        <li>\n                            <a\n                                class=\"ds-link\"\n                                href=\"https://www.questdiagnostics.com/our-company/accessibility\"\n                                >Accessibility</a\n                            >\n                        </li>\n                        <li>\n                            <a class=\"ds-link --icons\" href=\"\">\n                                <img\n                                    src=\"https://ds.cdn.questdiagnostics.com/assets/img/your-privacy.svg\"\n                                    alt=\"Your Privacy Choices\"\n                                />\n                                <span>Your Privacy Choices</span>\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n\n                <div class=\"ds-footer__copyright\">\n                    Quest<sup>&reg;</sup> is the brand name used for\n                    services offered by Quest Diagnostics Incorporated\n                    and its affiliated companies. Quest Diagnostics\n                    Incorporated and certain affiliates are CLIA\n                    certified laboratories that provide HIPAA covered\n                    services.  Other affiliates operated under the\n                    Quest<sup>&reg;</sup> brand, such as Quest Consumer\n                    Inc., do not provide HIPAA covered services.<br /><br />\n\n                    Quest, Quest Diagnostics, any associated logos, and\n                    all associated Quest Diagnostics registered or\n                    unregistered trademarks are the property of Quest\n                    Diagnostics. All third party marks —\n                    <sup>&reg;</sup> and &trade; — are the property of\n                    their respective owners. &copy; {{ year }}\n                    Quest Diagnostics Incorporated. All rights reserved.\n                    Image content features models and is intended for\n                    illustrative purposes only.\n                </div>\n            </div>\n        </div>\n    </div>\n</footer>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 296,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hideLogo",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 297,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hideNav",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 298,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "noMargins",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 299,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "noMaxWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 300,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showFooterLinks",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 303
                },
                {
                    "name": "year",
                    "defaultValue": "new Date().getFullYear()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 302
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 307,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2\n} from '@angular/core';\n\n@Component({\n    selector: 'qds-footer',\n    template: `\n        <footer>\n            <div\n                class=\"ds-footer ds-grid\"\n                [class]=\"customClasses\"\n                [class.--light]=\"hideNav\"\n                [class.--margins]=\"!noMargins\"\n                [class.--max-width]=\"!noMaxWidth\"\n            >\n                <div class=\"ds-footer__wrapper\">\n                    <div *ngIf=\"!hideLogo\" class=\"ds-brand-wrapper --small\">\n                        <img\n                            src=\"https://ds.cdn.questdiagnostics.com/assets/img/qd-brand--stacked--white.svg\"\n                        />\n                    </div>\n\n                    <div class=\"ds-footer__content\">\n                        <div *ngIf=\"!hideNav\" class=\"ds-footer__company\">\n                            <div class=\"ds-footer__company-links\">\n                                <button\n                                    class=\"ds-footer__link-title\"\n                                    [class.--opened]=\"showFooterLinks\"\n                                    (click)=\"showFooterLinks = !showFooterLinks\"\n                                >\n                                    <span class=\"--plus\"></span>\n                                    Our company\n                                </button>\n\n                                <ul>\n                                    <li>\n                                        <a\n                                            class=\"ds-link\"\n                                            href=\"https://www.questdiagnostics.com/our-company/about-us\"\n                                            >About us</a\n                                        >\n                                    </li>\n                                    <li>\n                                        <a\n                                            class=\"ds-link\"\n                                            href=\"https://www.questdiagnostics.com/our-company/how-we-operate\"\n                                            >How we operate</a\n                                        >\n                                    </li>\n                                    <li>\n                                        <a\n                                            class=\"ds-link\"\n                                            href=\"https://www.questdiagnostics.com/our-company/what-we-do\"\n                                            >What we do</a\n                                        >\n                                    </li>\n                                    <li>\n                                        <a\n                                            class=\"ds-link\"\n                                            href=\"https://www.questdiagnostics.com/our-company/corporate-responsibility\"\n                                            >Corporate responsibility</a\n                                        >\n                                    </li>\n                                    <li>\n                                        <a\n                                            class=\"ds-link\"\n                                            href=\"https://www.questdiagnostics.com/our-company/inclusion-diversity\"\n                                            >Inclusion and diversity</a\n                                        >\n                                    </li>\n                                    <li>\n                                        <a\n                                            class=\"ds-link\"\n                                            href=\"https://www.questdiagnostics.com/our-company/actions-insights\"\n                                            >Actions and insights</a\n                                        >\n                                    </li>\n                                    <li>\n                                        <a\n                                            class=\"ds-link\"\n                                            href=\"https://www.questdiagnostics.com/our-company/suppliers-partners\"\n                                            >Suppliers</a\n                                        >\n                                    </li>\n                                    <li>\n                                        <a\n                                            class=\"ds-link\"\n                                            href=\"https://www.questhealth.com/?itm_campaign=QD-Bottom-Nav-ShopallHP\"\n                                            >Shop tests</a\n                                        >\n                                    </li>\n                                </ul>\n                            </div>\n\n                            <div class=\"ds-footer__company-options\">\n                                <a\n                                    class=\"ds-button --inverse --small\"\n                                    aria-label=\"Locations\"\n                                    href=\"https://www.questdiagnostics.com/home/about/locations/\"\n                                >\n                                    <label>Locations</label>\n                                </a>\n                                <a\n                                    class=\"ds-button --inverse --small\"\n                                    aria-label=\"Career\"\n                                    href=\"https://careers.questdiagnostics.com/\"\n                                >\n                                    <label>Careers</label>\n                                </a>\n                                <a\n                                    class=\"ds-button --inverse --small\"\n                                    aria-label=\"Investors\"\n                                    href=\"https://ir.questdiagnostics.com/overview/default.aspx\"\n                                >\n                                    <label>Investors</label>\n                                </a>\n                                <a\n                                    class=\"ds-button --inverse --small\"\n                                    aria-label=\"Specilaty labs\"\n                                    href=\"https://www.questdiagnostics.com/our-company/specialty-labs\"\n                                >\n                                    <label>Specialty labs</label>\n                                </a>\n                                <a\n                                    class=\"ds-button --inverse --small\"\n                                    aria-label=\"Newsroom\"\n                                    href=\"https://newsroom.questdiagnostics.com/\"\n                                >\n                                    <label>Newsroom</label>\n                                </a>\n\n                                <div class=\"ds-footer__social\">\n                                    <div class=\"ds-footer__social-title\">\n                                        Connect with us\n                                    </div>\n\n                                    <a\n                                        class=\"ds-footer__social-link\"\n                                        href=\"https://www.questdiagnostics.com/social-media\"\n                                    >\n                                        <span\n                                            class=\"ds-icon--facebook-logo-fill\"\n                                            aria-label=\"facebook\"\n                                        ></span>\n                                    </a>\n                                    <a\n                                        class=\"ds-footer__social-link\"\n                                        href=\"https://www.questdiagnostics.com/social-media\"\n                                    >\n                                        <span\n                                            class=\"ds-icon--twitter-logo-fill\"\n                                            aria-label=\"twitter\"\n                                        ></span>\n                                    </a>\n                                    <a\n                                        class=\"ds-footer__social-link\"\n                                        href=\"https://www.questdiagnostics.com/social-media\"\n                                    >\n                                        <span\n                                            class=\"ds-icon--youtube-logo-fill\"\n                                            aria-label=\"youtube\"\n                                        ></span>\n                                    </a>\n                                    <a\n                                        class=\"ds-footer__social-link\"\n                                        href=\"https://www.questdiagnostics.com/social-media\"\n                                    >\n                                        <span\n                                            class=\"ds-icon--linkedin-logo-fill\"\n                                            aria-label=\"linkedin\"\n                                        ></span>\n                                    </a>\n                                    <a\n                                        class=\"ds-footer__social-link\"\n                                        href=\"https://www.questdiagnostics.com/social-media\"\n                                    >\n                                        <span\n                                            class=\"ds-icon--instagram-logo\"\n                                            aria-label=\"instagram\"\n                                        ></span>\n                                    </a>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"ds-footer__legal\">\n                            <ul class=\"ds-col-12 ds-flex --row --wrap\">\n                                <li>\n                                    <a\n                                        class=\"ds-link\"\n                                        href=\"https://www.questdiagnostics.com/site-map\"\n                                        >Site map</a\n                                    >\n                                </li>\n                                <li>\n                                    <a\n                                        class=\"ds-link\"\n                                        href=\"https://www.questdiagnostics.com/our-company/privacy\"\n                                        >Privacy notices</a\n                                    >\n                                </li>\n                                <li>\n                                    <a\n                                        class=\"ds-link\"\n                                        href=\"https://www.questdiagnostics.com/our-company/terms-conditions\"\n                                        >Terms</a\n                                    >\n                                </li>\n                                <li>\n                                    <a\n                                        class=\"ds-link\"\n                                        href=\"https://www.questdiagnostics.com/contact-us\"\n                                        >Contact us</a\n                                    >\n                                </li>\n                                <li>\n                                    <a\n                                        class=\"ds-link\"\n                                        href=\"https://www.questdiagnostics.com/our-company/nondiscrimination\"\n                                        >Language assistance /\n                                        Non-discrimination</a\n                                    >\n                                </li>\n                                <li>\n                                    <a\n                                        class=\"ds-link\"\n                                        href=\"https://www.questdiagnostics.com/our-company/nondiscrimination\"\n                                        >Asistencia de idiomas / Aviso de no\n                                        discriminación</a\n                                    >\n                                </li>\n                                <li>\n                                    <a\n                                        class=\"ds-link\"\n                                        href=\"https://www.questdiagnostics.com/our-company/nondiscrimination\"\n                                        >語言協助 / 不歧視通知</a\n                                    >\n                                </li>\n                                <li>\n                                    <a\n                                        class=\"ds-link\"\n                                        href=\"https://www.questdiagnostics.com/our-company/privacy/privacy-shield\"\n                                        >Privacy shield</a\n                                    >\n                                </li>\n                                <li>\n                                    <a\n                                        class=\"ds-link\"\n                                        href=\"https://www.questdiagnostics.com/our-company/accessibility\"\n                                        >Accessibility</a\n                                    >\n                                </li>\n                                <li>\n                                    <a class=\"ds-link --icons\" href=\"\">\n                                        <img\n                                            src=\"https://ds.cdn.questdiagnostics.com/assets/img/your-privacy.svg\"\n                                            alt=\"Your Privacy Choices\"\n                                        />\n                                        <span>Your Privacy Choices</span>\n                                    </a>\n                                </li>\n                            </ul>\n                        </div>\n\n                        <div class=\"ds-footer__copyright\">\n                            Quest<sup>&reg;</sup> is the brand name used for\n                            services offered by Quest Diagnostics Incorporated\n                            and its affiliated companies. Quest Diagnostics\n                            Incorporated and certain affiliates are CLIA\n                            certified laboratories that provide HIPAA covered\n                            services.  Other affiliates operated under the\n                            Quest<sup>&reg;</sup> brand, such as Quest Consumer\n                            Inc., do not provide HIPAA covered services.<br /><br />\n\n                            Quest, Quest Diagnostics, any associated logos, and\n                            all associated Quest Diagnostics registered or\n                            unregistered trademarks are the property of Quest\n                            Diagnostics. All third party marks —\n                            <sup>&reg;</sup> and &trade; — are the property of\n                            their respective owners. &copy; {{ year }}\n                            Quest Diagnostics Incorporated. All rights reserved.\n                            Image content features models and is intended for\n                            illustrative purposes only.\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </footer>\n    `\n})\nexport class QDSFooterComponent implements AfterViewInit {\n    @Input() customClasses: string = '';\n    @Input() hideLogo: boolean = false;\n    @Input() hideNav: boolean = false;\n    @Input() noMargins: boolean = false;\n    @Input() noMaxWidth: boolean = false;\n\n    year: number = new Date().getFullYear();\n    showFooterLinks = false;\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 303,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSHeaderComponent",
            "id": "component-QDSHeaderComponent-69fc5fde084ebd25b88ab78fabc63148275bc8b79ab37acaa0123d479cabe5cdc46f81735bb4f5771c38a5d7c0ed781f17ebda4f416e35fdc3a9ddf78cbad656",
            "file": "src/stories/navigation/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-header",
            "styleUrls": [],
            "styles": [],
            "template": "<header class=\"ds-header\" [class]=\"customClasses\">\n    <div\n        class=\"ds-grid\"\n        [class.--margins]=\"!noMargins\"\n        [class.--max-width]=\"!noMaxWidth\"\n    >\n        <a class=\"ds-brand-wrapper --{{ logoSize }}\" href=\"/\">\n            <img src=\"{{ logo }}\" alt=\"logo\" />\n        </a>\n\n        <nav class=\"ds-header__nav\">\n            <div class=\"ds-header__nav-item-wrapper\">\n                <ng-container *ngIf=\"navData && navData.length > 0\">\n                    <div\n                        *ngFor=\"let navItem of navData; let idx = index\"\n                        class=\"ds-header__nav-item\"\n                        [ngClass]=\"{ '--active': menuOpen === idx }\"\n                    >\n                        <button\n                            (click)=\"\n                                navItem.route\n                                    ? navigateTo(navItem.route)\n                                    : toggleMenu(idx)\n                            \"\n                        >\n                            <span\n                                *ngIf=\"navItem.icon\"\n                                class=\"ds-icon--{{ navItem.icon }}\"\n                            ></span>\n                            {{ navItem.label }}\n\n                            <span\n                                *ngIf=\"navItem.subNav\"\n                                class=\"ds-icon--caret-down\"\n                            ></span>\n                        </button>\n\n                        <div\n                            *ngIf=\"menuOpen === idx && navItem.subNav\"\n                            class=\"ds-header__dropdown\"\n                        >\n                            <button\n                                *ngFor=\"\n                                    let subNavItem of navItem.subNav;\n                                    let subIdx = index\n                                \"\n                                class=\"ds-header__dropdown-item\"\n                                (click)=\"\n                                    subNavItem.route\n                                        ? navigateTo(subNavItem.route)\n                                        : (menuOpen = null)\n                                \"\n                            >\n                                <span\n                                    *ngIf=\"subNavItem.icon\"\n                                    class=\"ds-icon--{{\n                                        subNavItem.icon\n                                    }}\"\n                                ></span>\n                                {{ subNavItem.label }}\n                            </button>\n                        </div>\n                    </div>\n                </ng-container>\n\n                <div\n                    *ngIf=\"\n                        userNotifications &&\n                        userNotifications.length > 0\n                    \"\n                    class=\"ds-header__nav-item\"\n                    [ngClass]=\"{ '--active': notificationsOpen }\"\n                >\n                    <button (click)=\"toggleNotifications()\">\n                        <span class=\"ds-icon--bell\"></span>\n                        Notifications\n                        <span class=\"ds-icon--caret-down\"></span>\n                    </button>\n\n                    <div\n                        *ngIf=\"notificationsOpen\"\n                        class=\"ds-header__dropdown --notifications\"\n                    >\n                        <h4 *ngIf=\"notificationsTitle\">\n                            {{ notificationsTitle }}\n                        </h4>\n\n                        <div\n                            *ngFor=\"\n                                let notification of userNotifications;\n                                let idx = index\n                            \"\n                            class=\"ds-header__dropdown-item\"\n                        >\n                            <span class=\"ds-icon--bell\"></span>\n\n                            <div\n                                class=\"ds-header__notification-content\"\n                            >\n                                <b>{{ notification.title }}</b>\n                                <p>\n                                    {{ notification.message }}\n                                </p>\n                            </div>\n\n                            <button\n                                class=\"ds-button --icon --sm\"\n                                (click)=\"\n                                    onRemoveNotification(idx, $event)\n                                \"\n                            >\n                                <span class=\"ds-icon--close\"></span>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <button\n                *ngIf=\"button\"\n                class=\"ds-button --primary --sm\"\n                [disabled]=\"button.isDisabled\"\n                (click)=\"button.clickHandler?.()\"\n            >\n                <span\n                    *ngIf=\"button.icon\"\n                    class=\"ds-icon--{{ button.icon }}\"\n                ></span>\n                <span>{{ button.label }}</span>\n                <span\n                    *ngIf=\"button.iconRight\"\n                    class=\"ds-icon--{{ button.iconRight }}\"\n                ></span>\n            </button>\n\n            <div\n                *ngIf=\"userInitial\"\n                class=\"ds-header__account\"\n                [ngClass]=\"{ '--opened': userMenuOpen }\"\n            >\n                <button\n                    class=\"ds-header__account-trigger\"\n                    aria-label=\"account menu\"\n                    (click)=\"toggleUserMenu()\"\n                >\n                    <div class=\"ds-avatar --solid --medium\">\n                        {{ userInitial }}\n                    </div>\n\n                    <div\n                        *ngIf=\"userName\"\n                        class=\"ds-header__account-name\"\n                    >\n                        {{ userName }}\n                    </div>\n\n                    <span class=\"ds-icon--caret-down\"></span>\n                </button>\n\n                <div\n                    *ngIf=\"userMenuOpen && userMenuContent\"\n                    class=\"ds-header__dropdown\"\n                >\n                    <ng-container\n                        *ngTemplateOutlet=\"userMenuContent\"\n                    ></ng-container>\n                </div>\n            </div>\n        </nav>\n    </div>\n\n    <nav\n        *ngIf=\"subNavData && subNavData.length > 0\"\n        class=\"ds-header__subnav\"\n    >\n        <div\n            class=\"ds-grid\"\n            [class.--margins]=\"!noMargins\"\n            [class.--max-width]=\"!noMaxWidth\"\n        >\n            <div\n                *ngFor=\"let subNavItem of subNavData; let idx = index\"\n                class=\"ds-header__subnav-item\"\n                [ngClass]=\"{ '--active': subMenuOpen === idx }\"\n            >\n                <button\n                    (click)=\"\n                        subNavItem.route\n                            ? navigateTo(subNavItem.route)\n                            : toggleSubMenu(idx)\n                    \"\n                >\n                    <span\n                        *ngIf=\"subNavItem.icon\"\n                        class=\"ds-icon--{{ subNavItem.icon }}\"\n                    ></span>\n                    {{ subNavItem.label }}\n                    <span\n                        *ngIf=\"subNavItem.subNav\"\n                        class=\"ds-icon--caret-down\"\n                    ></span>\n                </button>\n\n                <div\n                    *ngIf=\"subMenuOpen === idx && subNavItem.subNav\"\n                    class=\"ds-header__dropdown\"\n                >\n                    <button\n                        *ngFor=\"let subSubNavItem of subNavItem.subNav\"\n                        class=\"ds-header__dropdown-item\"\n                        (click)=\"navigateTo(subSubNavItem.route)\"\n                    >\n                        <span\n                            *ngIf=\"subSubNavItem.icon\"\n                            class=\"ds-icon--{{ subSubNavItem.icon }}\"\n                        ></span>\n                        {{ subSubNavItem.label }}\n                    </button>\n                </div>\n            </div>\n        </div>\n    </nav>\n</header>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 244,
                    "type": "literal type",
                    "decorators": []
                },
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 251,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "logo",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 252,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "logoSize",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 253,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "navData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 254,
                    "type": "Array<literal type>",
                    "decorators": []
                },
                {
                    "name": "noMargins",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 260,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "noMaxWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 261,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "notificationsTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 262,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "subNavData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 263,
                    "type": "Array<literal type>",
                    "decorators": []
                },
                {
                    "name": "userInitial",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 269,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "userMenuContent",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 270,
                    "type": "TemplateRef<any> | null",
                    "decorators": []
                },
                {
                    "name": "userName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 271,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "userNotifications",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 272,
                    "type": "Array<literal type>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "removeNotification",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 274,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "menuOpen",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 276
                },
                {
                    "name": "notificationsOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 278
                },
                {
                    "name": "subMenuOpen",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 277
                },
                {
                    "name": "userMenuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 279
                }
            ],
            "methodsClass": [
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 330,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 336,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDocumentClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 315,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRemoveNotification",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 309,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleMenu",
                    "args": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 281,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleNotifications",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 295,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleSubMenu",
                    "args": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 288,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleUserMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 302,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 315
                }
            ],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    Output,\n    Renderer2,\n    TemplateRef\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n    selector: 'qds-header',\n    imports: [CommonModule],\n    template: `\n        <header class=\"ds-header\" [class]=\"customClasses\">\n            <div\n                class=\"ds-grid\"\n                [class.--margins]=\"!noMargins\"\n                [class.--max-width]=\"!noMaxWidth\"\n            >\n                <a class=\"ds-brand-wrapper --{{ logoSize }}\" href=\"/\">\n                    <img src=\"{{ logo }}\" alt=\"logo\" />\n                </a>\n\n                <nav class=\"ds-header__nav\">\n                    <div class=\"ds-header__nav-item-wrapper\">\n                        <ng-container *ngIf=\"navData && navData.length > 0\">\n                            <div\n                                *ngFor=\"let navItem of navData; let idx = index\"\n                                class=\"ds-header__nav-item\"\n                                [ngClass]=\"{ '--active': menuOpen === idx }\"\n                            >\n                                <button\n                                    (click)=\"\n                                        navItem.route\n                                            ? navigateTo(navItem.route)\n                                            : toggleMenu(idx)\n                                    \"\n                                >\n                                    <span\n                                        *ngIf=\"navItem.icon\"\n                                        class=\"ds-icon--{{ navItem.icon }}\"\n                                    ></span>\n                                    {{ navItem.label }}\n\n                                    <span\n                                        *ngIf=\"navItem.subNav\"\n                                        class=\"ds-icon--caret-down\"\n                                    ></span>\n                                </button>\n\n                                <div\n                                    *ngIf=\"menuOpen === idx && navItem.subNav\"\n                                    class=\"ds-header__dropdown\"\n                                >\n                                    <button\n                                        *ngFor=\"\n                                            let subNavItem of navItem.subNav;\n                                            let subIdx = index\n                                        \"\n                                        class=\"ds-header__dropdown-item\"\n                                        (click)=\"\n                                            subNavItem.route\n                                                ? navigateTo(subNavItem.route)\n                                                : (menuOpen = null)\n                                        \"\n                                    >\n                                        <span\n                                            *ngIf=\"subNavItem.icon\"\n                                            class=\"ds-icon--{{\n                                                subNavItem.icon\n                                            }}\"\n                                        ></span>\n                                        {{ subNavItem.label }}\n                                    </button>\n                                </div>\n                            </div>\n                        </ng-container>\n\n                        <div\n                            *ngIf=\"\n                                userNotifications &&\n                                userNotifications.length > 0\n                            \"\n                            class=\"ds-header__nav-item\"\n                            [ngClass]=\"{ '--active': notificationsOpen }\"\n                        >\n                            <button (click)=\"toggleNotifications()\">\n                                <span class=\"ds-icon--bell\"></span>\n                                Notifications\n                                <span class=\"ds-icon--caret-down\"></span>\n                            </button>\n\n                            <div\n                                *ngIf=\"notificationsOpen\"\n                                class=\"ds-header__dropdown --notifications\"\n                            >\n                                <h4 *ngIf=\"notificationsTitle\">\n                                    {{ notificationsTitle }}\n                                </h4>\n\n                                <div\n                                    *ngFor=\"\n                                        let notification of userNotifications;\n                                        let idx = index\n                                    \"\n                                    class=\"ds-header__dropdown-item\"\n                                >\n                                    <span class=\"ds-icon--bell\"></span>\n\n                                    <div\n                                        class=\"ds-header__notification-content\"\n                                    >\n                                        <b>{{ notification.title }}</b>\n                                        <p>\n                                            {{ notification.message }}\n                                        </p>\n                                    </div>\n\n                                    <button\n                                        class=\"ds-button --icon --sm\"\n                                        (click)=\"\n                                            onRemoveNotification(idx, $event)\n                                        \"\n                                    >\n                                        <span class=\"ds-icon--close\"></span>\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <button\n                        *ngIf=\"button\"\n                        class=\"ds-button --primary --sm\"\n                        [disabled]=\"button.isDisabled\"\n                        (click)=\"button.clickHandler?.()\"\n                    >\n                        <span\n                            *ngIf=\"button.icon\"\n                            class=\"ds-icon--{{ button.icon }}\"\n                        ></span>\n                        <span>{{ button.label }}</span>\n                        <span\n                            *ngIf=\"button.iconRight\"\n                            class=\"ds-icon--{{ button.iconRight }}\"\n                        ></span>\n                    </button>\n\n                    <div\n                        *ngIf=\"userInitial\"\n                        class=\"ds-header__account\"\n                        [ngClass]=\"{ '--opened': userMenuOpen }\"\n                    >\n                        <button\n                            class=\"ds-header__account-trigger\"\n                            aria-label=\"account menu\"\n                            (click)=\"toggleUserMenu()\"\n                        >\n                            <div class=\"ds-avatar --solid --medium\">\n                                {{ userInitial }}\n                            </div>\n\n                            <div\n                                *ngIf=\"userName\"\n                                class=\"ds-header__account-name\"\n                            >\n                                {{ userName }}\n                            </div>\n\n                            <span class=\"ds-icon--caret-down\"></span>\n                        </button>\n\n                        <div\n                            *ngIf=\"userMenuOpen && userMenuContent\"\n                            class=\"ds-header__dropdown\"\n                        >\n                            <ng-container\n                                *ngTemplateOutlet=\"userMenuContent\"\n                            ></ng-container>\n                        </div>\n                    </div>\n                </nav>\n            </div>\n\n            <nav\n                *ngIf=\"subNavData && subNavData.length > 0\"\n                class=\"ds-header__subnav\"\n            >\n                <div\n                    class=\"ds-grid\"\n                    [class.--margins]=\"!noMargins\"\n                    [class.--max-width]=\"!noMaxWidth\"\n                >\n                    <div\n                        *ngFor=\"let subNavItem of subNavData; let idx = index\"\n                        class=\"ds-header__subnav-item\"\n                        [ngClass]=\"{ '--active': subMenuOpen === idx }\"\n                    >\n                        <button\n                            (click)=\"\n                                subNavItem.route\n                                    ? navigateTo(subNavItem.route)\n                                    : toggleSubMenu(idx)\n                            \"\n                        >\n                            <span\n                                *ngIf=\"subNavItem.icon\"\n                                class=\"ds-icon--{{ subNavItem.icon }}\"\n                            ></span>\n                            {{ subNavItem.label }}\n                            <span\n                                *ngIf=\"subNavItem.subNav\"\n                                class=\"ds-icon--caret-down\"\n                            ></span>\n                        </button>\n\n                        <div\n                            *ngIf=\"subMenuOpen === idx && subNavItem.subNav\"\n                            class=\"ds-header__dropdown\"\n                        >\n                            <button\n                                *ngFor=\"let subSubNavItem of subNavItem.subNav\"\n                                class=\"ds-header__dropdown-item\"\n                                (click)=\"navigateTo(subSubNavItem.route)\"\n                            >\n                                <span\n                                    *ngIf=\"subSubNavItem.icon\"\n                                    class=\"ds-icon--{{ subSubNavItem.icon }}\"\n                                ></span>\n                                {{ subSubNavItem.label }}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </nav>\n        </header>\n    `\n})\nexport class QDSHeaderComponent implements AfterViewInit {\n    @Input() button?: {\n        label: string;\n        icon?: string;\n        iconRight?: string;\n        isDisabled?: boolean;\n        clickHandler?: () => void;\n    };\n    @Input() customClasses: string = '';\n    @Input() logo: string = '';\n    @Input() logoSize: string = '';\n    @Input() navData: Array<{\n        label: string;\n        route?: string;\n        icon?: string;\n        subNav?: Array<{ label: string; route: string; icon?: string }>;\n    }> = [];\n    @Input() noMargins: boolean = false;\n    @Input() noMaxWidth: boolean = false;\n    @Input() notificationsTitle: string = '';\n    @Input() subNavData: Array<{\n        label: string;\n        route?: string;\n        icon?: string;\n        subNav?: Array<{ label: string; route: string; icon?: string }>;\n    }> = [];\n    @Input() userInitial: string = '';\n    @Input() userMenuContent: TemplateRef<any> | null = null;\n    @Input() userName: string = '';\n    @Input() userNotifications: Array<{ title: string; message: string }> = [];\n\n    @Output() removeNotification = new EventEmitter<number>();\n\n    menuOpen: number | null = null;\n    subMenuOpen: number | null = null;\n    notificationsOpen: boolean = false;\n    userMenuOpen: boolean = false;\n\n    toggleMenu(idx: number): void {\n        this.notificationsOpen = false;\n        this.subMenuOpen = null;\n        this.userMenuOpen = false;\n        this.menuOpen = this.menuOpen === idx ? null : idx;\n    }\n\n    toggleSubMenu(idx: number): void {\n        this.notificationsOpen = false;\n        this.userMenuOpen = false;\n        this.menuOpen = null;\n        this.subMenuOpen = this.subMenuOpen === idx ? null : idx;\n    }\n\n    toggleNotifications(): void {\n        this.menuOpen = null;\n        this.subMenuOpen = null;\n        this.userMenuOpen = false;\n        this.notificationsOpen = !this.notificationsOpen;\n    }\n\n    toggleUserMenu(): void {\n        this.menuOpen = null;\n        this.notificationsOpen = false;\n        this.subMenuOpen = null;\n        this.userMenuOpen = !this.userMenuOpen;\n    }\n\n    onRemoveNotification(index: number, event: Event): void {\n        event.stopPropagation();\n        this.removeNotification.emit(index);\n    }\n\n    @HostListener('document:click', ['$event'])\n    onDocumentClick(event: Event): void {\n        const target = event.target as HTMLElement;\n        if (\n            !target.closest('.ds-header__nav-item') &&\n            !target.closest('.ds-header__subnav-item') &&\n            !target.closest('.ds-header__dropdown.--notifications') &&\n            !target.closest('.ds-header__account')\n        ) {\n            this.menuOpen = null;\n            this.notificationsOpen = false;\n            this.subMenuOpen = null;\n            this.userMenuOpen = false;\n        }\n    }\n\n    navigateTo(route: string): void {\n        window.location.href = route;\n    }\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 332,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSIconButtonComponent",
            "id": "component-QDSIconButtonComponent-2cb27d580f30e2b3a95ee86ba7bf25c1657a27dd4e41a75abe22bd0e59a390bdeabda7ba23f8af07c912527d66635cea5c8402aa354e102ff245281a78e5fa2a",
            "file": "src/stories/button/icon-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-icon-button",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"tooltip; else noTooltip\">\n    <span\n        matTooltip=\"{{ tooltip }}\"\n        matTooltipPosition=\"{{ tooltipPlacement }}\"\n    >\n        <button\n            [ngClass]=\"getButtonClasses()\"\n            [attr.aria-label]=\"icon\"\n            (click)=\"onClick($event)\"\n            [disabled]=\"isDisabled\"\n        >\n            <span class=\"ds-icon--{{ icon }}\"></span>\n        </button>\n    </span>\n</ng-container>\n<ng-template #noTooltip>\n    <button\n        [ngClass]=\"getButtonClasses()\"\n        [attr.aria-label]=\"icon\"\n        (click)=\"onClick($event)\"\n        [disabled]=\"isDisabled\"\n    >\n        <span class=\"ds-icon--{{ icon }}\"></span>\n    </button>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isDestructive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isInverse",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'lg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "\"sm\" | \"md\" | \"lg\"",
                    "decorators": []
                },
                {
                    "name": "tooltip",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tooltipPlacement",
                    "defaultValue": "'above'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "\"above\" | \"below\" | \"left\" | \"right\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clickHandler",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getButtonClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "{ [x: string]: boolean; 'ds-button': boolean; '--icon': boolean; '--destructive': boolean; '--disabled': boolean; '--inverse': boolean; }",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n    selector: 'qds-icon-button',\n    template: `\n        <ng-container *ngIf=\"tooltip; else noTooltip\">\n            <span\n                matTooltip=\"{{ tooltip }}\"\n                matTooltipPosition=\"{{ tooltipPlacement }}\"\n            >\n                <button\n                    [ngClass]=\"getButtonClasses()\"\n                    [attr.aria-label]=\"icon\"\n                    (click)=\"onClick($event)\"\n                    [disabled]=\"isDisabled\"\n                >\n                    <span class=\"ds-icon--{{ icon }}\"></span>\n                </button>\n            </span>\n        </ng-container>\n        <ng-template #noTooltip>\n            <button\n                [ngClass]=\"getButtonClasses()\"\n                [attr.aria-label]=\"icon\"\n                (click)=\"onClick($event)\"\n                [disabled]=\"isDisabled\"\n            >\n                <span class=\"ds-icon--{{ icon }}\"></span>\n            </button>\n        </ng-template>\n    `\n})\nexport class QDSIconButtonComponent {\n    @Input() customClasses: string = '';\n    @Input() icon: string = '';\n    @Input() isDestructive: boolean = false;\n    @Input() isDisabled: boolean = false;\n    @Input() isInverse: boolean = false;\n    @Input() size: 'sm' | 'md' | 'lg' = 'lg';\n    @Input() tooltip: string = '';\n    @Input() tooltipPlacement: 'above' | 'below' | 'left' | 'right' = 'above';\n\n    @Output() clickHandler = new EventEmitter<Event>();\n\n    onClick(event: Event) {\n        this.clickHandler.emit(event);\n    }\n\n    getButtonClasses() {\n        return {\n            'ds-button': true,\n            '--icon': true,\n            [this.customClasses]: !!this.customClasses,\n            [`--${this.size}`]: !!this.size,\n            '--destructive': this.isDestructive,\n            '--disabled': this.isDisabled,\n            '--inverse': this.isInverse\n        };\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "QDSIconComponent",
            "id": "component-QDSIconComponent-ec7384f00ca03b69474a67f93de9b14213934aadde667557d71b7fedbb9b48fef89fe3efd2a7dcade26ead41155e4c659e196a7592043536ed480d6406785f8e",
            "file": "src/stories/icon/icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-icon",
            "styleUrls": [],
            "styles": [],
            "template": "<span\n    [ngClass]=\"getIconClasses()\"\n    [attr.aria-label]=\"name\"\n    role=\"img\"\n></span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "matPrefix",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "matSuffix",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getColor",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getIconClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "{ [x: string]: boolean; matPrefix: boolean; matSuffix: boolean; }",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSize",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2\n} from '@angular/core';\n\n@Component({\n    selector: 'qds-icon',\n    template: `\n        <span\n            [ngClass]=\"getIconClasses()\"\n            [attr.aria-label]=\"name\"\n            role=\"img\"\n        ></span>\n    `\n})\nexport class QDSIconComponent implements AfterViewInit {\n    @Input() customClasses: string = '';\n    @Input() color: string = '';\n    @Input() matPrefix: boolean = false;\n    @Input() matSuffix: boolean = false;\n    @Input() name: string = '';\n    @Input() size: string = '';\n\n    getIconClasses() {\n        return {\n            [`ds-icon--${this.name}`]: !!this.name,\n            [this.customClasses]: !!this.customClasses,\n            [this.getColor()]: !!this.color,\n            [this.getSize()]: !!this.size,\n            [`matPrefix`]: !!this.matPrefix,\n            [`matSuffix`]: !!this.matSuffix\n        };\n    }\n\n    getColor() {\n        return `ds-${this.color}`;\n    }\n\n    getSize() {\n        return `ds-font-${this.size}`;\n    }\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSInputComponent",
            "id": "component-QDSInputComponent-08747e49e6c35f598730fcd066125cd265d5d7213436e21dd593ab1b681ae990c8c7c95f196c9a21708abc6eb92350bbf9c2ac5e76a19400987a37632ddb9226",
            "file": "src/stories/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-input",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-form-field\n    class=\"ds-input\"\n    [class]=\"customClasses\"\n    [class.--error]=\"hasError\"\n    [class.mat-form-field-disabled]=\"isDisabled\"\n    [class.--loading]=\"isLoading\"\n    [class.--required]=\"isRequired\"\n>\n    <mat-label *ngIf=\"label\" class=\"ds-input__label\">\n        <span>{{ label }}</span>\n\n        <button\n            *ngIf=\"tooltip\"\n            class=\"ds-tooltip ds-button --icon --sm\"\n            aria-label=\"button text\"\n            matTooltip=\"{{ tooltip }}\"\n            matTooltipPosition=\"above\"\n        >\n            <span class=\"ds-icon--info\"></span>\n        </button>\n    </mat-label>\n    <span\n        *ngIf=\"iconLeft\"\n        class=\"ds-icon--{{ iconLeft }} ds-input__icon --left\"\n        matPrefix\n    ></span>\n    <input\n        matInput\n        [id]=\"inputId\"\n        [placeholder]=\"placeholder\"\n        [required]=\"isRequired\"\n        [type]=\"type\"\n    />\n    <span\n        *ngIf=\"iconRight\"\n        class=\"ds-icon--{{ iconRight }} ds-input__icon --right\"\n        matSuffix\n    ></span>\n    <span *ngIf=\"isLoading && !iconRight\" matSuffix>\n        <qds-loader [isSmall]=\"true\" />\n    </span>\n\n    <div *ngIf=\"hintMessage && !errorMessage\" class=\"ds-input__hint\">\n        {{ hintMessage }}\n    </div>\n\n    <div *ngIf=\"hasError && errorMessage\" class=\"ds-input__error\">\n        {{ errorMessage }}\n    </div>\n</mat-form-field>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hasError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hintMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconLeft",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconRight",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isRequired",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "Function",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tooltip",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2\n} from '@angular/core';\n\n@Component({\n    selector: 'qds-input',\n    template: `\n        <mat-form-field\n            class=\"ds-input\"\n            [class]=\"customClasses\"\n            [class.--error]=\"hasError\"\n            [class.mat-form-field-disabled]=\"isDisabled\"\n            [class.--loading]=\"isLoading\"\n            [class.--required]=\"isRequired\"\n        >\n            <mat-label *ngIf=\"label\" class=\"ds-input__label\">\n                <span>{{ label }}</span>\n\n                <button\n                    *ngIf=\"tooltip\"\n                    class=\"ds-tooltip ds-button --icon --sm\"\n                    aria-label=\"button text\"\n                    matTooltip=\"{{ tooltip }}\"\n                    matTooltipPosition=\"above\"\n                >\n                    <span class=\"ds-icon--info\"></span>\n                </button>\n            </mat-label>\n            <span\n                *ngIf=\"iconLeft\"\n                class=\"ds-icon--{{ iconLeft }} ds-input__icon --left\"\n                matPrefix\n            ></span>\n            <input\n                matInput\n                [id]=\"inputId\"\n                [placeholder]=\"placeholder\"\n                [required]=\"isRequired\"\n                [type]=\"type\"\n            />\n            <span\n                *ngIf=\"iconRight\"\n                class=\"ds-icon--{{ iconRight }} ds-input__icon --right\"\n                matSuffix\n            ></span>\n            <span *ngIf=\"isLoading && !iconRight\" matSuffix>\n                <qds-loader [isSmall]=\"true\" />\n            </span>\n\n            <div *ngIf=\"hintMessage && !errorMessage\" class=\"ds-input__hint\">\n                {{ hintMessage }}\n            </div>\n\n            <div *ngIf=\"hasError && errorMessage\" class=\"ds-input__error\">\n                {{ errorMessage }}\n            </div>\n        </mat-form-field>\n    `\n})\nexport class QDSInputComponent implements AfterViewInit {\n    @Input() customClasses: string = '';\n    @Input() errorMessage: string = '';\n    @Input() hasError: boolean = false;\n    @Input() hintMessage: string = '';\n    @Input() inputId: string = '';\n    @Input() isDisabled: boolean = false;\n    @Input() isLoading: boolean = false;\n    @Input() isRequired: boolean = false;\n    @Input() label: string = '';\n    @Input() iconLeft: string = '';\n    @Input() iconRight: string = '';\n    @Input() onChange: Function = () => {};\n    @Input() placeholder: string = '';\n    @Input() tooltip: string = '';\n    @Input() type: string = 'text';\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSInputSelectComponent",
            "id": "component-QDSInputSelectComponent-cfd5b7b49ddf935948ccbc60ce5a6c58743d02c3d7d2ca3604f5fc885a1ddff9f24945f51a1e4b581c58eb799dc0ac20a680a6607b8ec50ebeec7a1b8e00251b",
            "file": "src/stories/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-input-select",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-container *ngIf=\"isMultiple; else singleSelect\">\n    <mat-form-field\n        class=\"ds-input\"\n        [class]=\"customClasses\"\n        [class.--error]=\"hasError\"\n        [class.mat-form-field-disabled]=\"isDisabled\"\n        [class.--required]=\"isRequired\"\n    >\n        <mat-label *ngIf=\"label\" class=\"ds-input__label\">\n            <span>{{ label }}</span>\n\n            <button\n                *ngIf=\"tooltip\"\n                class=\"ds-tooltip ds-button --icon --sm\"\n                aria-label=\"button text\"\n                matTooltip=\"{{ tooltip }}\"\n                matTooltipPosition=\"above\"\n            >\n                <span class=\"ds-icon--info\"></span>\n            </button>\n        </mat-label>\n\n        <mat-select\n            #multiSelectInstance\n            placeholder=\"{{ placeholder }}\"\n            disableOptionCentering\n            [panelClass]=\"'ds-dropdown ' + panelClasses\"\n            [id]=\"inputId\"\n            [required]=\"isRequired\"\n            (selectionChange)=\"onChange($event)\"\n            multiple\n        >\n            <mat-select-trigger class=\"ds-dropdown__trigger\">\n                <div class=\"ds-dropdown__selected-container\">\n                    <span\n                        class=\"ds-dropdown__selected\"\n                        *ngFor=\"\n                            let item of multiSelectInstance.value\n                                | slice : 0 : 2\n                        \"\n                    >\n                        {{ item }}\n                    </span>\n                </div>\n\n                <span\n                    class=\"ds-dropdown__selected-plus\"\n                    *ngIf=\"(multiSelectInstance.value?.length || 0) > 2\"\n                >\n                    +{{ (multiSelectInstance.value?.length || 0) - 2 }}\n                </span>\n            </mat-select-trigger>\n\n            <mat-option\n                class=\"ds-dropdown__item\"\n                *ngFor=\"let item of selectOptions\"\n                [value]=\"item\"\n            >\n                {{ item }}\n            </mat-option>\n        </mat-select>\n\n        <div\n            *ngIf=\"hintMessage && !errorMessage\"\n            class=\"ds-input__hint\"\n        >\n            {{ hintMessage }}\n        </div>\n\n        <div *ngIf=\"hasError && errorMessage\" class=\"ds-input__error\">\n            {{ errorMessage }}\n        </div>\n    </mat-form-field>\n</ng-container>\n<ng-template #singleSelect>\n    <mat-form-field\n        class=\"ds-input\"\n        [class]=\"customClasses\"\n        [class.--error]=\"hasError\"\n        [class.mat-form-field-disabled]=\"isDisabled\"\n        [class.--required]=\"isRequired\"\n    >\n        <mat-label *ngIf=\"label\" class=\"ds-input__label\">\n            <span>{{ label }}</span>\n\n            <button\n                *ngIf=\"tooltip\"\n                class=\"ds-tooltip ds-button --icon --sm\"\n                aria-label=\"button text\"\n                matTooltip=\"{{ tooltip }}\"\n                matTooltipPosition=\"above\"\n            >\n                <span class=\"ds-icon--info\"></span>\n            </button>\n        </mat-label>\n\n        <mat-select\n            [panelClass]=\"'ds-dropdown ' + panelClasses\"\n            disableOptionCentering\n            placeholder=\"{{ placeholder }}\"\n            [id]=\"inputId\"\n            [required]=\"isRequired\"\n            (selectionChange)=\"onChange($event)\"\n        >\n            <mat-option\n                class=\"ds-dropdown__item\"\n                *ngFor=\"let item of selectOptions\"\n                [value]=\"item\"\n            >\n                {{ item }}\n            </mat-option>\n        </mat-select>\n\n        <div\n            *ngIf=\"hintMessage && !errorMessage\"\n            class=\"ds-input__hint\"\n        >\n            {{ hintMessage }}\n        </div>\n\n        <div *ngIf=\"hasError && errorMessage\" class=\"ds-input__error\">\n            {{ errorMessage }}\n        </div>\n    </mat-form-field>\n</ng-template>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 140,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 141,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hasError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 142,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hintMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 143,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 144,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 145,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isMultiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 146,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isRequired",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 147,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 148,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 149,
                    "type": "Function",
                    "decorators": []
                },
                {
                    "name": "panelClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 150,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 151,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 152,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "tooltip",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 153,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2\n} from '@angular/core';\n\n@Component({\n    selector: 'qds-input-select',\n    template: `\n        <ng-container *ngIf=\"isMultiple; else singleSelect\">\n            <mat-form-field\n                class=\"ds-input\"\n                [class]=\"customClasses\"\n                [class.--error]=\"hasError\"\n                [class.mat-form-field-disabled]=\"isDisabled\"\n                [class.--required]=\"isRequired\"\n            >\n                <mat-label *ngIf=\"label\" class=\"ds-input__label\">\n                    <span>{{ label }}</span>\n\n                    <button\n                        *ngIf=\"tooltip\"\n                        class=\"ds-tooltip ds-button --icon --sm\"\n                        aria-label=\"button text\"\n                        matTooltip=\"{{ tooltip }}\"\n                        matTooltipPosition=\"above\"\n                    >\n                        <span class=\"ds-icon--info\"></span>\n                    </button>\n                </mat-label>\n\n                <mat-select\n                    #multiSelectInstance\n                    placeholder=\"{{ placeholder }}\"\n                    disableOptionCentering\n                    [panelClass]=\"'ds-dropdown ' + panelClasses\"\n                    [id]=\"inputId\"\n                    [required]=\"isRequired\"\n                    (selectionChange)=\"onChange($event)\"\n                    multiple\n                >\n                    <mat-select-trigger class=\"ds-dropdown__trigger\">\n                        <div class=\"ds-dropdown__selected-container\">\n                            <span\n                                class=\"ds-dropdown__selected\"\n                                *ngFor=\"\n                                    let item of multiSelectInstance.value\n                                        | slice : 0 : 2\n                                \"\n                            >\n                                {{ item }}\n                            </span>\n                        </div>\n\n                        <span\n                            class=\"ds-dropdown__selected-plus\"\n                            *ngIf=\"(multiSelectInstance.value?.length || 0) > 2\"\n                        >\n                            +{{ (multiSelectInstance.value?.length || 0) - 2 }}\n                        </span>\n                    </mat-select-trigger>\n\n                    <mat-option\n                        class=\"ds-dropdown__item\"\n                        *ngFor=\"let item of selectOptions\"\n                        [value]=\"item\"\n                    >\n                        {{ item }}\n                    </mat-option>\n                </mat-select>\n\n                <div\n                    *ngIf=\"hintMessage && !errorMessage\"\n                    class=\"ds-input__hint\"\n                >\n                    {{ hintMessage }}\n                </div>\n\n                <div *ngIf=\"hasError && errorMessage\" class=\"ds-input__error\">\n                    {{ errorMessage }}\n                </div>\n            </mat-form-field>\n        </ng-container>\n        <ng-template #singleSelect>\n            <mat-form-field\n                class=\"ds-input\"\n                [class]=\"customClasses\"\n                [class.--error]=\"hasError\"\n                [class.mat-form-field-disabled]=\"isDisabled\"\n                [class.--required]=\"isRequired\"\n            >\n                <mat-label *ngIf=\"label\" class=\"ds-input__label\">\n                    <span>{{ label }}</span>\n\n                    <button\n                        *ngIf=\"tooltip\"\n                        class=\"ds-tooltip ds-button --icon --sm\"\n                        aria-label=\"button text\"\n                        matTooltip=\"{{ tooltip }}\"\n                        matTooltipPosition=\"above\"\n                    >\n                        <span class=\"ds-icon--info\"></span>\n                    </button>\n                </mat-label>\n\n                <mat-select\n                    [panelClass]=\"'ds-dropdown ' + panelClasses\"\n                    disableOptionCentering\n                    placeholder=\"{{ placeholder }}\"\n                    [id]=\"inputId\"\n                    [required]=\"isRequired\"\n                    (selectionChange)=\"onChange($event)\"\n                >\n                    <mat-option\n                        class=\"ds-dropdown__item\"\n                        *ngFor=\"let item of selectOptions\"\n                        [value]=\"item\"\n                    >\n                        {{ item }}\n                    </mat-option>\n                </mat-select>\n\n                <div\n                    *ngIf=\"hintMessage && !errorMessage\"\n                    class=\"ds-input__hint\"\n                >\n                    {{ hintMessage }}\n                </div>\n\n                <div *ngIf=\"hasError && errorMessage\" class=\"ds-input__error\">\n                    {{ errorMessage }}\n                </div>\n            </mat-form-field>\n        </ng-template>\n    `\n})\nexport class QDSInputSelectComponent implements AfterViewInit {\n    @Input() customClasses: string = '';\n    @Input() errorMessage: string = '';\n    @Input() hasError: boolean = false;\n    @Input() hintMessage: string = '';\n    @Input() inputId: string = '';\n    @Input() isDisabled: boolean = false;\n    @Input() isMultiple: boolean = false;\n    @Input() isRequired: boolean = false;\n    @Input() label: string = '';\n    @Input() onChange: Function = () => {};\n    @Input() panelClasses: string = '';\n    @Input() placeholder: string = '';\n    @Input() selectOptions: any[] = [];\n    @Input() tooltip: string = '';\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 153,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSLinkComponent",
            "id": "component-QDSLinkComponent-4846d3cb16a8edae4296f9c2f8d787bbf6fae084971c2f4a7791e500cf40b0aafd92b71de2d3916b7c32c871ad94c2d4fc4e671115801d3e94c8a320eb54131b",
            "file": "src/stories/link/link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-link",
            "styleUrls": [],
            "styles": [],
            "template": "<a\n    class=\"ds-link\"\n    [ngClass]=\"customClasses\"\n    [class.--destructive]=\"isDestructive\"\n    [class.--inverse]=\"isInverse\"\n    [class.--icons]=\"iconLeft || iconRight\"\n    [href]=\"url\"\n    [target]=\"newWindow ? '_blank' : '_self'\"\n>\n    <span *ngIf=\"iconLeft\" class=\"ds-icon--{{ iconLeft }}\"></span>\n\n    <ng-container *ngIf=\"iconLeft || iconRight; else noIcon\">\n        <span>{{ label }}</span>\n    </ng-container>\n\n    <ng-template #noIcon>\n        {{ label }}\n    </ng-template>\n\n    <span *ngIf=\"iconRight\" class=\"ds-icon--{{ iconRight }}\"></span>\n</a>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconLeft",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconRight",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isDestructive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isInverse",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "newWindow",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "url",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2\n} from '@angular/core';\n\n@Component({\n    selector: 'qds-link',\n    template: `\n        <a\n            class=\"ds-link\"\n            [ngClass]=\"customClasses\"\n            [class.--destructive]=\"isDestructive\"\n            [class.--inverse]=\"isInverse\"\n            [class.--icons]=\"iconLeft || iconRight\"\n            [href]=\"url\"\n            [target]=\"newWindow ? '_blank' : '_self'\"\n        >\n            <span *ngIf=\"iconLeft\" class=\"ds-icon--{{ iconLeft }}\"></span>\n\n            <ng-container *ngIf=\"iconLeft || iconRight; else noIcon\">\n                <span>{{ label }}</span>\n            </ng-container>\n\n            <ng-template #noIcon>\n                {{ label }}\n            </ng-template>\n\n            <span *ngIf=\"iconRight\" class=\"ds-icon--{{ iconRight }}\"></span>\n        </a>\n    `\n})\nexport class QDSLinkComponent implements AfterViewInit {\n    @Input() customClasses: string = '';\n    @Input() iconLeft: string = '';\n    @Input() iconRight: string = '';\n    @Input() isDestructive: boolean = false;\n    @Input() isInverse: boolean = false;\n    @Input() label: string = '';\n    @Input() newWindow: boolean = false;\n    @Input() url: string = '';\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSLoaderComponent",
            "id": "component-QDSLoaderComponent-9510b3ecaca74ec339423055c53be4d3c29849c335499664d28f1e983d3309ca3735239d959f9aa59978129faf2b27d8ddaece66c85187bfc79a25313c32258f",
            "file": "src/stories/loader/loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-loader",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-spinner\n    class=\"ds-loading\"\n    [ngClass]=\"customClasses\"\n    [class.--center]=\"isCentered\"\n    [class.--fixed]=\"isFixed\"\n    [class.--small]=\"isSmall\"\n    [mode]=\"isDeterminate ? 'determinate' : 'indeterminate'\"\n    [value]=\"progressValue\"\n></mat-spinner>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isCentered",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isDeterminate",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isFixed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSmall",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "progressValue",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "intervalId",
                    "defaultValue": "{} as any",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "isStart",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "startLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2\n} from '@angular/core';\n\n@Component({\n    selector: 'qds-loader',\n    template: `\n        <mat-spinner\n            class=\"ds-loading\"\n            [ngClass]=\"customClasses\"\n            [class.--center]=\"isCentered\"\n            [class.--fixed]=\"isFixed\"\n            [class.--small]=\"isSmall\"\n            [mode]=\"isDeterminate ? 'determinate' : 'indeterminate'\"\n            [value]=\"progressValue\"\n        ></mat-spinner>\n    `\n})\nexport class QDSLoaderComponent implements AfterViewInit {\n    @Input() customClasses: string = '';\n    @Input() isCentered: boolean = false;\n    @Input() isDeterminate: boolean = false;\n    @Input() isFixed: boolean = false;\n    @Input() isSmall: boolean = false;\n    @Input() progressValue: number = 0;\n\n    isStart = false;\n    intervalId = {} as any;\n    startLoading() {\n        this.isStart = true;\n        this.intervalId = setInterval(() => {\n            if (this.progressValue < 100) {\n                this.progressValue += 1;\n            } else {\n                clearInterval(this.intervalId);\n            }\n        }, 10);\n    }\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSMessageComponent",
            "id": "component-QDSMessageComponent-f35a071b8779badfc65c0b052ee5c6e590354a80ae846849a3872ee559e39f277ddf1b117ad619cc432b7f3ca828b0579ee559196a538a5335c77b38322cedee",
            "file": "src/stories/message/message.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-message",
            "styleUrls": [],
            "styles": [],
            "template": "<div\n    [ngClass]=\"['ds-message', '--' + type, customClasses]\"\n    role=\"alert\"\n>\n    <div *ngIf=\"!noIcon\" class=\"ds-message__icon\">\n        <span [ngClass]=\"'ds-icon--' + getIconName()\"></span>\n    </div>\n\n    <div class=\"ds-message__content\">\n        <h3 *ngIf=\"title\">{{ title }}</h3>\n\n        {{ message }}\n\n        <div *ngIf=\"actions.length > 0\" class=\"ds-message__actions\">\n            <a\n                class=\"ds-link\"\n                href=\"action.action\"\n                *ngFor=\"let action of actions; let i = index\"\n            >\n                {{ action.title }}\n            </a>\n        </div>\n    </div>\n\n    <div *ngIf=\"!hideX\" class=\"ds-message__close\">\n        <button class=\"ds-button --icon --md\" (click)=\"onClose()\">\n            <span class=\"ds-icon--close\"></span>\n        </button>\n    </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "actions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hideX",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "noIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'informative'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "\"informative\" | \"success\" | \"warning\" | \"error\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closeHandler",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getIconName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    Component,\n    Input,\n    Output,\n    EventEmitter,\n    ElementRef,\n    Renderer2,\n    AfterViewInit\n} from '@angular/core';\n\n@Component({\n    selector: 'qds-message',\n    template: `\n        <div\n            [ngClass]=\"['ds-message', '--' + type, customClasses]\"\n            role=\"alert\"\n        >\n            <div *ngIf=\"!noIcon\" class=\"ds-message__icon\">\n                <span [ngClass]=\"'ds-icon--' + getIconName()\"></span>\n            </div>\n\n            <div class=\"ds-message__content\">\n                <h3 *ngIf=\"title\">{{ title }}</h3>\n\n                {{ message }}\n\n                <div *ngIf=\"actions.length > 0\" class=\"ds-message__actions\">\n                    <a\n                        class=\"ds-link\"\n                        href=\"action.action\"\n                        *ngFor=\"let action of actions; let i = index\"\n                    >\n                        {{ action.title }}\n                    </a>\n                </div>\n            </div>\n\n            <div *ngIf=\"!hideX\" class=\"ds-message__close\">\n                <button class=\"ds-button --icon --md\" (click)=\"onClose()\">\n                    <span class=\"ds-icon--close\"></span>\n                </button>\n            </div>\n        </div>\n    `\n})\nexport class QDSMessageComponent implements AfterViewInit {\n    @Input() customClasses: string = '';\n    @Input() actions: any[] = [];\n    @Input() hideX: boolean = false;\n    @Input() message: string = '';\n    @Input() noIcon: boolean = false;\n    @Input() title: string = '';\n    @Input() type: 'informative' | 'success' | 'warning' | 'error' =\n        'informative';\n\n    @Output() closeHandler = new EventEmitter<void>();\n\n    onClose() {\n        this.closeHandler.emit();\n    }\n\n    getIconName(): string {\n        const iconType = {\n            informative: 'info',\n            success: 'check-circle',\n            warning: 'warning',\n            error: 'warning-octagon'\n        };\n\n        return iconType[this.type] || 'info';\n    }\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSModalComponent",
            "id": "component-QDSModalComponent-8764e722381ca8ac5bccab87d31d3133311c6025b028960c70ce3174972fe65fbe5ae4d9b05af20d191d5dbb3863f243923522dca148a915b960e1b1fac7a460",
            "file": "src/stories/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-modal",
            "styleUrls": [],
            "styles": [],
            "template": "<div\n    [class.--alert]=\"type === 'alert'\"\n    [class.--error]=\"type === 'error'\"\n    [class.--informative]=\"type === 'informative'\"\n    [class.--all-btns]=\"\n        buttonLabel && secondaryButtonLabel && ghostButtonLabel\n    \"\n>\n    <div mat-dialog-header class=\"ds-modal__header\">\n        <h1 *ngIf=\"title\">{{ title }}</h1>\n\n        <button\n            class=\"ds-button --icon --md\"\n            *ngIf=\"!hideX\"\n            (click)=\"onClose()\"\n        >\n            <span class=\"ds-icon--close\"></span>\n        </button>\n    </div>\n\n    <div mat-dialog-content class=\"ds-modal__content\">\n        <div [innerHTML]=\"content\"></div>\n    </div>\n\n    <div mat-dialog-actions class=\"ds-modal__actions\">\n        <button\n            *ngIf=\"ghostButtonLabel\"\n            class=\"ds-button --ghost\"\n            (click)=\"onGhostButtonClick()\"\n        >\n            {{ ghostButtonLabel }}\n        </button>\n\n        <div class=\"ds-modal__actions-right\">\n            <button\n                *ngIf=\"secondaryButtonLabel\"\n                class=\"ds-button --secondary\"\n                (click)=\"onSecondaryButtonClick()\"\n            >\n                {{ secondaryButtonLabel }}\n            </button>\n            <button\n                *ngIf=\"buttonLabel\"\n                class=\"ds-button --primary\"\n                (click)=\"onPrimaryButtonClick()\"\n            >\n                {{ buttonLabel }}\n            </button>\n        </div>\n    </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonHandler",
                    "defaultValue": "() => {}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "Function",
                    "decorators": []
                },
                {
                    "name": "buttonLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "content",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "ghostButtonHandler",
                    "defaultValue": "() => {}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "Function",
                    "decorators": []
                },
                {
                    "name": "ghostButtonLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hideX",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "secondaryButtonHandler",
                    "defaultValue": "() => {}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "Function",
                    "decorators": []
                },
                {
                    "name": "secondaryButtonLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'informative'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "\"alert\" | \"error\" | \"informative\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<QDSModalComponent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onGhostButtonClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPrimaryButtonClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSecondaryButtonClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, Inject, Input } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n    selector: 'qds-modal',\n    template: `\n        <div\n            [class.--alert]=\"type === 'alert'\"\n            [class.--error]=\"type === 'error'\"\n            [class.--informative]=\"type === 'informative'\"\n            [class.--all-btns]=\"\n                buttonLabel && secondaryButtonLabel && ghostButtonLabel\n            \"\n        >\n            <div mat-dialog-header class=\"ds-modal__header\">\n                <h1 *ngIf=\"title\">{{ title }}</h1>\n\n                <button\n                    class=\"ds-button --icon --md\"\n                    *ngIf=\"!hideX\"\n                    (click)=\"onClose()\"\n                >\n                    <span class=\"ds-icon--close\"></span>\n                </button>\n            </div>\n\n            <div mat-dialog-content class=\"ds-modal__content\">\n                <div [innerHTML]=\"content\"></div>\n            </div>\n\n            <div mat-dialog-actions class=\"ds-modal__actions\">\n                <button\n                    *ngIf=\"ghostButtonLabel\"\n                    class=\"ds-button --ghost\"\n                    (click)=\"onGhostButtonClick()\"\n                >\n                    {{ ghostButtonLabel }}\n                </button>\n\n                <div class=\"ds-modal__actions-right\">\n                    <button\n                        *ngIf=\"secondaryButtonLabel\"\n                        class=\"ds-button --secondary\"\n                        (click)=\"onSecondaryButtonClick()\"\n                    >\n                        {{ secondaryButtonLabel }}\n                    </button>\n                    <button\n                        *ngIf=\"buttonLabel\"\n                        class=\"ds-button --primary\"\n                        (click)=\"onPrimaryButtonClick()\"\n                    >\n                        {{ buttonLabel }}\n                    </button>\n                </div>\n            </div>\n        </div>\n    `\n})\nexport class QDSModalComponent implements AfterViewInit {\n    @Input() buttonHandler: Function = () => {};\n    @Input() buttonLabel: string = '';\n    @Input() content: string = '';\n    @Input() ghostButtonHandler: Function = () => {};\n    @Input() ghostButtonLabel: string = '';\n    @Input() hideX: boolean = false;\n    @Input() secondaryButtonHandler: Function = () => {};\n    @Input() secondaryButtonLabel: string = '';\n    @Input() title: string = '';\n    @Input() type: 'alert' | 'error' | 'informative' = 'informative';\n\n    onClose() {\n        this.dialogRef.close();\n    }\n\n    onPrimaryButtonClick() {\n        this.buttonHandler();\n        this.dialogRef.close();\n    }\n\n    onSecondaryButtonClick() {\n        this.secondaryButtonHandler();\n        this.dialogRef.close();\n    }\n\n    onGhostButtonClick() {\n        this.ghostButtonHandler();\n        this.dialogRef.close();\n    }\n\n    constructor(\n        public dialogRef: MatDialogRef<QDSModalComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: any\n    ) {\n        this.content = data.content;\n        this.title = data.title;\n        this.buttonLabel = data.buttonLabel;\n        this.buttonHandler = data.buttonHandler;\n        this.secondaryButtonLabel = data.secondaryButtonLabel;\n        this.secondaryButtonHandler = data.secondaryButtonHandler;\n        this.ghostButtonLabel = data.ghostButtonLabel;\n        this.ghostButtonHandler = data.ghostButtonHandler;\n        this.hideX = data.hideX;\n        this.type = data.type;\n    }\n\n    ngAfterViewInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<QDSModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 89,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<QDSModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSNavRailComponent",
            "id": "component-QDSNavRailComponent-14c7afed809598b4461961e564715d03870faabd89605fdd5910f34f06475061c0bcccff7b718adef3e3e05c56b1ac9553c247c24e451cb98e17062d4b66fa24",
            "file": "src/stories/navigation/rail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-nav-rail",
            "styleUrls": [],
            "styles": [],
            "template": "<header class=\"ds-header\" *ngIf=\"!noHeader\">\n    <div class=\"ds-grid --margins\">\n        <a class=\"ds-brand-wrapper --md\" href=\"/\">\n            <img\n                src=\"https://ds.cdn.questdiagnostics.com/assets/img/qd-brand--horizontal--green.svg\"\n                alt=\"logo\"\n            />\n        </a>\n    </div>\n</header>\n\n<div class=\"ds-navrail\" [class.--no-header]=\"noHeader\">\n    <div class=\"ds-navrail__rail\">\n        <ng-container *ngFor=\"let item of navItems; index as i\">\n            <button\n                class=\"ds-navrail__item\"\n                [class]=\"item.active\"\n                (click)=\"selectNavItem(i)\"\n            >\n                <div\n                    *ngIf=\"item.hasNotification\"\n                    class=\"ds-badge\"\n                    [class.--dot]=\"!item.notificationCount\"\n                    [class.--circle]=\"item.notificationCount\"\n                >\n                    <ng-container *ngIf=\"item.notificationCount\">\n                        {{ item.notificationCount }}\n                    </ng-container>\n                </div>\n\n                <span\n                    *ngIf=\"item.icon\"\n                    class=\"ds-icon--{{ item.icon }}\"\n                ></span>\n\n                <span class=\"ds-navrail__label\">\n                    {{ item.label }}\n                </span>\n            </button>\n        </ng-container>\n    </div>\n\n    <div\n        class=\"ds-navrail__drawer\"\n        [class.--opened]=\"showDrawer !== -1\"\n    >\n        <ng-container *ngFor=\"let item of drawerContents; index as i\">\n            <ng-container *ngIf=\"!item.expandable; else noSubNav\">\n                <button\n                    class=\"ds-navrail__sub-item\"\n                    (click)=\"navigateTo(item.route)\"\n                >\n                    <span class=\"ds-navrail__label\">\n                        {{ item.label }}\n                    </span>\n                </button>\n            </ng-container>\n            <ng-template #noSubNav>\n                <button\n                    class=\"ds-navrail__sub-item --expandable\"\n                    [class.--opened]=\"showExpandedNav === item\"\n                    (click)=\"expandSubNav(item)\"\n                >\n                    <span class=\"ds-navrail__label\">\n                        {{ item.label }}\n                    </span>\n                </button>\n\n                <div\n                    class=\"ds-navrail__sub-drawer\"\n                    [class.--opened]=\"showExpandedNav === item\"\n                >\n                    <ng-container\n                        *ngFor=\"\n                            let subitem of item.expandedSubNav;\n                            index as i\n                        \"\n                    >\n                        <button\n                            class=\"ds-navrail__sub-item\"\n                            (click)=\"navigateTo(subitem.route)\"\n                        >\n                            <span class=\"ds-navrail__label\">\n                                {{ subitem.label }}\n                            </span>\n                        </button>\n                    </ng-container>\n                </div>\n            </ng-template>\n        </ng-container>\n    </div>\n\n    <div\n        class=\"ds-navrail__overlay\"\n        [class.--opened]=\"showDrawer !== -1\"\n        (click)=\"closeDrawer()\"\n    ></div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "navItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 113,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "noHeader",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 114,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "drawerContents",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "showDrawer",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "showExpandedNav",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 118
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDrawer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "expandSubNav",
                    "args": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectNavItem",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2\n} from '@angular/core';\n\n@Component({\n    selector: 'qds-nav-rail',\n    template: `\n        <header class=\"ds-header\" *ngIf=\"!noHeader\">\n            <div class=\"ds-grid --margins\">\n                <a class=\"ds-brand-wrapper --md\" href=\"/\">\n                    <img\n                        src=\"https://ds.cdn.questdiagnostics.com/assets/img/qd-brand--horizontal--green.svg\"\n                        alt=\"logo\"\n                    />\n                </a>\n            </div>\n        </header>\n\n        <div class=\"ds-navrail\" [class.--no-header]=\"noHeader\">\n            <div class=\"ds-navrail__rail\">\n                <ng-container *ngFor=\"let item of navItems; index as i\">\n                    <button\n                        class=\"ds-navrail__item\"\n                        [class]=\"item.active\"\n                        (click)=\"selectNavItem(i)\"\n                    >\n                        <div\n                            *ngIf=\"item.hasNotification\"\n                            class=\"ds-badge\"\n                            [class.--dot]=\"!item.notificationCount\"\n                            [class.--circle]=\"item.notificationCount\"\n                        >\n                            <ng-container *ngIf=\"item.notificationCount\">\n                                {{ item.notificationCount }}\n                            </ng-container>\n                        </div>\n\n                        <span\n                            *ngIf=\"item.icon\"\n                            class=\"ds-icon--{{ item.icon }}\"\n                        ></span>\n\n                        <span class=\"ds-navrail__label\">\n                            {{ item.label }}\n                        </span>\n                    </button>\n                </ng-container>\n            </div>\n\n            <div\n                class=\"ds-navrail__drawer\"\n                [class.--opened]=\"showDrawer !== -1\"\n            >\n                <ng-container *ngFor=\"let item of drawerContents; index as i\">\n                    <ng-container *ngIf=\"!item.expandable; else noSubNav\">\n                        <button\n                            class=\"ds-navrail__sub-item\"\n                            (click)=\"navigateTo(item.route)\"\n                        >\n                            <span class=\"ds-navrail__label\">\n                                {{ item.label }}\n                            </span>\n                        </button>\n                    </ng-container>\n                    <ng-template #noSubNav>\n                        <button\n                            class=\"ds-navrail__sub-item --expandable\"\n                            [class.--opened]=\"showExpandedNav === item\"\n                            (click)=\"expandSubNav(item)\"\n                        >\n                            <span class=\"ds-navrail__label\">\n                                {{ item.label }}\n                            </span>\n                        </button>\n\n                        <div\n                            class=\"ds-navrail__sub-drawer\"\n                            [class.--opened]=\"showExpandedNav === item\"\n                        >\n                            <ng-container\n                                *ngFor=\"\n                                    let subitem of item.expandedSubNav;\n                                    index as i\n                                \"\n                            >\n                                <button\n                                    class=\"ds-navrail__sub-item\"\n                                    (click)=\"navigateTo(subitem.route)\"\n                                >\n                                    <span class=\"ds-navrail__label\">\n                                        {{ subitem.label }}\n                                    </span>\n                                </button>\n                            </ng-container>\n                        </div>\n                    </ng-template>\n                </ng-container>\n            </div>\n\n            <div\n                class=\"ds-navrail__overlay\"\n                [class.--opened]=\"showDrawer !== -1\"\n                (click)=\"closeDrawer()\"\n            ></div>\n        </div>\n    `\n})\nexport class QDSNavRailComponent implements AfterViewInit {\n    @Input() navItems: any[] = [];\n    @Input() noHeader: boolean = false;\n\n    showDrawer = -1;\n    drawerContents: any[] = [];\n    showExpandedNav = false;\n\n    closeDrawer() {\n        this.showDrawer = -1;\n        this.drawerContents = [];\n        this.showExpandedNav = false;\n        this.navItems = this.navItems.map(item => {\n            item.active = '';\n            return item;\n        });\n    }\n\n    selectNavItem(index: number): void {\n        const navItem = this.navItems[index];\n\n        if (navItem?.route) {\n            this.navigateTo(navItem.route);\n            this.closeDrawer();\n            return;\n        }\n\n        if (this.showDrawer === index) {\n            this.closeDrawer();\n        } else {\n            this.showDrawer = index;\n            this.drawerContents = navItem?.subNav ?? [];\n            this.navItems = this.navItems.map((item, itemIndex) => {\n                item.active = index === itemIndex ? '--opened' : '';\n                return item;\n            });\n        }\n    }\n\n    expandSubNav(item: any): void {\n        if (item?.route) {\n            this.navigateTo(item.route);\n            return;\n        }\n\n        if (this.showExpandedNav === item) {\n            this.showExpandedNav = false;\n        } else {\n            this.showExpandedNav = item;\n        }\n    }\n\n    navigateTo(route: string): void {\n        window.location.href = route;\n    }\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 166,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSPaginationComponent",
            "id": "component-QDSPaginationComponent-a0cef041d72ce97b0cffb6a9009b02b9061e193d40a722db09657252d8c87c17bdaf097ea1986cc19133d8cfaa70dce37c469db15fa1cc233030cfadd111ae11",
            "file": "src/stories/pagination/pagination.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-pagination",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-paginator\n    class=\"ds-pagination\"\n    [class]=\"customClasses\"\n    [length]=\"length\"\n    [pageSize]=\"pageSize\"\n    [pageSizeOptions]=\"pageSizeOptions\"\n>\n</mat-paginator>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "length",
                    "defaultValue": "'100'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "pageSize",
                    "defaultValue": "'10'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "pageSizeOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "any[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2\n} from '@angular/core';\n\n@Component({\n    selector: 'qds-pagination',\n    template: `\n        <mat-paginator\n            class=\"ds-pagination\"\n            [class]=\"customClasses\"\n            [length]=\"length\"\n            [pageSize]=\"pageSize\"\n            [pageSizeOptions]=\"pageSizeOptions\"\n        >\n        </mat-paginator>\n    `\n})\nexport class QDSPaginationComponent implements AfterViewInit {\n    @Input() customClasses: string = '';\n    @Input() length: string = '100';\n    @Input() pageSize: string = '10';\n    @Input() pageSizeOptions: any[] = [];\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSProgressBarComponent",
            "id": "component-QDSProgressBarComponent-43dda595cde5a6393d3b4418b323fbce6eb3c14b0fe27cf38d10e4c0a91575d458f2fca9def2838eb131c88cc5af8e5fb981132632bfbdb686fa009f5a46dfac",
            "file": "src/stories/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-progress-bar",
            "styleUrls": [],
            "styles": [],
            "template": "<div\n    class=\"ds-progressbar\"\n    [class]=\"customClasses\"\n    role=\"progressbar\"\n    aria-label=\"Progress\"\n>\n    <div\n        class=\"--fill\"\n        [ngStyle]=\"{ width: fillPercentage + '%' }\"\n    ></div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "fillPercentage",
                    "defaultValue": "'50'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2\n} from '@angular/core';\n\n@Component({\n    selector: 'qds-progress-bar',\n    template: `\n        <div\n            class=\"ds-progressbar\"\n            [class]=\"customClasses\"\n            role=\"progressbar\"\n            aria-label=\"Progress\"\n        >\n            <div\n                class=\"--fill\"\n                [ngStyle]=\"{ width: fillPercentage + '%' }\"\n            ></div>\n        </div>\n    `\n})\nexport class QDSProgressBarComponent implements AfterViewInit {\n    @Input() customClasses: string = '';\n    @Input() fillPercentage: string = '50';\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSProgressStepperComponent",
            "id": "component-QDSProgressStepperComponent-881019541c4eeb4f29e481de3aa0e0fe24e3b1b7e710c403be372493ae08d22ffde77f45abbe94e3b8967b52c3eb070b893cbd2fce24f47a59af3d508cc567fe",
            "file": "src/stories/progress-stepper/progress-stepper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-progress-stepper",
            "styleUrls": [],
            "styles": [],
            "template": "<div\n    class=\"ds-progress-stepper\"\n    [class.--vertical]=\"isVertical\"\n    [class]=\"customClasses\"\n>\n    <div\n        *ngFor=\"let step of steps; let i = index\"\n        class=\"ds-step\"\n        [class.completed]=\"step.status === 'completed'\"\n        [class.error]=\"step.status === 'error'\"\n        [class.warning]=\"step.status === 'warning'\"\n        [class.cancelled]=\"step.status === 'cancelled'\"\n        [class.current]=\"step.status === 'current'\"\n        tabindex=\"-1\"\n        aria-label=\"step\"\n    >\n        <span class=\"ds-flex --start-center\">\n            <span class=\"--dash\"></span>\n            <span class=\"--dot\">\n                <ng-container *ngIf=\"!hideNumbers\">\n                    {{ i + 1 }}\n                </ng-container>\n            </span>\n            <span class=\"--dash\"></span>\n        </span>\n\n        <div *ngIf=\"!hideLabels\" class=\"ds-step__label\">\n            <span [attr.aria-label]=\"step.label\">\n                {{ step.label }}\n            </span>\n\n            <div\n                *ngIf=\"step.subLabel\"\n                class=\"--sub-label\"\n                [attr.aria-label]=\"step.subLabel\"\n            >\n                {{ step.subLabel }}\n            </div>\n        </div>\n    </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hideLabels",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hideNumbers",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isVertical",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "steps",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "literal type[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2\n} from '@angular/core';\n\n@Component({\n    selector: 'qds-progress-stepper',\n    template: `\n        <div\n            class=\"ds-progress-stepper\"\n            [class.--vertical]=\"isVertical\"\n            [class]=\"customClasses\"\n        >\n            <div\n                *ngFor=\"let step of steps; let i = index\"\n                class=\"ds-step\"\n                [class.completed]=\"step.status === 'completed'\"\n                [class.error]=\"step.status === 'error'\"\n                [class.warning]=\"step.status === 'warning'\"\n                [class.cancelled]=\"step.status === 'cancelled'\"\n                [class.current]=\"step.status === 'current'\"\n                tabindex=\"-1\"\n                aria-label=\"step\"\n            >\n                <span class=\"ds-flex --start-center\">\n                    <span class=\"--dash\"></span>\n                    <span class=\"--dot\">\n                        <ng-container *ngIf=\"!hideNumbers\">\n                            {{ i + 1 }}\n                        </ng-container>\n                    </span>\n                    <span class=\"--dash\"></span>\n                </span>\n\n                <div *ngIf=\"!hideLabels\" class=\"ds-step__label\">\n                    <span [attr.aria-label]=\"step.label\">\n                        {{ step.label }}\n                    </span>\n\n                    <div\n                        *ngIf=\"step.subLabel\"\n                        class=\"--sub-label\"\n                        [attr.aria-label]=\"step.subLabel\"\n                    >\n                        {{ step.subLabel }}\n                    </div>\n                </div>\n            </div>\n        </div>\n    `\n})\nexport class QDSProgressStepperComponent implements AfterViewInit {\n    @Input() customClasses: string = '';\n    @Input() hideLabels: boolean = false;\n    @Input() hideNumbers: boolean = false;\n    @Input() isVertical: boolean = false;\n    @Input() steps: {\n        label?: string;\n        subLabel?: string;\n        status?: string;\n    }[] = [];\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 64,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSRadioGroupComponent",
            "id": "component-QDSRadioGroupComponent-32ad90fc74cd0822f871d50c18ef33ba64651f82309c2f3643353f1080d57d20543e872b4c4100e34cab4ce5e215341fcae142a29f657f94c1b9a8bafe438abd",
            "file": "src/stories/radio-button/radio-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-radio-group",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-radio-group\n    class=\"ds-input__radio-group\"\n    [class]=\"customClasses\"\n    [class.--vertical]=\"isVertical\"\n    [formControl]=\"formControlId\"\n    [attr.aria-label]=\"groupLabel\"\n    [name]=\"groupName\"\n>\n    <label *ngIf=\"groupLabel\">\n        <span>{{ groupLabel }}</span>\n    </label>\n\n    <mat-radio-button\n        class=\"ds-input__radio\"\n        [class.--disabled]=\"option.isDisabled\"\n        *ngFor=\"let option of radioOptions\"\n        [disabled]=\"option.isDisabled\"\n        [value]=\"option.value\"\n        [attr.aria-label]=\"option.label\"\n    >\n        {{ option.label }}\n    </mat-radio-button>\n</mat-radio-group>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formControlId",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "groupLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "groupName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isVertical",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "radioOptions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "literal type[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n    selector: 'qds-radio-group',\n    template: `\n        <mat-radio-group\n            class=\"ds-input__radio-group\"\n            [class]=\"customClasses\"\n            [class.--vertical]=\"isVertical\"\n            [formControl]=\"formControlId\"\n            [attr.aria-label]=\"groupLabel\"\n            [name]=\"groupName\"\n        >\n            <label *ngIf=\"groupLabel\">\n                <span>{{ groupLabel }}</span>\n            </label>\n\n            <mat-radio-button\n                class=\"ds-input__radio\"\n                [class.--disabled]=\"option.isDisabled\"\n                *ngFor=\"let option of radioOptions\"\n                [disabled]=\"option.isDisabled\"\n                [value]=\"option.value\"\n                [attr.aria-label]=\"option.label\"\n            >\n                {{ option.label }}\n            </mat-radio-button>\n        </mat-radio-group>\n    `\n})\nexport class QDSRadioGroupComponent implements AfterViewInit {\n    @Input() customClasses: string = '';\n    @Input() formControlId: FormControl = new FormControl();\n    @Input() groupLabel: string = '';\n    @Input() groupName: string = '';\n    @Input() isVertical: boolean = false;\n    @Input() radioOptions: {\n        label: string;\n        isDisabled?: boolean;\n        value: string;\n    }[] = [];\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSSidesheetComponent",
            "id": "component-QDSSidesheetComponent-c72cc77279984ee943e6653eeb66acd09b9f4970a0904195bfa53880dc6f8153dcece9ed00363a291987c9bc4e8d3637004487d591af8021859b3883d076d4f1",
            "file": "src/stories/sidesheet/sidesheet.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-sidesheet",
            "styleUrls": [],
            "styles": [],
            "template": "<div\n    class=\"ds-sidesheet\"\n    [ngClass]=\"{ '--opened': toggleSidesheet }\"\n    (scroll)=\"onSidesheetScroll($event)\"\n>\n    <div class=\"ds-sidesheet__header\">\n        <span *ngIf=\"title\">{{ title }}</span>\n\n        <button\n            class=\"ds-button --icon\"\n            aria-label=\"close\"\n            (click)=\"closeSidesheet()\"\n        >\n            <span class=\"ds-icon--close\"></span>\n        </button>\n    </div>\n\n    <div class=\"ds-sidesheet__content\">\n        <ng-content></ng-content>\n    </div>\n</div>\n\n<div\n    class=\"ds-overlay\"\n    [class]=\"customClasses\"\n    [ngClass]=\"{ '--opened': toggleSidesheet }\"\n    (click)=\"closeSidesheet()\"\n></div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "toggleSidesheet",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "openSidesheet",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "openSidehseet",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [
                {
                    "name": "closeSidesheet",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSidesheetScroll",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    Renderer2\n} from '@angular/core';\n\n@Component({\n    selector: 'qds-sidesheet',\n    template: `\n        <div\n            class=\"ds-sidesheet\"\n            [ngClass]=\"{ '--opened': toggleSidesheet }\"\n            (scroll)=\"onSidesheetScroll($event)\"\n        >\n            <div class=\"ds-sidesheet__header\">\n                <span *ngIf=\"title\">{{ title }}</span>\n\n                <button\n                    class=\"ds-button --icon\"\n                    aria-label=\"close\"\n                    (click)=\"closeSidesheet()\"\n                >\n                    <span class=\"ds-icon--close\"></span>\n                </button>\n            </div>\n\n            <div class=\"ds-sidesheet__content\">\n                <ng-content></ng-content>\n            </div>\n        </div>\n\n        <div\n            class=\"ds-overlay\"\n            [class]=\"customClasses\"\n            [ngClass]=\"{ '--opened': toggleSidesheet }\"\n            (click)=\"closeSidesheet()\"\n        ></div>\n    `\n})\nexport class QDSSidesheetComponent implements AfterViewInit {\n    @Input() customClasses: string = '';\n    @Input() title: string = '';\n    @Input() toggleSidesheet: boolean = false;\n    @Output() openSidesheet = new EventEmitter<boolean>();\n\n    openSidehseet: boolean = false;\n\n    closeSidesheet() {\n        this.toggleSidesheet = !this.toggleSidesheet;\n        this.openSidesheet.emit(this.toggleSidesheet);\n    }\n\n    onSidesheetScroll(event: Event) {\n        const elem = event.currentTarget as HTMLElement;\n\n        if (!elem) {\n            return;\n        }\n\n        const dsSidesheet = document.querySelector('.ds-sidesheet');\n        const dsSidesheetHeader = document.querySelector(\n            '.ds-sidesheet__header'\n        );\n\n        if (dsSidesheet) {\n            dsSidesheet.addEventListener('scroll', function () {\n                const sidesheetScrollTop = elem.scrollTop;\n\n                if (sidesheetScrollTop > 0) {\n                    dsSidesheetHeader?.classList.add('--scrolled');\n                } else {\n                    dsSidesheetHeader?.classList.remove('--scrolled');\n                }\n            });\n        }\n    }\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 80,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSTableComponent",
            "id": "component-QDSTableComponent-0864ea11f78475ecab78b2fca3f887fb58b9073c7985f5b12fe4772004cddcc8ef49c9de0098506b962486f7b2eeada0fd054a29b9aa8cde1b26e00b19c93632",
            "file": "src/stories/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-table",
            "styleUrls": [],
            "styles": [],
            "template": "<table\n    mat-table\n    class=\"ds-table\"\n    [class]=\"customClasses\"\n    [class.--expandable]=\"isExpandable\"\n    [class.--flat]=\"isFlat\"\n    [class.--transparent]=\"isTransparent\"\n    [class.--sortable]=\"isSortable\"\n    [dataSource]=\"dataSource\"\n    [multiTemplateDataRows]=\"isExpandable\"\n    matSort\n    (matSortChange)=\"announceSortChange($event)\"\n>\n    <ng-container\n        *ngFor=\"let column of columns\"\n        [matColumnDef]=\"column.slug\"\n    >\n        <th\n            class=\"ds-table__head-th\"\n            [class.--actions]=\"column.slug === 'actions'\"\n            [class.--no-sort]=\"!column.sortable\"\n            mat-header-cell\n            *matHeaderCellDef\n            mat-sort-header\n        >\n            {{ column.label }}\n        </th>\n        <td\n            class=\"ds-table__row-td\"\n            [class.--actions]=\"column.slug === 'actions'\"\n            mat-cell\n            *matCellDef=\"let row\"\n        >\n            <ng-container\n                *ngIf=\"\n                    column.slug !== 'expandable';\n                    else expandableTemplate\n                \"\n            >\n                <ng-container\n                    *ngIf=\"\n                        column.slug !== 'actions';\n                        else actionsTemplate\n                    \"\n                >\n                    <div\n                        *ngIf=\"\n                            row[column.slug]?.truncate;\n                            else noTruncate\n                        \"\n                        class=\"ds-truncate\"\n                    >\n                        <span\n                            #textElement\n                            [matTooltip]=\"\n                                isTextOverflow(textElement)\n                                    ? row[column.slug]?.value\n                                    : ''\n                            \"\n                            [matTooltipPosition]=\"'above'\"\n                        >\n                            <span\n                                [innerHTML]=\"row[column.slug]?.value\"\n                            ></span>\n                        </span>\n                    </div>\n                    <ng-template #noTruncate>\n                        <span\n                            [innerHTML]=\"row[column.slug]?.value\"\n                        ></span>\n                    </ng-template>\n                </ng-container>\n\n                <ng-template #actionsTemplate>\n                    <qds-icon-button\n                        icon=\"legacy--overflow\"\n                        [matMenuTriggerFor]=\"actionsMenu.menu\"\n                    />\n\n                    <qds-contextual-menu\n                        [menuItems]=\"row[column.slug]\"\n                        [menuRight]=\"true\"\n                        #actionsMenu\n                    />\n                </ng-template>\n            </ng-container>\n            <ng-template #expandableTemplate>\n                <qds-icon-button\n                    icon=\"expand\"\n                    [customClasses]=\"getExpandableClasses(row)\"\n                    (click)=\"toggleRowExpansion(row)\"\n                />\n            </ng-template>\n        </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"expandedDetail\">\n        <td\n            mat-cell\n            *matCellDef=\"let element\"\n            [attr.colspan]=\"getColumnSlugs().length\"\n        >\n            <div\n                class=\"ds-table__expansion-panel\"\n                [class.--expanded]=\"element.isExpanded\"\n            >\n                <div class=\"ds-table__expansion-content\">\n                    <span\n                        [innerHTML]=\"element.expandedContent?.value\"\n                    ></span>\n                </div>\n            </div>\n        </td>\n    </ng-container>\n\n    <!-- Header row -->\n    <tr\n        mat-header-row\n        class=\"ds-table__head\"\n        *matHeaderRowDef=\"getColumnSlugs()\"\n    ></tr>\n\n    <!-- Data rows -->\n    <tr\n        mat-row\n        class=\"ds-table__row\"\n        *matRowDef=\"\n            let row;\n            columns: getColumnSlugs();\n            when: isDefaultRow\n        \"\n    ></tr>\n\n    <!-- Expanded row -->\n    <tr\n        mat-row\n        class=\"ds-table__row --expandable\"\n        *matRowDef=\"\n            let row;\n            columns: ['expandedDetail'];\n            when: isExpandableRow\n        \"\n    ></tr>\n</table>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "columns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 169,
                    "type": "Array<literal type>",
                    "decorators": []
                },
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 164,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTableDataSource<any>(\n        []\n    )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 174,
                    "type": "MatTableDataSource<any>",
                    "decorators": []
                },
                {
                    "name": "defaultSortColumn",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 177,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "defaultSortDirection",
                    "defaultValue": "'asc'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 178,
                    "type": "\"asc\" | \"desc\"",
                    "decorators": []
                },
                {
                    "name": "isExpandable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 165,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isFlat",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 166,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSortable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 168,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isTransparent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 167,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isDefaultRow",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 204
                },
                {
                    "name": "isExpandableRow",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 208
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 180,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "announceSortChange",
                    "args": [
                        {
                            "name": "sortState",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "sortState",
                            "type": "Sort",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColumnSlugs",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getExpandableClasses",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isTextOverflow",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLSpanElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLSpanElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleRowExpansion",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2,\n    ViewChild\n} from '@angular/core';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { MatSort, Sort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\n\n@Component({\n    selector: 'qds-table',\n    template: `\n        <table\n            mat-table\n            class=\"ds-table\"\n            [class]=\"customClasses\"\n            [class.--expandable]=\"isExpandable\"\n            [class.--flat]=\"isFlat\"\n            [class.--transparent]=\"isTransparent\"\n            [class.--sortable]=\"isSortable\"\n            [dataSource]=\"dataSource\"\n            [multiTemplateDataRows]=\"isExpandable\"\n            matSort\n            (matSortChange)=\"announceSortChange($event)\"\n        >\n            <ng-container\n                *ngFor=\"let column of columns\"\n                [matColumnDef]=\"column.slug\"\n            >\n                <th\n                    class=\"ds-table__head-th\"\n                    [class.--actions]=\"column.slug === 'actions'\"\n                    [class.--no-sort]=\"!column.sortable\"\n                    mat-header-cell\n                    *matHeaderCellDef\n                    mat-sort-header\n                >\n                    {{ column.label }}\n                </th>\n                <td\n                    class=\"ds-table__row-td\"\n                    [class.--actions]=\"column.slug === 'actions'\"\n                    mat-cell\n                    *matCellDef=\"let row\"\n                >\n                    <ng-container\n                        *ngIf=\"\n                            column.slug !== 'expandable';\n                            else expandableTemplate\n                        \"\n                    >\n                        <ng-container\n                            *ngIf=\"\n                                column.slug !== 'actions';\n                                else actionsTemplate\n                            \"\n                        >\n                            <div\n                                *ngIf=\"\n                                    row[column.slug]?.truncate;\n                                    else noTruncate\n                                \"\n                                class=\"ds-truncate\"\n                            >\n                                <span\n                                    #textElement\n                                    [matTooltip]=\"\n                                        isTextOverflow(textElement)\n                                            ? row[column.slug]?.value\n                                            : ''\n                                    \"\n                                    [matTooltipPosition]=\"'above'\"\n                                >\n                                    <span\n                                        [innerHTML]=\"row[column.slug]?.value\"\n                                    ></span>\n                                </span>\n                            </div>\n                            <ng-template #noTruncate>\n                                <span\n                                    [innerHTML]=\"row[column.slug]?.value\"\n                                ></span>\n                            </ng-template>\n                        </ng-container>\n\n                        <ng-template #actionsTemplate>\n                            <qds-icon-button\n                                icon=\"legacy--overflow\"\n                                [matMenuTriggerFor]=\"actionsMenu.menu\"\n                            />\n\n                            <qds-contextual-menu\n                                [menuItems]=\"row[column.slug]\"\n                                [menuRight]=\"true\"\n                                #actionsMenu\n                            />\n                        </ng-template>\n                    </ng-container>\n                    <ng-template #expandableTemplate>\n                        <qds-icon-button\n                            icon=\"expand\"\n                            [customClasses]=\"getExpandableClasses(row)\"\n                            (click)=\"toggleRowExpansion(row)\"\n                        />\n                    </ng-template>\n                </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"expandedDetail\">\n                <td\n                    mat-cell\n                    *matCellDef=\"let element\"\n                    [attr.colspan]=\"getColumnSlugs().length\"\n                >\n                    <div\n                        class=\"ds-table__expansion-panel\"\n                        [class.--expanded]=\"element.isExpanded\"\n                    >\n                        <div class=\"ds-table__expansion-content\">\n                            <span\n                                [innerHTML]=\"element.expandedContent?.value\"\n                            ></span>\n                        </div>\n                    </div>\n                </td>\n            </ng-container>\n\n            <!-- Header row -->\n            <tr\n                mat-header-row\n                class=\"ds-table__head\"\n                *matHeaderRowDef=\"getColumnSlugs()\"\n            ></tr>\n\n            <!-- Data rows -->\n            <tr\n                mat-row\n                class=\"ds-table__row\"\n                *matRowDef=\"\n                    let row;\n                    columns: getColumnSlugs();\n                    when: isDefaultRow\n                \"\n            ></tr>\n\n            <!-- Expanded row -->\n            <tr\n                mat-row\n                class=\"ds-table__row --expandable\"\n                *matRowDef=\"\n                    let row;\n                    columns: ['expandedDetail'];\n                    when: isExpandableRow\n                \"\n            ></tr>\n        </table>\n    `\n})\nexport class QDSTableComponent implements AfterViewInit {\n    @Input() customClasses: string = '';\n    @Input() isExpandable: boolean = false;\n    @Input() isFlat: boolean = false;\n    @Input() isTransparent: boolean = false;\n    @Input() isSortable: boolean = false;\n    @Input() columns: Array<{\n        slug: string;\n        label: string;\n        sortable?: boolean;\n    }> = [];\n    @Input() dataSource: MatTableDataSource<any> = new MatTableDataSource<any>(\n        []\n    );\n    @Input() defaultSortColumn: string = '';\n    @Input() defaultSortDirection: 'asc' | 'desc' = 'asc';\n\n    @ViewChild(MatSort) sort!: MatSort;\n\n    getColumnSlugs(): string[] {\n        return this.columns?.map(c => c.slug) || [];\n    }\n\n    announceSortChange(sortState: Sort) {\n        if (sortState.direction) {\n            this._liveAnnouncer.announce(`Sorted ${sortState.direction}ending`);\n        } else {\n            this._liveAnnouncer.announce('Sorting cleared');\n        }\n    }\n\n    isTextOverflow(element: HTMLSpanElement): boolean {\n        return element.scrollWidth > element.clientWidth;\n    }\n\n    toggleRowExpansion(row: any): void {\n        row.isExpanded = !row.isExpanded;\n\n        this.dataSource.data = [...this.dataSource.data];\n    }\n\n    isDefaultRow = (index: number, row: any): boolean => {\n        return true;\n    };\n\n    isExpandableRow = (index: number, row: any): boolean => {\n        return !!row.expandedContent?.value;\n    };\n\n    getExpandableClasses(row: any): string {\n        return row.isExpanded ? '--expanded' : '';\n    }\n\n    constructor(\n        private _liveAnnouncer: LiveAnnouncer,\n        private cdr: ChangeDetectorRef,\n        private el: ElementRef,\n        private renderer: Renderer2\n    ) {}\n\n    ngAfterViewInit() {\n        if (this.isSortable && this.sort) {\n            this.dataSource.sort = this.sort;\n\n            this.dataSource.sortingDataAccessor = (data, sortHeaderId) => {\n                const columnValue = data[sortHeaderId]?.value;\n                return columnValue !== undefined && columnValue !== null\n                    ? typeof columnValue === 'string'\n                        ? columnValue\n                        : columnValue.toString()\n                    : '';\n            };\n\n            if (this.defaultSortColumn) {\n                this.sort.active = this.defaultSortColumn;\n            }\n\n            if (this.defaultSortDirection) {\n                this.sort.direction = this.defaultSortDirection;\n            }\n        }\n        this.cdr.detectChanges();\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_liveAnnouncer",
                        "type": "LiveAnnouncer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 214,
                "jsdoctags": [
                    {
                        "name": "_liveAnnouncer",
                        "type": "LiveAnnouncer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSTabsComponent",
            "id": "component-QDSTabsComponent-3c889cc38d3023e1f778aec5f26cd4f0f145b405c9dcd7767991e6c7a80ad08baea29d89bd40a9bcb190665016773e8526156452158a511df43d0f4e2ccb3065",
            "file": "src/stories/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-tabs",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"ds-tab-wrapper\">\n    <div class=\"ds-tab-set\">\n        <button\n            *ngFor=\"let tab of tabs; let i = index\"\n            class=\"ds-tab\"\n            [class.--disabled]=\"tab.isDisabled\"\n            [class.--selected]=\"tab.isSelected\"\n            [attr.aria-label]=\"tab.label\"\n            [attr.aria-controls]=\"'tab-' + i\"\n            [attr.tabindex]=\"tab.isDisabled ? -1 : 0\"\n            [attr.id]=\"'tab-' + i\"\n            role=\"tab\"\n            (click)=\"!tab.isDisabled && selectTab(i)\"\n        >\n            <span>{{ tab.label }}</span>\n        </button>\n    </div>\n\n    <ng-container *ngFor=\"let tab of tabs; let i = index\">\n        <div\n            *ngIf=\"tab.isSelected\"\n            [class]=\"contentClasses\"\n            [attr.id]=\"'tabcontent-' + i\"\n            class=\"ds-tab__content\"\n            role=\"tabpanel\"\n            [innerHTML]=\"tab.content\"\n        ></div>\n    </ng-container>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "contentClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "Array<literal type>",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectTab",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2\n} from '@angular/core';\n\n@Component({\n    selector: 'qds-tabs',\n    template: `\n        <div class=\"ds-tab-wrapper\">\n            <div class=\"ds-tab-set\">\n                <button\n                    *ngFor=\"let tab of tabs; let i = index\"\n                    class=\"ds-tab\"\n                    [class.--disabled]=\"tab.isDisabled\"\n                    [class.--selected]=\"tab.isSelected\"\n                    [attr.aria-label]=\"tab.label\"\n                    [attr.aria-controls]=\"'tab-' + i\"\n                    [attr.tabindex]=\"tab.isDisabled ? -1 : 0\"\n                    [attr.id]=\"'tab-' + i\"\n                    role=\"tab\"\n                    (click)=\"!tab.isDisabled && selectTab(i)\"\n                >\n                    <span>{{ tab.label }}</span>\n                </button>\n            </div>\n\n            <ng-container *ngFor=\"let tab of tabs; let i = index\">\n                <div\n                    *ngIf=\"tab.isSelected\"\n                    [class]=\"contentClasses\"\n                    [attr.id]=\"'tabcontent-' + i\"\n                    class=\"ds-tab__content\"\n                    role=\"tabpanel\"\n                    [innerHTML]=\"tab.content\"\n                ></div>\n            </ng-container>\n        </div>\n    `\n})\nexport class QDSTabsComponent implements AfterViewInit {\n    @Input() contentClasses: string = '';\n    @Input() tabs: Array<{\n        content?: string;\n        isDisabled?: boolean;\n        isSelected?: boolean;\n        label: string;\n    }> = [];\n\n    ngOnInit() {\n        const selectedTab = this.tabs.find(tab => tab.isSelected);\n        if (!selectedTab && this.tabs.length > 0) {\n            this.tabs[0].isSelected = true;\n        }\n    }\n\n    selectTab(index: number) {\n        this.tabs.forEach((tab, i) => {\n            tab.isSelected = i === index;\n        });\n    }\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 63,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSTagComponent",
            "id": "component-QDSTagComponent-1b1800000c754a3a1e92d98b406f4c8f75754186895c303653197d95589c9dddb6a6ae7c8ba046fc093c3cb63ed25bdace5e1c55d29b5488ebdef8eff3ff163a",
            "file": "src/stories/tag/tag.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-tag",
            "styleUrls": [],
            "styles": [],
            "template": "<button\n    class=\"ds-tag\"\n    [class]=\"customClasses\"\n    [class.--secondary]=\"isSecondary\"\n    [class.--disabled]=\"isDisabled\"\n    [class.--selected]=\"isSelected\"\n    (click)=\"onTagClick()\"\n    [attr.aria-label]=\"label\"\n>\n    {{ label }}\n\n    <span *ngIf=\"showClose\" class=\"ds-icon--close\"></span>\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "clickHandler",
                    "defaultValue": "() => {}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSecondary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showClose",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isSelected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onTagClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2\n} from '@angular/core';\n\n@Component({\n    selector: 'qds-tag',\n    template: `\n        <button\n            class=\"ds-tag\"\n            [class]=\"customClasses\"\n            [class.--secondary]=\"isSecondary\"\n            [class.--disabled]=\"isDisabled\"\n            [class.--selected]=\"isSelected\"\n            (click)=\"onTagClick()\"\n            [attr.aria-label]=\"label\"\n        >\n            {{ label }}\n\n            <span *ngIf=\"showClose\" class=\"ds-icon--close\"></span>\n        </button>\n    `\n})\nexport class QDSTagComponent implements AfterViewInit {\n    @Input() clickHandler: () => void = () => {};\n    @Input() customClasses: string = '';\n    @Input() isDisabled: boolean = false;\n    @Input() isSecondary: boolean = false;\n    @Input() label: string = '';\n    @Input() showClose: boolean = false;\n\n    isSelected: boolean = false;\n\n    onTagClick() {\n        if (this.isDisabled) {\n            return;\n        }\n\n        this.isSelected = !this.isSelected;\n        this.clickHandler();\n    }\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSTextareaComponent",
            "id": "component-QDSTextareaComponent-6b47c7d0cc8a15a8a328eab8517c4c2be30c3e06354df26a644b966e004aaa5dd81381de1d2ec66d1c17b15f41b80fd77bc5070a11799b365900747c682ac6d4",
            "file": "src/stories/textarea/textarea.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-textarea",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-form-field\n    class=\"ds-textarea\"\n    [class]=\"customClasses\"\n    [class.--disabled]=\"isDisabled\"\n    [class.--error]=\"hasError\"\n    [class.--required]=\"isRequired\"\n>\n    <mat-label *ngIf=\"label\" class=\"ds-input__label\">\n        <span>{{ label }}</span>\n\n        <button\n            *ngIf=\"tooltip\"\n            class=\"ds-tooltip ds-button --icon --sm\"\n            aria-label=\"button text\"\n            matTooltip=\"{{ tooltip }}\"\n            matTooltipPosition=\"above\"\n        >\n            <span class=\"ds-icon--info\"></span>\n        </button>\n    </mat-label>\n\n    <textarea\n        matInput\n        [id]=\"inputId\"\n        [placeholder]=\"placeholder\"\n        [required]=\"isRequired\"\n    ></textarea>\n\n    <div *ngIf=\"hintMessage && !errorMessage\" class=\"ds-input__hint\">\n        {{ hintMessage }}\n    </div>\n\n    <div *ngIf=\"hasError && errorMessage\" class=\"ds-input__error\">\n        {{ errorMessage }}\n    </div>\n</mat-form-field>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hasError",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hintMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isRequired",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "Function",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tooltip",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2\n} from '@angular/core';\n\n@Component({\n    selector: 'qds-textarea',\n    template: `\n        <mat-form-field\n            class=\"ds-textarea\"\n            [class]=\"customClasses\"\n            [class.--disabled]=\"isDisabled\"\n            [class.--error]=\"hasError\"\n            [class.--required]=\"isRequired\"\n        >\n            <mat-label *ngIf=\"label\" class=\"ds-input__label\">\n                <span>{{ label }}</span>\n\n                <button\n                    *ngIf=\"tooltip\"\n                    class=\"ds-tooltip ds-button --icon --sm\"\n                    aria-label=\"button text\"\n                    matTooltip=\"{{ tooltip }}\"\n                    matTooltipPosition=\"above\"\n                >\n                    <span class=\"ds-icon--info\"></span>\n                </button>\n            </mat-label>\n\n            <textarea\n                matInput\n                [id]=\"inputId\"\n                [placeholder]=\"placeholder\"\n                [required]=\"isRequired\"\n            ></textarea>\n\n            <div *ngIf=\"hintMessage && !errorMessage\" class=\"ds-input__hint\">\n                {{ hintMessage }}\n            </div>\n\n            <div *ngIf=\"hasError && errorMessage\" class=\"ds-input__error\">\n                {{ errorMessage }}\n            </div>\n        </mat-form-field>\n    `\n})\nexport class QDSTextareaComponent implements AfterViewInit {\n    @Input() customClasses: string = '';\n    @Input() errorMessage: string = '';\n    @Input() hasError: boolean = false;\n    @Input() hintMessage: string = '';\n    @Input() inputId: string = '';\n    @Input() isDisabled: boolean = false;\n    @Input() isRequired: boolean = false;\n    @Input() label: string = '';\n    @Input() onChange: Function = () => {};\n    @Input() placeholder: string = '';\n    @Input() tooltip: string = '';\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSToastComponent",
            "id": "component-QDSToastComponent-f41af3afa79af980dee582b40e04bccee0d9cb92ca4d1da838cfd2e4f886e3c77d63759480b66cb0c0e2b8e69d0c4245b88d06633fb081869519d4dbb50798d2",
            "file": "src/stories/toast/toast.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-toast",
            "styleUrls": [],
            "styles": [],
            "template": "<div\n    class=\"ds-toast__content\"\n    [class.--text-close]=\"textLinkLabel\"\n    [class.--hide-icon]=\"hideIcon\"\n>\n    <span matSnackBarLabel>\n        {{ message }}\n    </span>\n\n    <span *ngIf=\"!hideDismiss\" matSnackBarActions>\n        <a *ngIf=\"textLinkLabel\" class=\"ds-link\" (click)=\"onClose()\">\n            {{ textLinkLabel }}\n        </a>\n\n        <button\n            class=\"ds-button --icon --md\"\n            *ngIf=\"!textLinkLabel\"\n            (click)=\"onClose()\"\n        >\n            <span class=\"ds-icon--close\"></span>\n        </button>\n    </span>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "hideDismiss",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hideIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "positionYOffset",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "positionYOffsetMobile",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "textLinkLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_SNACK_BAR_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "hasDuration",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "toastRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSnackBarRef<QDSToastComponent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "updateOffset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74
                }
            ],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    HostListener,\n    Inject,\n    Input,\n    Renderer2\n} from '@angular/core';\nimport {\n    MAT_SNACK_BAR_DATA,\n    MatSnackBarRef\n} from '@angular/material/snack-bar';\n\n@Component({\n    selector: 'qds-toast',\n    template: `\n        <div\n            class=\"ds-toast__content\"\n            [class.--text-close]=\"textLinkLabel\"\n            [class.--hide-icon]=\"hideIcon\"\n        >\n            <span matSnackBarLabel>\n                {{ message }}\n            </span>\n\n            <span *ngIf=\"!hideDismiss\" matSnackBarActions>\n                <a *ngIf=\"textLinkLabel\" class=\"ds-link\" (click)=\"onClose()\">\n                    {{ textLinkLabel }}\n                </a>\n\n                <button\n                    class=\"ds-button --icon --md\"\n                    *ngIf=\"!textLinkLabel\"\n                    (click)=\"onClose()\"\n                >\n                    <span class=\"ds-icon--close\"></span>\n                </button>\n            </span>\n        </div>\n    `\n})\nexport class QDSToastComponent implements AfterViewInit {\n    @Input() hideDismiss: boolean = false;\n    @Input() hideIcon: boolean = false;\n    @Input() message: string = '';\n    @Input() positionYOffset: number = 0;\n    @Input() positionYOffsetMobile: number = 0;\n    @Input() textLinkLabel: string = '';\n\n    hasDuration: boolean = false;\n\n    onClose() {\n        this.toastRef.dismissWithAction();\n    }\n\n    constructor(\n        public toastRef: MatSnackBarRef<QDSToastComponent>,\n        private renderer: Renderer2,\n        @Inject(MAT_SNACK_BAR_DATA) public data: any\n    ) {\n        this.hideDismiss = data.hideDismiss;\n        this.hideIcon = data.hideIcon;\n        this.message = data.message;\n        this.positionYOffset = data.positionYOffset;\n        this.positionYOffsetMobile = data.positionYOffsetMobile;\n        this.textLinkLabel = data.textLinkLabel;\n    }\n\n    ngAfterViewInit(): void {\n        this.updateOffset();\n    }\n\n    @HostListener('window:resize', ['$event'])\n    onResize() {\n        this.updateOffset();\n    }\n\n    private updateOffset(): void {\n        const snackBarContainer = document.querySelector(\n            '.mat-mdc-snack-bar-container'\n        );\n        if (snackBarContainer) {\n            let offset: string;\n\n            if (window.innerWidth < 900) {\n                offset = this.positionYOffsetMobile\n                    ? `${this.positionYOffsetMobile}px`\n                    : '40px';\n            } else {\n                offset = this.positionYOffset\n                    ? `${this.positionYOffset}px`\n                    : '64px';\n            }\n\n            if (\n                this.toastRef.containerInstance.snackBarConfig\n                    .verticalPosition === 'bottom'\n            ) {\n                this.renderer.removeStyle(snackBarContainer, 'margin-top');\n                this.renderer.setStyle(\n                    snackBarContainer,\n                    'margin-bottom',\n                    offset\n                );\n            } else {\n                this.renderer.removeStyle(snackBarContainer, 'margin-bottom');\n                this.renderer.setStyle(snackBarContainer, 'margin-top', offset);\n            }\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toastRef",
                        "type": "MatSnackBarRef<QDSToastComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "toastRef",
                        "type": "MatSnackBarRef<QDSToastComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSToggleComponent",
            "id": "component-QDSToggleComponent-df99b88740aaa65dff455ead118a2ceb5ea52b9966d8a1ef318e78a03e1b7a746bf6e2a710a22bb287f00088ed7dfe971463c4a07a9f5ad17ef9352e538955db",
            "file": "src/stories/toggle/toggle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-toggle",
            "styleUrls": [],
            "styles": [],
            "template": "<mat-slide-toggle\n    class=\"ds-toggle-switch\"\n    [class]=\"customClasses\"\n    [class.--disabled]=\"isDisabled\"\n    [id]=\"inputId\"\n    [labelPosition]=\"labelPosition\"\n    [attr.aria-label]=\"label\"\n    [checked]=\"isChecked\"\n>\n    {{ label }}\n</mat-slide-toggle>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClasses",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isChecked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "labelPosition",
                    "defaultValue": "'after'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "\"before\" | \"after\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2\n} from '@angular/core';\n\n@Component({\n    selector: 'qds-toggle',\n    template: `\n        <mat-slide-toggle\n            class=\"ds-toggle-switch\"\n            [class]=\"customClasses\"\n            [class.--disabled]=\"isDisabled\"\n            [id]=\"inputId\"\n            [labelPosition]=\"labelPosition\"\n            [attr.aria-label]=\"label\"\n            [checked]=\"isChecked\"\n        >\n            {{ label }}\n        </mat-slide-toggle>\n    `\n})\nexport class QDSToggleComponent implements AfterViewInit {\n    @Input() customClasses: string = '';\n    @Input() inputId: string = '';\n    @Input() isChecked: boolean = false;\n    @Input() isDisabled: boolean = false;\n    @Input() label: string = '';\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "QDSTooltipComponent",
            "id": "component-QDSTooltipComponent-fec6c96dbc6e6a4bf7fd58ab7472757ba878021eacb351ea896312d0dfd553fa155889623b808d2a9408f25a511d5329347483badb7e8c7345d8fe250a9cf68a",
            "file": "src/stories/tooltip/tooltip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "qds-tooltip",
            "styleUrls": [],
            "styles": [],
            "template": "<span\n    #tooltip=\"matTooltip\"\n    matTooltip=\"{{ message }}\"\n    [matTooltipPosition]=\"position\"\n>\n    <ng-content #trigger></ng-content>\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "position",
                    "defaultValue": "'above'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "\"above\" | \"below\" | \"left\" | \"right\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTooltip",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tooltip', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "trigger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'trigger', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    Input,\n    Renderer2,\n    ViewChild\n} from '@angular/core';\nimport { MatTooltip } from '@angular/material/tooltip';\n\n@Component({\n    selector: 'qds-tooltip',\n    template: `\n        <span\n            #tooltip=\"matTooltip\"\n            matTooltip=\"{{ message }}\"\n            [matTooltipPosition]=\"position\"\n        >\n            <ng-content #trigger></ng-content>\n        </span>\n    `\n})\nexport class QDSTooltipComponent implements AfterViewInit {\n    @Input() message: string = '';\n    @Input() position: 'above' | 'below' | 'left' | 'right' = 'above';\n\n    @ViewChild('tooltip', { static: true }) tooltip!: MatTooltip;\n    @ViewChild('trigger', { static: true }) trigger!: ElementRef;\n\n    constructor(private el: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        const attrs = this.el.nativeElement.getAttributeNames();\n        attrs.forEach((attr: string) =>\n            this.renderer.removeAttribute(this.el.nativeElement, attr)\n        );\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "AfterViewInit"
            ]
        }
    ],
    "modules": [
        {
            "name": "MaterialModule",
            "id": "module-MaterialModule-a34309315a5a873fa12ccb80bbddd7671571112c9c0c1f4bd4b8f1b2528ac73e39f6603f569ba00126ceea81defb191d9661e758c168f1a035602f7b69b10d91",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/material.module.ts",
            "methods": [],
            "sourceCode": "import { CdkTableModule } from '@angular/cdk/table';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { QDSButtonComponent } from '../stories/button/button.component';\nimport { QDSHeaderComponent } from '../stories/navigation/header.component';\n\n@NgModule({\n    declarations: [QDSButtonComponent, QDSHeaderComponent],\n    imports: [\n        CdkTableModule,\n        CommonModule,\n        MatAutocompleteModule,\n        MatCheckboxModule,\n        MatDatepickerModule,\n        MatDialogModule,\n        MatExpansionModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatMenuModule,\n        MatNativeDateModule,\n        MatPaginatorModule,\n        MatProgressBarModule,\n        MatProgressSpinnerModule,\n        MatRadioModule,\n        MatSelectModule,\n        MatSidenavModule,\n        MatSlideToggleModule,\n        MatSnackBarModule,\n        MatSortModule,\n        MatStepperModule,\n        MatTableModule,\n        MatTooltipModule,\n        OverlayModule,\n        ReactiveFormsModule\n    ],\n    exports: [\n        CdkTableModule,\n        MatAutocompleteModule,\n        MatCheckboxModule,\n        MatDatepickerModule,\n        MatDialogModule,\n        MatExpansionModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatMenuModule,\n        MatNativeDateModule,\n        MatPaginatorModule,\n        MatProgressBarModule,\n        MatProgressSpinnerModule,\n        MatRadioModule,\n        MatSelectModule,\n        MatSidenavModule,\n        MatSlideToggleModule,\n        MatSnackBarModule,\n        MatSortModule,\n        MatStepperModule,\n        MatTableModule,\n        MatTooltipModule,\n        OverlayModule,\n        ReactiveFormsModule,\n        QDSButtonComponent,\n        QDSHeaderComponent\n    ]\n})\nexport class MaterialModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "QDSButtonComponent"
                        },
                        {
                            "name": "QDSHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "QDSButtonComponent"
                        },
                        {
                            "name": "QDSHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [provideRouter(routes), provideAnimationsAsync('noop')]\n}"
            },
            {
                "name": "createAngularInputProperty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/argsToTemplate.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "({\n    propertyName,\n    value\n}: {\n    propertyName: string;\n    value: any;\n}) => {\n    let templateValue;\n    switch (typeof value) {\n        case 'string':\n            templateValue = `'${value}'`;\n            break;\n        case 'object':\n            // NOTE: This has a side-effect of breaking input objects that\n            //   can't be stringified then parsed and still work. It also\n            //   will error for objects that contain a circular reference,\n            //   which is a known issue.\n            templateValue = JSON.stringify(value)\n                .replace(/'/g, '\\u2019')\n                .replace(/\\\\\"/g, '\\u201D')\n                .replace(/\"([^-\"]+)\":/g, '$1: ')\n                .replace(/\"/g, \"'\")\n                .replace(/\\u2019/g, \"\\\\'\")\n                .replace(/\\u201D/g, \"\\\\'\")\n                .split(',')\n                .join(', ');\n            break;\n        default:\n            templateValue = value;\n    }\n\n    return `[${propertyName}]=\"${templateValue}\"`;\n}"
            }
        ],
        "functions": [
            {
                "name": "argsToTemplateCustom",
                "file": "src/stories/argsToTemplate.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "args",
                        "type": "A",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "options",
                        "type": "ArgsToTemplateOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "args",
                        "type": "A",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "options",
                        "type": "ArgsToTemplateOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "{}",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [provideRouter(routes), provideAnimationsAsync('noop')]\n}"
                }
            ],
            "src/stories/argsToTemplate.ts": [
                {
                    "name": "createAngularInputProperty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/argsToTemplate.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "({\n    propertyName,\n    value\n}: {\n    propertyName: string;\n    value: any;\n}) => {\n    let templateValue;\n    switch (typeof value) {\n        case 'string':\n            templateValue = `'${value}'`;\n            break;\n        case 'object':\n            // NOTE: This has a side-effect of breaking input objects that\n            //   can't be stringified then parsed and still work. It also\n            //   will error for objects that contain a circular reference,\n            //   which is a known issue.\n            templateValue = JSON.stringify(value)\n                .replace(/'/g, '\\u2019')\n                .replace(/\\\\\"/g, '\\u201D')\n                .replace(/\"([^-\"]+)\":/g, '$1: ')\n                .replace(/\"/g, \"'\")\n                .replace(/\\u2019/g, \"\\\\'\")\n                .replace(/\\u201D/g, \"\\\\'\")\n                .split(',')\n                .join(', ');\n            break;\n        default:\n            templateValue = value;\n    }\n\n    return `[${propertyName}]=\"${templateValue}\"`;\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/stories/argsToTemplate.ts": [
                {
                    "name": "argsToTemplateCustom",
                    "file": "src/stories/argsToTemplate.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "args",
                            "type": "A",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "ArgsToTemplateOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "A",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "ArgsToTemplateOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{}",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/accordion/accordion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSAccordionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/argsToTemplate.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "argsToTemplateCustom",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/argsToTemplate.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createAngularInputProperty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/autocomplete/autocomplete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSAutocompleteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/stories/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSAvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/stories/badge/badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSBadgeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/stories/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/stories/button/icon-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSIconButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/stories/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSCheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/stories/contextual-menu/contextual-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSContextualMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/stories/datepicker/datepicker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSDatepickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/stories/divider/divider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSDividerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/stories/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/stories/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/stories/link/link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSLinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/stories/loader/loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSLoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/stories/message/message.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSMessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/stories/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/stories/navigation/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSFooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/stories/navigation/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/stories/navigation/rail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSNavRailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/stories/pagination/pagination.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSPaginationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/stories/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSProgressBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/progress-stepper/progress-stepper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSProgressStepperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/stories/radio-button/radio-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSRadioGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/stories/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSInputSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/stories/sidesheet/sidesheet.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSSidesheetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/stories/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/stories/tabs/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSTabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/stories/tag/tag.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSTagComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/stories/textarea/textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSTextareaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/stories/toast/toast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSToastComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/stories/toggle/toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/stories/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QDSTooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}